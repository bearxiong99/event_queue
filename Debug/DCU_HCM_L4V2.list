
DCU_HCM_L4V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000084c  08006468  08006468  00016468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cb4  08006cb4  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  08006cb4  08006cb4  00016cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cbc  08006cbc  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cbc  08006cbc  00016cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cc0  08006cc0  00016cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  08006cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000148  08006e0c  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006d4  08006e0c  000206d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020191  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004098  00000000  00000000  00040309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001800  00000000  00000000  000443a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001618  00000000  00000000  00045ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027dbc  00000000  00000000  000471c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc05  00000000  00000000  0006ef7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3699  00000000  00000000  0008cb81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018021a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062b4  00000000  00000000  00180270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000148 	.word	0x20000148
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006450 	.word	0x08006450

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000014c 	.word	0x2000014c
 80001d0:	08006450 	.word	0x08006450

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b96e 	b.w	80004d8 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468c      	mov	ip, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	f040 8083 	bne.w	800032a <__udivmoddi4+0x116>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d947      	bls.n	80002ba <__udivmoddi4+0xa6>
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	b142      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 8000230:	f1c2 0020 	rsb	r0, r2, #32
 8000234:	fa24 f000 	lsr.w	r0, r4, r0
 8000238:	4091      	lsls	r1, r2
 800023a:	4097      	lsls	r7, r2
 800023c:	ea40 0c01 	orr.w	ip, r0, r1
 8000240:	4094      	lsls	r4, r2
 8000242:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000246:	0c23      	lsrs	r3, r4, #16
 8000248:	fbbc f6f8 	udiv	r6, ip, r8
 800024c:	fa1f fe87 	uxth.w	lr, r7
 8000250:	fb08 c116 	mls	r1, r8, r6, ip
 8000254:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000258:	fb06 f10e 	mul.w	r1, r6, lr
 800025c:	4299      	cmp	r1, r3
 800025e:	d909      	bls.n	8000274 <__udivmoddi4+0x60>
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 8119 	bcs.w	800049c <__udivmoddi4+0x288>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 8116 	bls.w	800049c <__udivmoddi4+0x288>
 8000270:	3e02      	subs	r6, #2
 8000272:	443b      	add	r3, r7
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 fe0e 	mul.w	lr, r0, lr
 8000288:	45a6      	cmp	lr, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x8c>
 800028c:	193c      	adds	r4, r7, r4
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 8105 	bcs.w	80004a0 <__udivmoddi4+0x28c>
 8000296:	45a6      	cmp	lr, r4
 8000298:	f240 8102 	bls.w	80004a0 <__udivmoddi4+0x28c>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a4:	eba4 040e 	sub.w	r4, r4, lr
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa0>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	b902      	cbnz	r2, 80002be <__udivmoddi4+0xaa>
 80002bc:	deff      	udf	#255	; 0xff
 80002be:	fab2 f282 	clz	r2, r2
 80002c2:	2a00      	cmp	r2, #0
 80002c4:	d150      	bne.n	8000368 <__udivmoddi4+0x154>
 80002c6:	1bcb      	subs	r3, r1, r7
 80002c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002cc:	fa1f f887 	uxth.w	r8, r7
 80002d0:	2601      	movs	r6, #1
 80002d2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d6:	0c21      	lsrs	r1, r4, #16
 80002d8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e0:	fb08 f30c 	mul.w	r3, r8, ip
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xe4>
 80002e8:	1879      	adds	r1, r7, r1
 80002ea:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0xe2>
 80002f0:	428b      	cmp	r3, r1
 80002f2:	f200 80e9 	bhi.w	80004c8 <__udivmoddi4+0x2b4>
 80002f6:	4684      	mov	ip, r0
 80002f8:	1ac9      	subs	r1, r1, r3
 80002fa:	b2a3      	uxth	r3, r4
 80002fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000300:	fb0e 1110 	mls	r1, lr, r0, r1
 8000304:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000308:	fb08 f800 	mul.w	r8, r8, r0
 800030c:	45a0      	cmp	r8, r4
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x10c>
 8000310:	193c      	adds	r4, r7, r4
 8000312:	f100 33ff 	add.w	r3, r0, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x10a>
 8000318:	45a0      	cmp	r8, r4
 800031a:	f200 80d9 	bhi.w	80004d0 <__udivmoddi4+0x2bc>
 800031e:	4618      	mov	r0, r3
 8000320:	eba4 0408 	sub.w	r4, r4, r8
 8000324:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000328:	e7bf      	b.n	80002aa <__udivmoddi4+0x96>
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x12e>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80b1 	beq.w	8000496 <__udivmoddi4+0x282>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x1cc>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0x140>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80b8 	bhi.w	80004c4 <__udivmoddi4+0x2b0>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0103 	sbc.w	r1, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	468c      	mov	ip, r1
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0a8      	beq.n	80002b4 <__udivmoddi4+0xa0>
 8000362:	e9c5 4c00 	strd	r4, ip, [r5]
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0xa0>
 8000368:	f1c2 0320 	rsb	r3, r2, #32
 800036c:	fa20 f603 	lsr.w	r6, r0, r3
 8000370:	4097      	lsls	r7, r2
 8000372:	fa01 f002 	lsl.w	r0, r1, r2
 8000376:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037a:	40d9      	lsrs	r1, r3
 800037c:	4330      	orrs	r0, r6
 800037e:	0c03      	lsrs	r3, r0, #16
 8000380:	fbb1 f6fe 	udiv	r6, r1, lr
 8000384:	fa1f f887 	uxth.w	r8, r7
 8000388:	fb0e 1116 	mls	r1, lr, r6, r1
 800038c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000390:	fb06 f108 	mul.w	r1, r6, r8
 8000394:	4299      	cmp	r1, r3
 8000396:	fa04 f402 	lsl.w	r4, r4, r2
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x19c>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a2:	f080 808d 	bcs.w	80004c0 <__udivmoddi4+0x2ac>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 808a 	bls.w	80004c0 <__udivmoddi4+0x2ac>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b281      	uxth	r1, r0
 80003b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c0:	fb00 f308 	mul.w	r3, r0, r8
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x1c4>
 80003c8:	1879      	adds	r1, r7, r1
 80003ca:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ce:	d273      	bcs.n	80004b8 <__udivmoddi4+0x2a4>
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d971      	bls.n	80004b8 <__udivmoddi4+0x2a4>
 80003d4:	3802      	subs	r0, #2
 80003d6:	4439      	add	r1, r7
 80003d8:	1acb      	subs	r3, r1, r3
 80003da:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003de:	e778      	b.n	80002d2 <__udivmoddi4+0xbe>
 80003e0:	f1c6 0c20 	rsb	ip, r6, #32
 80003e4:	fa03 f406 	lsl.w	r4, r3, r6
 80003e8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003ec:	431c      	orrs	r4, r3
 80003ee:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fa:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fe:	431f      	orrs	r7, r3
 8000400:	0c3b      	lsrs	r3, r7, #16
 8000402:	fbb1 f9fe 	udiv	r9, r1, lr
 8000406:	fa1f f884 	uxth.w	r8, r4
 800040a:	fb0e 1119 	mls	r1, lr, r9, r1
 800040e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000412:	fb09 fa08 	mul.w	sl, r9, r8
 8000416:	458a      	cmp	sl, r1
 8000418:	fa02 f206 	lsl.w	r2, r2, r6
 800041c:	fa00 f306 	lsl.w	r3, r0, r6
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x220>
 8000422:	1861      	adds	r1, r4, r1
 8000424:	f109 30ff 	add.w	r0, r9, #4294967295
 8000428:	d248      	bcs.n	80004bc <__udivmoddi4+0x2a8>
 800042a:	458a      	cmp	sl, r1
 800042c:	d946      	bls.n	80004bc <__udivmoddi4+0x2a8>
 800042e:	f1a9 0902 	sub.w	r9, r9, #2
 8000432:	4421      	add	r1, r4
 8000434:	eba1 010a 	sub.w	r1, r1, sl
 8000438:	b2bf      	uxth	r7, r7
 800043a:	fbb1 f0fe 	udiv	r0, r1, lr
 800043e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000442:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000446:	fb00 f808 	mul.w	r8, r0, r8
 800044a:	45b8      	cmp	r8, r7
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x24a>
 800044e:	19e7      	adds	r7, r4, r7
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d22e      	bcs.n	80004b4 <__udivmoddi4+0x2a0>
 8000456:	45b8      	cmp	r8, r7
 8000458:	d92c      	bls.n	80004b4 <__udivmoddi4+0x2a0>
 800045a:	3802      	subs	r0, #2
 800045c:	4427      	add	r7, r4
 800045e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000462:	eba7 0708 	sub.w	r7, r7, r8
 8000466:	fba0 8902 	umull	r8, r9, r0, r2
 800046a:	454f      	cmp	r7, r9
 800046c:	46c6      	mov	lr, r8
 800046e:	4649      	mov	r1, r9
 8000470:	d31a      	bcc.n	80004a8 <__udivmoddi4+0x294>
 8000472:	d017      	beq.n	80004a4 <__udivmoddi4+0x290>
 8000474:	b15d      	cbz	r5, 800048e <__udivmoddi4+0x27a>
 8000476:	ebb3 020e 	subs.w	r2, r3, lr
 800047a:	eb67 0701 	sbc.w	r7, r7, r1
 800047e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000482:	40f2      	lsrs	r2, r6
 8000484:	ea4c 0202 	orr.w	r2, ip, r2
 8000488:	40f7      	lsrs	r7, r6
 800048a:	e9c5 2700 	strd	r2, r7, [r5]
 800048e:	2600      	movs	r6, #0
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e70b      	b.n	80002b4 <__udivmoddi4+0xa0>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e9      	b.n	8000274 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fd      	b.n	80002a0 <__udivmoddi4+0x8c>
 80004a4:	4543      	cmp	r3, r8
 80004a6:	d2e5      	bcs.n	8000474 <__udivmoddi4+0x260>
 80004a8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ac:	eb69 0104 	sbc.w	r1, r9, r4
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7df      	b.n	8000474 <__udivmoddi4+0x260>
 80004b4:	4608      	mov	r0, r1
 80004b6:	e7d2      	b.n	800045e <__udivmoddi4+0x24a>
 80004b8:	4660      	mov	r0, ip
 80004ba:	e78d      	b.n	80003d8 <__udivmoddi4+0x1c4>
 80004bc:	4681      	mov	r9, r0
 80004be:	e7b9      	b.n	8000434 <__udivmoddi4+0x220>
 80004c0:	4666      	mov	r6, ip
 80004c2:	e775      	b.n	80003b0 <__udivmoddi4+0x19c>
 80004c4:	4630      	mov	r0, r6
 80004c6:	e74a      	b.n	800035e <__udivmoddi4+0x14a>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	4439      	add	r1, r7
 80004ce:	e713      	b.n	80002f8 <__udivmoddi4+0xe4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	443c      	add	r4, r7
 80004d4:	e724      	b.n	8000320 <__udivmoddi4+0x10c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MainTask>:
#include "elster.h"

static void AppInit(void);

void MainTask(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	AppInit();
 80004e0:	f000 f807 	bl	80004f2 <AppInit>
	for (;;)
	{
		EventTask();
 80004e4:	f005 f82a 	bl	800553c <EventTask>
		SimTask();
 80004e8:	f005 fcdc 	bl	8005ea4 <SimTask>
		MeterTask();
 80004ec:	f005 f99c 	bl	8005828 <MeterTask>
		EventTask();
 80004f0:	e7f8      	b.n	80004e4 <MainTask+0x8>

080004f2 <AppInit>:
	}
}


static void AppInit(void)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	af00      	add	r7, sp, #0
	Event_Init();
 80004f6:	f005 f80f 	bl	8005518 <Event_Init>
	SimInit();
 80004fa:	f005 fcb5 	bl	8005e68 <SimInit>
	MeterInit();
 80004fe:	f005 f975 	bl	80057ec <MeterInit>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050e:	463b      	mov	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]
 800051c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800051e:	4b30      	ldr	r3, [pc, #192]	; (80005e0 <MX_ADC1_Init+0xd8>)
 8000520:	4a30      	ldr	r2, [pc, #192]	; (80005e4 <MX_ADC1_Init+0xdc>)
 8000522:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000524:	4b2e      	ldr	r3, [pc, #184]	; (80005e0 <MX_ADC1_Init+0xd8>)
 8000526:	2200      	movs	r2, #0
 8000528:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800052a:	4b2d      	ldr	r3, [pc, #180]	; (80005e0 <MX_ADC1_Init+0xd8>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000530:	4b2b      	ldr	r3, [pc, #172]	; (80005e0 <MX_ADC1_Init+0xd8>)
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000536:	4b2a      	ldr	r3, [pc, #168]	; (80005e0 <MX_ADC1_Init+0xd8>)
 8000538:	2201      	movs	r2, #1
 800053a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800053c:	4b28      	ldr	r3, [pc, #160]	; (80005e0 <MX_ADC1_Init+0xd8>)
 800053e:	2204      	movs	r2, #4
 8000540:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000542:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <MX_ADC1_Init+0xd8>)
 8000544:	2200      	movs	r2, #0
 8000546:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000548:	4b25      	ldr	r3, [pc, #148]	; (80005e0 <MX_ADC1_Init+0xd8>)
 800054a:	2200      	movs	r2, #0
 800054c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800054e:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <MX_ADC1_Init+0xd8>)
 8000550:	2202      	movs	r2, #2
 8000552:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <MX_ADC1_Init+0xd8>)
 8000556:	2200      	movs	r2, #0
 8000558:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800055c:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <MX_ADC1_Init+0xd8>)
 800055e:	2200      	movs	r2, #0
 8000560:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000562:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <MX_ADC1_Init+0xd8>)
 8000564:	2200      	movs	r2, #0
 8000566:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000568:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <MX_ADC1_Init+0xd8>)
 800056a:	2200      	movs	r2, #0
 800056c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <MX_ADC1_Init+0xd8>)
 8000572:	2200      	movs	r2, #0
 8000574:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000576:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <MX_ADC1_Init+0xd8>)
 8000578:	2200      	movs	r2, #0
 800057a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800057e:	4818      	ldr	r0, [pc, #96]	; (80005e0 <MX_ADC1_Init+0xd8>)
 8000580:	f000 ffda 	bl	8001538 <HAL_ADC_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800058a:	f000 fa63 	bl	8000a54 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800058e:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <MX_ADC1_Init+0xe0>)
 8000590:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000592:	2306      	movs	r3, #6
 8000594:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000596:	2307      	movs	r3, #7
 8000598:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800059a:	237f      	movs	r3, #127	; 0x7f
 800059c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800059e:	2304      	movs	r3, #4
 80005a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a6:	463b      	mov	r3, r7
 80005a8:	4619      	mov	r1, r3
 80005aa:	480d      	ldr	r0, [pc, #52]	; (80005e0 <MX_ADC1_Init+0xd8>)
 80005ac:	f001 f910 	bl	80017d0 <HAL_ADC_ConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005b6:	f000 fa4d 	bl	8000a54 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <MX_ADC1_Init+0xe4>)
 80005bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005be:	230c      	movs	r3, #12
 80005c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c2:	463b      	mov	r3, r7
 80005c4:	4619      	mov	r1, r3
 80005c6:	4806      	ldr	r0, [pc, #24]	; (80005e0 <MX_ADC1_Init+0xd8>)
 80005c8:	f001 f902 	bl	80017d0 <HAL_ADC_ConfigChannel>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80005d2:	f000 fa3f 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200003e8 	.word	0x200003e8
 80005e4:	50040000 	.word	0x50040000
 80005e8:	04300002 	.word	0x04300002
 80005ec:	80000001 	.word	0x80000001

080005f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b0a4      	sub	sp, #144	; 0x90
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	2268      	movs	r2, #104	; 0x68
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f005 fefd 	bl	8006410 <memset>
  if(adcHandle->Instance==ADC1)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a26      	ldr	r2, [pc, #152]	; (80006b4 <HAL_ADC_MspInit+0xc4>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d144      	bne.n	80006aa <HAL_ADC_MspInit+0xba>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000620:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000624:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000626:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800062a:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000630:	2302      	movs	r3, #2
 8000632:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000634:	2310      	movs	r3, #16
 8000636:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000638:	2307      	movs	r3, #7
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000644:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000648:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4618      	mov	r0, r3
 8000650:	f002 feea 	bl	8003428 <HAL_RCCEx_PeriphCLKConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800065a:	f000 f9fb 	bl	8000a54 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <HAL_ADC_MspInit+0xc8>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <HAL_ADC_MspInit+0xc8>)
 8000664:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <HAL_ADC_MspInit+0xc8>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <HAL_ADC_MspInit+0xc8>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	4a0f      	ldr	r2, [pc, #60]	; (80006b8 <HAL_ADC_MspInit+0xc8>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <HAL_ADC_MspInit+0xc8>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800068e:	2301      	movs	r3, #1
 8000690:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000692:	230b      	movs	r3, #11
 8000694:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <HAL_ADC_MspInit+0xcc>)
 80006a6:	f001 fdf1 	bl	800228c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006aa:	bf00      	nop
 80006ac:	3790      	adds	r7, #144	; 0x90
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	50040000 	.word	0x50040000
 80006b8:	40021000 	.word	0x40021000
 80006bc:	48000800 	.word	0x48000800

080006c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	4b85      	ldr	r3, [pc, #532]	; (80008ec <MX_GPIO_Init+0x22c>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a84      	ldr	r2, [pc, #528]	; (80008ec <MX_GPIO_Init+0x22c>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b82      	ldr	r3, [pc, #520]	; (80008ec <MX_GPIO_Init+0x22c>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b7f      	ldr	r3, [pc, #508]	; (80008ec <MX_GPIO_Init+0x22c>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	4a7e      	ldr	r2, [pc, #504]	; (80008ec <MX_GPIO_Init+0x22c>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fa:	4b7c      	ldr	r3, [pc, #496]	; (80008ec <MX_GPIO_Init+0x22c>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b79      	ldr	r3, [pc, #484]	; (80008ec <MX_GPIO_Init+0x22c>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a78      	ldr	r2, [pc, #480]	; (80008ec <MX_GPIO_Init+0x22c>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b76      	ldr	r3, [pc, #472]	; (80008ec <MX_GPIO_Init+0x22c>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PB12_Pin|PB13_Pin|SPI_NSS_Pin|TP2_Pin, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8000724:	4872      	ldr	r0, [pc, #456]	; (80008f0 <MX_GPIO_Init+0x230>)
 8000726:	f001 ff2b 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HOLD_RESET_FLASH_Pin|PB14_Pin|PB15_Pin, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	210e      	movs	r1, #14
 800072e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000732:	f001 ff25 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_UC15_GPIO_Port, RESET_UC15_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2120      	movs	r1, #32
 800073a:	486d      	ldr	r0, [pc, #436]	; (80008f0 <MX_GPIO_Init+0x230>)
 800073c:	f001 ff20 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWRKEY_Pin|SIM_RTS_Pin|ON_OFF_SIM_Pin|CE_BQ_Pin, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f244 0119 	movw	r1, #16409	; 0x4019
 8000746:	486b      	ldr	r0, [pc, #428]	; (80008f4 <MX_GPIO_Init+0x234>)
 8000748:	f001 ff1a 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_DTR_GPIO_Port, SIM_DTR_Pin, GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000752:	4868      	ldr	r0, [pc, #416]	; (80008f4 <MX_GPIO_Init+0x234>)
 8000754:	f001 ff14 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NET485IO_Pin|MCU_232_CTS_Pin|MCU_232_RTS_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 800075e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000762:	f001 ff0d 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PB12_Pin|PB13_Pin|RESET_UC15_Pin;
 8000766:	232a      	movs	r3, #42	; 0x2a
 8000768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	4619      	mov	r1, r3
 800077c:	485c      	ldr	r0, [pc, #368]	; (80008f0 <MX_GPIO_Init+0x230>)
 800077e:	f001 fd85 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HOLD_RESET_FLASH_Pin;
 8000782:	2302      	movs	r3, #2
 8000784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800078a:	2301      	movs	r3, #1
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HOLD_RESET_FLASH_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	4619      	mov	r1, r3
 8000798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079c:	f001 fd76 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PB14_Pin|PB15_Pin;
 80007a0:	230c      	movs	r3, #12
 80007a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	4619      	mov	r1, r3
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f001 fd67 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_NSS_Pin;
 80007be:	2310      	movs	r3, #16
 80007c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	4619      	mov	r1, r3
 80007d4:	4846      	ldr	r0, [pc, #280]	; (80008f0 <MX_GPIO_Init+0x230>)
 80007d6:	f001 fd59 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWRKEY_Pin|ON_OFF_SIM_Pin|CE_BQ_Pin;
 80007da:	2319      	movs	r3, #25
 80007dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	4619      	mov	r1, r3
 80007f0:	4840      	ldr	r0, [pc, #256]	; (80008f4 <MX_GPIO_Init+0x234>)
 80007f2:	f001 fd4b 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SIM_PRE_Pin|CHG_Pin|PGOOD_Pin;
 80007f6:	f44f 7391 	mov.w	r3, #290	; 0x122
 80007fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000800:	2301      	movs	r3, #1
 8000802:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4619      	mov	r1, r3
 800080a:	483a      	ldr	r0, [pc, #232]	; (80008f4 <MX_GPIO_Init+0x234>)
 800080c:	f001 fd3e 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SIM_DTR_Pin;
 8000810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081e:	2302      	movs	r3, #2
 8000820:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SIM_DTR_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	4619      	mov	r1, r3
 8000828:	4832      	ldr	r0, [pc, #200]	; (80008f4 <MX_GPIO_Init+0x234>)
 800082a:	f001 fd2f 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SIM_RTS_Pin;
 800082e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SIM_RTS_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4619      	mov	r1, r3
 8000846:	482b      	ldr	r0, [pc, #172]	; (80008f4 <MX_GPIO_Init+0x234>)
 8000848:	f001 fd20 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP1_Pin;
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000854:	2302      	movs	r3, #2
 8000856:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TP1_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	4619      	mov	r1, r3
 800085e:	4824      	ldr	r0, [pc, #144]	; (80008f0 <MX_GPIO_Init+0x230>)
 8000860:	f001 fd14 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP2_Pin;
 8000864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000872:	2301      	movs	r3, #1
 8000874:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TP2_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	481c      	ldr	r0, [pc, #112]	; (80008f0 <MX_GPIO_Init+0x230>)
 800087e:	f001 fd05 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NET485IO_Pin;
 8000882:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800088c:	2301      	movs	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000890:	2302      	movs	r3, #2
 8000892:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NET485IO_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4619      	mov	r1, r3
 800089a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089e:	f001 fcf5 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_232_CTS_Pin;
 80008a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MCU_232_CTS_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4619      	mov	r1, r3
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f001 fce5 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_232_RTS_Pin;
 80008c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008d0:	2301      	movs	r3, #1
 80008d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MCU_232_RTS_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	4619      	mov	r1, r3
 80008da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008de:	f001 fcd5 	bl	800228c <HAL_GPIO_Init>

}
 80008e2:	bf00      	nop
 80008e4:	3720      	adds	r7, #32
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000
 80008f0:	48000800 	.word	0x48000800
 80008f4:	48000400 	.word	0x48000400

080008f8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80008fc:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_IWDG_Init+0x34>)
 80008fe:	4a0c      	ldr	r2, [pc, #48]	; (8000930 <MX_IWDG_Init+0x38>)
 8000900:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_IWDG_Init+0x34>)
 8000904:	2203      	movs	r2, #3
 8000906:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_IWDG_Init+0x34>)
 800090a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800090e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_IWDG_Init+0x34>)
 8000912:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000916:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_IWDG_Init+0x34>)
 800091a:	f001 fe63 	bl	80025e4 <HAL_IWDG_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000924:	f000 f896 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000450 	.word	0x20000450
 8000930:	40003000 	.word	0x40003000

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000938:	f000 fc25 	bl	8001186 <HAL_Init>
// Init SystemClock with MSI or HSI to ensure that the system clock will never error
// Check RTC data is storage in flash if have valid data so we should use LSE otherwise use LSI
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093c:	f000 f816 	bl	800096c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
/* The IWDG should be initialization before other peripherals */
  MX_IWDG_Init();
 8000940:	f7ff ffda 	bl	80008f8 <MX_IWDG_Init>
 * */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000944:	f7ff febc 	bl	80006c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000948:	f7ff fdde 	bl	8000508 <MX_ADC1_Init>
  MX_RTC_Init();
 800094c:	f000 f888 	bl	8000a60 <MX_RTC_Init>
  MX_SPI1_Init();
 8000950:	f000 f8de 	bl	8000b10 <MX_SPI1_Init>
  MX_UART4_Init();
 8000954:	f000 fa5c 	bl	8000e10 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000958:	f000 fa8a 	bl	8000e70 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800095c:	f000 fab8 	bl	8000ed0 <MX_USART3_UART_Init>
  MX_IWDG_Init();
 8000960:	f7ff ffca 	bl	80008f8 <MX_IWDG_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MainTask();
 8000964:	f7ff fdba 	bl	80004dc <MainTask>
 8000968:	e7fc      	b.n	8000964 <main+0x30>
	...

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b096      	sub	sp, #88	; 0x58
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2244      	movs	r2, #68	; 0x44
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f005 fd48 	bl	8006410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	463b      	mov	r3, r7
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800098e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000992:	f001 fe9b 	bl	80026cc <HAL_PWREx_ControlVoltageScaling>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800099c:	f000 f85a 	bl	8000a54 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009a0:	f001 fe76 	bl	8002690 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <SystemClock_Config+0xc0>)
 80009a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009aa:	4a20      	ldr	r2, [pc, #128]	; (8000a2c <SystemClock_Config+0xc0>)
 80009ac:	f023 0318 	bic.w	r3, r3, #24
 80009b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80009b4:	230e      	movs	r3, #14
 80009b6:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c2:	2340      	movs	r3, #64	; 0x40
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009c6:	2301      	movs	r3, #1
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ca:	2302      	movs	r3, #2
 80009cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ce:	2302      	movs	r3, #2
 80009d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80009d6:	2310      	movs	r3, #16
 80009d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009da:	2307      	movs	r3, #7
 80009dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009de:	2302      	movs	r3, #2
 80009e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 fec4 	bl	8002778 <HAL_RCC_OscConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80009f6:	f000 f82d 	bl	8000a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fa:	230f      	movs	r3, #15
 80009fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fe:	2303      	movs	r3, #3
 8000a00:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2103      	movs	r1, #3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f002 fad0 	bl	8002fb8 <HAL_RCC_ClockConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a1e:	f000 f819 	bl	8000a54 <Error_Handler>
  }
}
 8000a22:	bf00      	nop
 8000a24:	3758      	adds	r7, #88	; 0x58
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d101      	bne.n	8000a46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a42:	f000 fbb9 	bl	80011b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40012c00 	.word	0x40012c00

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <Error_Handler+0x8>
	...

08000a60 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a64:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_RTC_Init+0x48>)
 8000a66:	4a11      	ldr	r2, [pc, #68]	; (8000aac <MX_RTC_Init+0x4c>)
 8000a68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_RTC_Init+0x48>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <MX_RTC_Init+0x48>)
 8000a72:	227f      	movs	r2, #127	; 0x7f
 8000a74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_RTC_Init+0x48>)
 8000a78:	22ff      	movs	r2, #255	; 0xff
 8000a7a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <MX_RTC_Init+0x48>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_RTC_Init+0x48>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <MX_RTC_Init+0x48>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_RTC_Init+0x48>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_RTC_Init+0x48>)
 8000a96:	f003 f825 	bl	8003ae4 <HAL_RTC_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000aa0:	f7ff ffd8 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000460 	.word	0x20000460
 8000aac:	40002800 	.word	0x40002800

08000ab0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b09c      	sub	sp, #112	; 0x70
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	2268      	movs	r2, #104	; 0x68
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f005 fca5 	bl	8006410 <memset>
  if(rtcHandle->Instance==RTC)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <HAL_RTC_MspInit+0x58>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d117      	bne.n	8000b00 <HAL_RTC_MspInit+0x50>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ad0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ad4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ada:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 fca1 	bl	8003428 <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000aec:	f7ff ffb2 	bl	8000a54 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_RTC_MspInit+0x5c>)
 8000af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <HAL_RTC_MspInit+0x5c>)
 8000af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b00:	bf00      	nop
 8000b02:	3770      	adds	r7, #112	; 0x70
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40002800 	.word	0x40002800
 8000b0c:	40021000 	.word	0x40021000

08000b10 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <MX_SPI1_Init+0x74>)
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <MX_SPI1_Init+0x78>)
 8000b18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <MX_SPI1_Init+0x74>)
 8000b1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <MX_SPI1_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <MX_SPI1_Init+0x74>)
 8000b2a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_SPI1_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <MX_SPI1_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_SPI1_Init+0x74>)
 8000b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b42:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_SPI1_Init+0x74>)
 8000b46:	2210      	movs	r2, #16
 8000b48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_SPI1_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_SPI1_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_SPI1_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_SPI1_Init+0x74>)
 8000b5e:	2207      	movs	r2, #7
 8000b60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_SPI1_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_SPI1_Init+0x74>)
 8000b6a:	2208      	movs	r2, #8
 8000b6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_SPI1_Init+0x74>)
 8000b70:	f003 f8ca 	bl	8003d08 <HAL_SPI_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b7a:	f7ff ff6b 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000484 	.word	0x20000484
 8000b88:	40013000 	.word	0x40013000

08000b8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <HAL_SPI_MspInit+0x7c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d128      	bne.n	8000c00 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <HAL_SPI_MspInit+0x80>)
 8000bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb2:	4a16      	ldr	r2, [pc, #88]	; (8000c0c <HAL_SPI_MspInit+0x80>)
 8000bb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_SPI_MspInit+0x80>)
 8000bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_SPI_MspInit+0x80>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <HAL_SPI_MspInit+0x80>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_SPI_MspInit+0x80>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bde:	23e0      	movs	r3, #224	; 0xe0
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bee:	2305      	movs	r3, #5
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f001 fb46 	bl	800228c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	; 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40013000 	.word	0x40013000
 8000c0c:	40021000 	.word	0x40021000

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_MspInit+0x44>)
 8000c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_MspInit+0x44>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6613      	str	r3, [r2, #96]	; 0x60
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_MspInit+0x44>)
 8000c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_MspInit+0x44>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_MspInit+0x44>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_MspInit+0x44>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000

08000c58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	; 0x30
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	2019      	movs	r0, #25
 8000c6e:	f001 fa63 	bl	8002138 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c72:	2019      	movs	r0, #25
 8000c74:	f001 fa7c 	bl	8002170 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c78:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <HAL_InitTick+0x9c>)
 8000c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7c:	4a1d      	ldr	r2, [pc, #116]	; (8000cf4 <HAL_InitTick+0x9c>)
 8000c7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c82:	6613      	str	r3, [r2, #96]	; 0x60
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <HAL_InitTick+0x9c>)
 8000c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c90:	f107 0210 	add.w	r2, r7, #16
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f002 fb32 	bl	8003304 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ca0:	f002 fb1a 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8000ca4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca8:	4a13      	ldr	r2, [pc, #76]	; (8000cf8 <HAL_InitTick+0xa0>)
 8000caa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cae:	0c9b      	lsrs	r3, r3, #18
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_InitTick+0xa4>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <HAL_InitTick+0xa8>)
 8000cb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <HAL_InitTick+0xa4>)
 8000cbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cc0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cc2:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <HAL_InitTick+0xa4>)
 8000cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_InitTick+0xa4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_InitTick+0xa4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <HAL_InitTick+0xa4>)
 8000cd6:	f003 f8ba 	bl	8003e4e <HAL_TIM_Base_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d104      	bne.n	8000cea <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ce0:	4806      	ldr	r0, [pc, #24]	; (8000cfc <HAL_InitTick+0xa4>)
 8000ce2:	f003 f915 	bl	8003f10 <HAL_TIM_Base_Start_IT>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3730      	adds	r7, #48	; 0x30
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	431bde83 	.word	0x431bde83
 8000cfc:	200004e8 	.word	0x200004e8
 8000d00:	40012c00 	.word	0x40012c00

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <NMI_Handler+0x4>

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d62:	f003 f931 	bl	8003fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200004e8 	.word	0x200004e8

08000d70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <USART1_IRQHandler+0x10>)
 8000d76:	f003 fc21 	bl	80045bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200005b8 	.word	0x200005b8

08000d84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <USART3_IRQHandler+0x10>)
 8000d8a:	f003 fc17 	bl	80045bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000534 	.word	0x20000534

08000d98 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <UART4_IRQHandler+0x10>)
 8000d9e:	f003 fc0d 	bl	80045bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000063c 	.word	0x2000063c

08000dac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <SystemInit+0x5c>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db6:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <SystemInit+0x5c>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <SystemInit+0x60>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a11      	ldr	r2, [pc, #68]	; (8000e0c <SystemInit+0x60>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <SystemInit+0x60>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <SystemInit+0x60>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <SystemInit+0x60>)
 8000dd8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ddc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000de0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <SystemInit+0x60>)
 8000de4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000de8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <SystemInit+0x60>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <SystemInit+0x60>)
 8000df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <SystemInit+0x60>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00
 8000e0c:	40021000 	.word	0x40021000

08000e10 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <MX_UART4_Init+0x58>)
 8000e16:	4a15      	ldr	r2, [pc, #84]	; (8000e6c <MX_UART4_Init+0x5c>)
 8000e18:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <MX_UART4_Init+0x58>)
 8000e1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e20:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <MX_UART4_Init+0x58>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <MX_UART4_Init+0x58>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <MX_UART4_Init+0x58>)
 8000e30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e34:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MX_UART4_Init+0x58>)
 8000e38:	220c      	movs	r2, #12
 8000e3a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <MX_UART4_Init+0x58>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <MX_UART4_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <MX_UART4_Init+0x58>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_UART4_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e54:	4804      	ldr	r0, [pc, #16]	; (8000e68 <MX_UART4_Init+0x58>)
 8000e56:	f003 fa8b 	bl	8004370 <HAL_UART_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_UART4_Init+0x54>
  {
    Error_Handler();
 8000e60:	f7ff fdf8 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000063c 	.word	0x2000063c
 8000e6c:	40004c00 	.word	0x40004c00

08000e70 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000e76:	4a15      	ldr	r2, [pc, #84]	; (8000ecc <MX_USART1_UART_Init+0x5c>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_USART1_UART_Init+0x58>)
 8000eb4:	f003 fa5c 	bl	8004370 <HAL_UART_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ebe:	f7ff fdc9 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200005b8 	.word	0x200005b8
 8000ecc:	40013800 	.word	0x40013800

08000ed0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_USART3_UART_Init+0x58>)
 8000ed6:	4a15      	ldr	r2, [pc, #84]	; (8000f2c <MX_USART3_UART_Init+0x5c>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <MX_USART3_UART_Init+0x58>)
 8000edc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_USART3_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_USART3_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_USART3_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_USART3_UART_Init+0x58>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_USART3_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_USART3_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_USART3_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_USART3_UART_Init+0x58>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_USART3_UART_Init+0x58>)
 8000f14:	f003 fa2c 	bl	8004370 <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f1e:	f7ff fd99 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000534 	.word	0x20000534
 8000f2c:	40004800 	.word	0x40004800

08000f30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0a8      	sub	sp, #160	; 0xa0
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4c:	2268      	movs	r2, #104	; 0x68
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f005 fa5d 	bl	8006410 <memset>
  if(uartHandle->Instance==UART4)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a70      	ldr	r2, [pc, #448]	; (800111c <HAL_UART_MspInit+0x1ec>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d144      	bne.n	8000fea <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000f60:	2308      	movs	r3, #8
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_HSI;
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 fa5b 	bl	8003428 <HAL_RCCEx_PeriphCLKConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f78:	f7ff fd6c 	bl	8000a54 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f7c:	4b68      	ldr	r3, [pc, #416]	; (8001120 <HAL_UART_MspInit+0x1f0>)
 8000f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f80:	4a67      	ldr	r2, [pc, #412]	; (8001120 <HAL_UART_MspInit+0x1f0>)
 8000f82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f86:	6593      	str	r3, [r2, #88]	; 0x58
 8000f88:	4b65      	ldr	r3, [pc, #404]	; (8001120 <HAL_UART_MspInit+0x1f0>)
 8000f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f90:	623b      	str	r3, [r7, #32]
 8000f92:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f94:	4b62      	ldr	r3, [pc, #392]	; (8001120 <HAL_UART_MspInit+0x1f0>)
 8000f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f98:	4a61      	ldr	r2, [pc, #388]	; (8001120 <HAL_UART_MspInit+0x1f0>)
 8000f9a:	f043 0304 	orr.w	r3, r3, #4
 8000f9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa0:	4b5f      	ldr	r3, [pc, #380]	; (8001120 <HAL_UART_MspInit+0x1f0>)
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa4:	f003 0304 	and.w	r3, r3, #4
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_DEBUG_Pin|RX_DEBUG_Pin;
 8000fac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fcc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4854      	ldr	r0, [pc, #336]	; (8001124 <HAL_UART_MspInit+0x1f4>)
 8000fd4:	f001 f95a 	bl	800228c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2034      	movs	r0, #52	; 0x34
 8000fde:	f001 f8ab 	bl	8002138 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000fe2:	2034      	movs	r0, #52	; 0x34
 8000fe4:	f001 f8c4 	bl	8002170 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000fe8:	e093      	b.n	8001112 <HAL_UART_MspInit+0x1e2>
  else if(uartHandle->Instance==USART1)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a4e      	ldr	r2, [pc, #312]	; (8001128 <HAL_UART_MspInit+0x1f8>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d145      	bne.n	8001080 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001000:	4618      	mov	r0, r3
 8001002:	f002 fa11 	bl	8003428 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800100c:	f7ff fd22 	bl	8000a54 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001010:	4b43      	ldr	r3, [pc, #268]	; (8001120 <HAL_UART_MspInit+0x1f0>)
 8001012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001014:	4a42      	ldr	r2, [pc, #264]	; (8001120 <HAL_UART_MspInit+0x1f0>)
 8001016:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101a:	6613      	str	r3, [r2, #96]	; 0x60
 800101c:	4b40      	ldr	r3, [pc, #256]	; (8001120 <HAL_UART_MspInit+0x1f0>)
 800101e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001028:	4b3d      	ldr	r3, [pc, #244]	; (8001120 <HAL_UART_MspInit+0x1f0>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	4a3c      	ldr	r2, [pc, #240]	; (8001120 <HAL_UART_MspInit+0x1f0>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001034:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <HAL_UART_MspInit+0x1f0>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART_TXD_Pin|UART_RXD_Pin;
 8001040:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001044:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800105a:	2307      	movs	r3, #7
 800105c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f001 f90f 	bl	800228c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2025      	movs	r0, #37	; 0x25
 8001074:	f001 f860 	bl	8002138 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001078:	2025      	movs	r0, #37	; 0x25
 800107a:	f001 f879 	bl	8002170 <HAL_NVIC_EnableIRQ>
}
 800107e:	e048      	b.n	8001112 <HAL_UART_MspInit+0x1e2>
  else if(uartHandle->Instance==USART3)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a29      	ldr	r2, [pc, #164]	; (800112c <HAL_UART_MspInit+0x1fc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d143      	bne.n	8001112 <HAL_UART_MspInit+0x1e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800108a:	2304      	movs	r3, #4
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800108e:	2300      	movs	r3, #0
 8001090:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	4618      	mov	r0, r3
 8001098:	f002 f9c6 	bl	8003428 <HAL_RCCEx_PeriphCLKConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_UART_MspInit+0x176>
      Error_Handler();
 80010a2:	f7ff fcd7 	bl	8000a54 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010a6:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <HAL_UART_MspInit+0x1f0>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010aa:	4a1d      	ldr	r2, [pc, #116]	; (8001120 <HAL_UART_MspInit+0x1f0>)
 80010ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b0:	6593      	str	r3, [r2, #88]	; 0x58
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <HAL_UART_MspInit+0x1f0>)
 80010b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <HAL_UART_MspInit+0x1f0>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	4a17      	ldr	r2, [pc, #92]	; (8001120 <HAL_UART_MspInit+0x1f0>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_UART_MspInit+0x1f0>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SIM_TX_Pin|SIM_RX_Pin;
 80010d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010f0:	2307      	movs	r3, #7
 80010f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010fa:	4619      	mov	r1, r3
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <HAL_UART_MspInit+0x200>)
 80010fe:	f001 f8c5 	bl	800228c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	2027      	movs	r0, #39	; 0x27
 8001108:	f001 f816 	bl	8002138 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800110c:	2027      	movs	r0, #39	; 0x27
 800110e:	f001 f82f 	bl	8002170 <HAL_NVIC_EnableIRQ>
}
 8001112:	bf00      	nop
 8001114:	37a0      	adds	r7, #160	; 0xa0
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40004c00 	.word	0x40004c00
 8001120:	40021000 	.word	0x40021000
 8001124:	48000800 	.word	0x48000800
 8001128:	40013800 	.word	0x40013800
 800112c:	40004800 	.word	0x40004800
 8001130:	48000400 	.word	0x48000400

08001134 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800116c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001138:	f7ff fe38 	bl	8000dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800113c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800113e:	e003      	b.n	8001148 <LoopCopyDataInit>

08001140 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001142:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001144:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001146:	3104      	adds	r1, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001148:	480a      	ldr	r0, [pc, #40]	; (8001174 <LoopForever+0xa>)
	ldr	r3, =_edata
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <LoopForever+0xe>)
	adds	r2, r0, r1
 800114c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800114e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001150:	d3f6      	bcc.n	8001140 <CopyDataInit>
	ldr	r2, =_sbss
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001154:	e002      	b.n	800115c <LoopFillZerobss>

08001156 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001156:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001158:	f842 3b04 	str.w	r3, [r2], #4

0800115c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <LoopForever+0x16>)
	cmp	r2, r3
 800115e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001160:	d3f9      	bcc.n	8001156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001162:	f005 f923 	bl	80063ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001166:	f7ff fbe5 	bl	8000934 <main>

0800116a <LoopForever>:

LoopForever:
    b LoopForever
 800116a:	e7fe      	b.n	800116a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800116c:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 8001170:	08006cc4 	.word	0x08006cc4
	ldr	r0, =_sdata
 8001174:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001178:	20000148 	.word	0x20000148
	ldr	r2, =_sbss
 800117c:	20000148 	.word	0x20000148
	ldr	r3, = _ebss
 8001180:	200006d4 	.word	0x200006d4

08001184 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC1_IRQHandler>

08001186 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 ffc6 	bl	8002122 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001196:	200f      	movs	r0, #15
 8001198:	f7ff fd5e 	bl	8000c58 <HAL_InitTick>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	71fb      	strb	r3, [r7, #7]
 80011a6:	e001      	b.n	80011ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a8:	f7ff fd32 	bl	8000c10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011ac:	79fb      	ldrb	r3, [r7, #7]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_IncTick+0x20>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_IncTick+0x24>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <HAL_IncTick+0x24>)
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000008 	.word	0x20000008
 80011dc:	200006c0 	.word	0x200006c0

080011e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <HAL_GetTick+0x14>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	200006c0 	.word	0x200006c0

080011f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	431a      	orrs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	609a      	str	r2, [r3, #8]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	431a      	orrs	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	609a      	str	r2, [r3, #8]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3360      	adds	r3, #96	; 0x60
 8001272:	461a      	mov	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <LL_ADC_SetOffset+0x44>)
 8001282:	4013      	ands	r3, r2
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	4313      	orrs	r3, r2
 8001290:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001298:	bf00      	nop
 800129a:	371c      	adds	r7, #28
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	03fff000 	.word	0x03fff000

080012a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3360      	adds	r3, #96	; 0x60
 80012b6:	461a      	mov	r2, r3
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	3360      	adds	r3, #96	; 0x60
 80012e4:	461a      	mov	r2, r3
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	431a      	orrs	r2, r3
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012fe:	bf00      	nop
 8001300:	371c      	adds	r7, #28
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	615a      	str	r2, [r3, #20]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3330      	adds	r3, #48	; 0x30
 8001340:	461a      	mov	r2, r3
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	4413      	add	r3, r2
 800134e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f003 031f 	and.w	r3, r3, #31
 800135a:	211f      	movs	r1, #31
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	401a      	ands	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	0e9b      	lsrs	r3, r3, #26
 8001368:	f003 011f 	and.w	r1, r3, #31
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	f003 031f 	and.w	r3, r3, #31
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	431a      	orrs	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800137c:	bf00      	nop
 800137e:	371c      	adds	r7, #28
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3314      	adds	r3, #20
 8001398:	461a      	mov	r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	0e5b      	lsrs	r3, r3, #25
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	4413      	add	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	0d1b      	lsrs	r3, r3, #20
 80013b0:	f003 031f 	and.w	r3, r3, #31
 80013b4:	2107      	movs	r1, #7
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	401a      	ands	r2, r3
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	0d1b      	lsrs	r3, r3, #20
 80013c2:	f003 031f 	and.w	r3, r3, #31
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	431a      	orrs	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013d2:	bf00      	nop
 80013d4:	371c      	adds	r7, #28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013f8:	43db      	mvns	r3, r3
 80013fa:	401a      	ands	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0318 	and.w	r3, r3, #24
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001404:	40d9      	lsrs	r1, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	400b      	ands	r3, r1
 800140a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800140e:	431a      	orrs	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	0007ffff 	.word	0x0007ffff

08001428 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001438:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6093      	str	r3, [r2, #8]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800145c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001460:	d101      	bne.n	8001466 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001484:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001488:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014b0:	d101      	bne.n	80014b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <LL_ADC_IsEnabled+0x18>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <LL_ADC_IsEnabled+0x1a>
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d101      	bne.n	8001502 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b08      	cmp	r3, #8
 8001522:	d101      	bne.n	8001528 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e12f      	b.n	80017b2 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155c:	2b00      	cmp	r3, #0
 800155e:	d109      	bne.n	8001574 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff f845 	bl	80005f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff67 	bl	800144c <LL_ADC_IsDeepPowerDownEnabled>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d004      	beq.n	800158e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff4d 	bl	8001428 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ff82 	bl	800149c <LL_ADC_IsInternalRegulatorEnabled>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d115      	bne.n	80015ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff66 	bl	8001474 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015a8:	4b84      	ldr	r3, [pc, #528]	; (80017bc <HAL_ADC_Init+0x284>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	099b      	lsrs	r3, r3, #6
 80015ae:	4a84      	ldr	r2, [pc, #528]	; (80017c0 <HAL_ADC_Init+0x288>)
 80015b0:	fba2 2303 	umull	r2, r3, r2, r3
 80015b4:	099b      	lsrs	r3, r3, #6
 80015b6:	3301      	adds	r3, #1
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015bc:	e002      	b.n	80015c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f9      	bne.n	80015be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff64 	bl	800149c <LL_ADC_IsInternalRegulatorEnabled>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10d      	bne.n	80015f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	f043 0210 	orr.w	r2, r3, #16
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ea:	f043 0201 	orr.w	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff75 	bl	80014ea <LL_ADC_REG_IsConversionOngoing>
 8001600:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	2b00      	cmp	r3, #0
 800160c:	f040 80c8 	bne.w	80017a0 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 80c4 	bne.w	80017a0 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001620:	f043 0202 	orr.w	r2, r3, #2
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff49 	bl	80014c4 <LL_ADC_IsEnabled>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10b      	bne.n	8001650 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001638:	4862      	ldr	r0, [pc, #392]	; (80017c4 <HAL_ADC_Init+0x28c>)
 800163a:	f7ff ff43 	bl	80014c4 <LL_ADC_IsEnabled>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d105      	bne.n	8001650 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4619      	mov	r1, r3
 800164a:	485f      	ldr	r0, [pc, #380]	; (80017c8 <HAL_ADC_Init+0x290>)
 800164c:	f7ff fdd4 	bl	80011f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7e5b      	ldrb	r3, [r3, #25]
 8001654:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800165a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001660:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001666:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3020 	ldrb.w	r3, [r3, #32]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d106      	bne.n	800168c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	3b01      	subs	r3, #1
 8001684:	045b      	lsls	r3, r3, #17
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001690:	2b00      	cmp	r3, #0
 8001692:	d009      	beq.n	80016a8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	4b47      	ldr	r3, [pc, #284]	; (80017cc <HAL_ADC_Init+0x294>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	69b9      	ldr	r1, [r7, #24]
 80016b8:	430b      	orrs	r3, r1
 80016ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff12 	bl	80014ea <LL_ADC_REG_IsConversionOngoing>
 80016c6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff1f 	bl	8001510 <LL_ADC_INJ_IsConversionOngoing>
 80016d2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d140      	bne.n	800175c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d13d      	bne.n	800175c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7e1b      	ldrb	r3, [r3, #24]
 80016e8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016ea:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016f2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001702:	f023 0306 	bic.w	r3, r3, #6
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	69b9      	ldr	r1, [r7, #24]
 800170c:	430b      	orrs	r3, r1
 800170e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001716:	2b01      	cmp	r3, #1
 8001718:	d118      	bne.n	800174c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001724:	f023 0304 	bic.w	r3, r3, #4
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001730:	4311      	orrs	r1, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001736:	4311      	orrs	r1, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800173c:	430a      	orrs	r2, r1
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 0201 	orr.w	r2, r2, #1
 8001748:	611a      	str	r2, [r3, #16]
 800174a:	e007      	b.n	800175c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0201 	bic.w	r2, r2, #1
 800175a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d10c      	bne.n	800177e <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f023 010f 	bic.w	r1, r3, #15
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	1e5a      	subs	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	631a      	str	r2, [r3, #48]	; 0x30
 800177c:	e007      	b.n	800178e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 020f 	bic.w	r2, r2, #15
 800178c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	f023 0303 	bic.w	r3, r3, #3
 8001796:	f043 0201 	orr.w	r2, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	659a      	str	r2, [r3, #88]	; 0x58
 800179e:	e007      	b.n	80017b0 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a4:	f043 0210 	orr.w	r2, r3, #16
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3720      	adds	r7, #32
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000000 	.word	0x20000000
 80017c0:	053e2d63 	.word	0x053e2d63
 80017c4:	50040000 	.word	0x50040000
 80017c8:	50040300 	.word	0x50040300
 80017cc:	fff0c007 	.word	0xfff0c007

080017d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b0b6      	sub	sp, #216	; 0xd8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x22>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e3d5      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x7ce>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fe73 	bl	80014ea <LL_ADC_REG_IsConversionOngoing>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	f040 83ba 	bne.w	8001f80 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b05      	cmp	r3, #5
 8001812:	d824      	bhi.n	800185e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	3b02      	subs	r3, #2
 800181a:	2b03      	cmp	r3, #3
 800181c:	d81b      	bhi.n	8001856 <HAL_ADC_ConfigChannel+0x86>
 800181e:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <HAL_ADC_ConfigChannel+0x54>)
 8001820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001824:	08001835 	.word	0x08001835
 8001828:	0800183d 	.word	0x0800183d
 800182c:	08001845 	.word	0x08001845
 8001830:	0800184d 	.word	0x0800184d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	220c      	movs	r2, #12
 8001838:	605a      	str	r2, [r3, #4]
          break;
 800183a:	e011      	b.n	8001860 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	2212      	movs	r2, #18
 8001840:	605a      	str	r2, [r3, #4]
          break;
 8001842:	e00d      	b.n	8001860 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	2218      	movs	r2, #24
 8001848:	605a      	str	r2, [r3, #4]
          break;
 800184a:	e009      	b.n	8001860 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001852:	605a      	str	r2, [r3, #4]
          break;
 8001854:	e004      	b.n	8001860 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2206      	movs	r2, #6
 800185a:	605a      	str	r2, [r3, #4]
          break;
 800185c:	e000      	b.n	8001860 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800185e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	f7ff fd5f 	bl	8001330 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fe37 	bl	80014ea <LL_ADC_REG_IsConversionOngoing>
 800187c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fe43 	bl	8001510 <LL_ADC_INJ_IsConversionOngoing>
 800188a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800188e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001892:	2b00      	cmp	r3, #0
 8001894:	f040 81c1 	bne.w	8001c1a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001898:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800189c:	2b00      	cmp	r3, #0
 800189e:	f040 81bc 	bne.w	8001c1a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018aa:	d10f      	bne.n	80018cc <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff fd66 	bl	8001388 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fd20 	bl	800130a <LL_ADC_SetSamplingTimeCommonConfig>
 80018ca:	e00e      	b.n	80018ea <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	6819      	ldr	r1, [r3, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	461a      	mov	r2, r3
 80018da:	f7ff fd55 	bl	8001388 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fd10 	bl	800130a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	695a      	ldr	r2, [r3, #20]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	08db      	lsrs	r3, r3, #3
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	2b04      	cmp	r3, #4
 800190a:	d00a      	beq.n	8001922 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	6919      	ldr	r1, [r3, #16]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800191c:	f7ff fca0 	bl	8001260 <LL_ADC_SetOffset>
 8001920:	e17b      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fcbd 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10a      	bne.n	800194e <HAL_ADC_ConfigChannel+0x17e>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fcb2 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	0e9b      	lsrs	r3, r3, #26
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	e01e      	b.n	800198c <HAL_ADC_ConfigChannel+0x1bc>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fca7 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 800195a:	4603      	mov	r3, r0
 800195c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800196c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001970:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001974:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800197c:	2320      	movs	r3, #32
 800197e:	e004      	b.n	800198a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001980:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001984:	fab3 f383 	clz	r3, r3
 8001988:	b2db      	uxtb	r3, r3
 800198a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001994:	2b00      	cmp	r3, #0
 8001996:	d105      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x1d4>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0e9b      	lsrs	r3, r3, #26
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	e018      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x206>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019b0:	fa93 f3a3 	rbit	r3, r3
 80019b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80019b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80019c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80019c8:	2320      	movs	r3, #32
 80019ca:	e004      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80019cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d106      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fc76 	bl	80012d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2101      	movs	r1, #1
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fc5a 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10a      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x244>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2101      	movs	r1, #1
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fc4f 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	0e9b      	lsrs	r3, r3, #26
 8001a0e:	f003 021f 	and.w	r2, r3, #31
 8001a12:	e01e      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x282>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fc44 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a2a:	fa93 f3a3 	rbit	r3, r3
 8001a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001a42:	2320      	movs	r3, #32
 8001a44:	e004      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001a46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d105      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x29a>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	0e9b      	lsrs	r3, r3, #26
 8001a64:	f003 031f 	and.w	r3, r3, #31
 8001a68:	e018      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x2cc>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a76:	fa93 f3a3 	rbit	r3, r3
 8001a7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001a8e:	2320      	movs	r3, #32
 8001a90:	e004      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001a92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d106      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fc13 	bl	80012d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fbf7 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 8001aba:	4603      	mov	r3, r0
 8001abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10a      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x30a>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2102      	movs	r1, #2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fbec 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	0e9b      	lsrs	r3, r3, #26
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	e01e      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x348>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2102      	movs	r1, #2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fbe1 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001afc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001b08:	2320      	movs	r3, #32
 8001b0a:	e004      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001b0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d105      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x360>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0e9b      	lsrs	r3, r3, #26
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	e016      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x38e>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001b50:	2320      	movs	r3, #32
 8001b52:	e004      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b58:	fab3 f383 	clz	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d106      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2200      	movs	r2, #0
 8001b68:	2102      	movs	r1, #2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fbb2 	bl	80012d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2103      	movs	r1, #3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fb96 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10a      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x3cc>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2103      	movs	r1, #3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fb8b 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	0e9b      	lsrs	r3, r3, #26
 8001b96:	f003 021f 	and.w	r2, r3, #31
 8001b9a:	e017      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x3fc>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2103      	movs	r1, #3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fb80 	bl	80012a8 <LL_ADC_GetOffsetChannel>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bb6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001bbe:	2320      	movs	r3, #32
 8001bc0:	e003      	b.n	8001bca <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001bc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bc4:	fab3 f383 	clz	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d105      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x414>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	0e9b      	lsrs	r3, r3, #26
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	e011      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x438>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001bf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001bfc:	2320      	movs	r3, #32
 8001bfe:	e003      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d106      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2200      	movs	r2, #0
 8001c12:	2103      	movs	r1, #3
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fb5d 	bl	80012d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fc50 	bl	80014c4 <LL_ADC_IsEnabled>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f040 8140 	bne.w	8001eac <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6819      	ldr	r1, [r3, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	f7ff fbd1 	bl	80013e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	4a8f      	ldr	r2, [pc, #572]	; (8001e80 <HAL_ADC_ConfigChannel+0x6b0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	f040 8131 	bne.w	8001eac <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10b      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x4a2>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	0e9b      	lsrs	r3, r3, #26
 8001c60:	3301      	adds	r3, #1
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	2b09      	cmp	r3, #9
 8001c68:	bf94      	ite	ls
 8001c6a:	2301      	movls	r3, #1
 8001c6c:	2300      	movhi	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	e019      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x4d6>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c82:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	e003      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001c8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	3301      	adds	r3, #1
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	2b09      	cmp	r3, #9
 8001c9e:	bf94      	ite	ls
 8001ca0:	2301      	movls	r3, #1
 8001ca2:	2300      	movhi	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d079      	beq.n	8001d9e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d107      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x4f6>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	0e9b      	lsrs	r3, r3, #26
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	069b      	lsls	r3, r3, #26
 8001cc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cc4:	e015      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x522>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cd6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001cde:	2320      	movs	r3, #32
 8001ce0:	e003      	b.n	8001cea <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce4:	fab3 f383 	clz	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	3301      	adds	r3, #1
 8001cec:	069b      	lsls	r3, r3, #26
 8001cee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d109      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x542>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	0e9b      	lsrs	r3, r3, #26
 8001d04:	3301      	adds	r3, #1
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	e017      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x572>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d22:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	e003      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	ea42 0103 	orr.w	r1, r2, r3
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10a      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x598>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	0e9b      	lsrs	r3, r3, #26
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f003 021f 	and.w	r2, r3, #31
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	051b      	lsls	r3, r3, #20
 8001d66:	e018      	b.n	8001d9a <HAL_ADC_ConfigChannel+0x5ca>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d78:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001d80:	2320      	movs	r3, #32
 8001d82:	e003      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	f003 021f 	and.w	r2, r3, #31
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	e081      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d107      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x5ea>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	0e9b      	lsrs	r3, r3, #26
 8001db0:	3301      	adds	r3, #1
 8001db2:	069b      	lsls	r3, r3, #26
 8001db4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001db8:	e015      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x616>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc2:	fa93 f3a3 	rbit	r3, r3
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dca:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001dd2:	2320      	movs	r3, #32
 8001dd4:	e003      	b.n	8001dde <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	3301      	adds	r3, #1
 8001de0:	069b      	lsls	r3, r3, #26
 8001de2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x636>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	0e9b      	lsrs	r3, r3, #26
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f003 031f 	and.w	r3, r3, #31
 8001dfe:	2101      	movs	r1, #1
 8001e00:	fa01 f303 	lsl.w	r3, r1, r3
 8001e04:	e017      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x666>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	fa93 f3a3 	rbit	r3, r3
 8001e12:	61fb      	str	r3, [r7, #28]
  return result;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001e1e:	2320      	movs	r3, #32
 8001e20:	e003      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	2101      	movs	r1, #1
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	ea42 0103 	orr.w	r1, r2, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10d      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x692>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	0e9b      	lsrs	r3, r3, #26
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	f003 021f 	and.w	r2, r3, #31
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	3b1e      	subs	r3, #30
 8001e5a:	051b      	lsls	r3, r3, #20
 8001e5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e60:	e01e      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x6d0>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	613b      	str	r3, [r7, #16]
  return result;
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d104      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001e7a:	2320      	movs	r3, #32
 8001e7c:	e006      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x6bc>
 8001e7e:	bf00      	nop
 8001e80:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	f003 021f 	and.w	r2, r3, #31
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	3b1e      	subs	r3, #30
 8001e9a:	051b      	lsls	r3, r3, #20
 8001e9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	6892      	ldr	r2, [r2, #8]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f7ff fa6e 	bl	8001388 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d06c      	beq.n	8001f92 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001eb8:	483c      	ldr	r0, [pc, #240]	; (8001fac <HAL_ADC_ConfigChannel+0x7dc>)
 8001eba:	f7ff f9c3 	bl	8001244 <LL_ADC_GetCommonPathInternalCh>
 8001ebe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a3a      	ldr	r2, [pc, #232]	; (8001fb0 <HAL_ADC_ConfigChannel+0x7e0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d127      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ecc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ed0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d121      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a35      	ldr	r2, [pc, #212]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d157      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ee2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ee6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001eea:	4619      	mov	r1, r3
 8001eec:	482f      	ldr	r0, [pc, #188]	; (8001fac <HAL_ADC_ConfigChannel+0x7dc>)
 8001eee:	f7ff f996 	bl	800121e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ef2:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <HAL_ADC_ConfigChannel+0x7e8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	099b      	lsrs	r3, r3, #6
 8001ef8:	4a30      	ldr	r2, [pc, #192]	; (8001fbc <HAL_ADC_ConfigChannel+0x7ec>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	099b      	lsrs	r3, r3, #6
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f0c:	e002      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f9      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f1a:	e03a      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a27      	ldr	r2, [pc, #156]	; (8001fc0 <HAL_ADC_ConfigChannel+0x7f0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d113      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x77e>
 8001f26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10d      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d12a      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f44:	4619      	mov	r1, r3
 8001f46:	4819      	ldr	r0, [pc, #100]	; (8001fac <HAL_ADC_ConfigChannel+0x7dc>)
 8001f48:	f7ff f969 	bl	800121e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f4c:	e021      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <HAL_ADC_ConfigChannel+0x7f4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d11c      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d116      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d111      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f76:	4619      	mov	r1, r3
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <HAL_ADC_ConfigChannel+0x7dc>)
 8001f7a:	f7ff f950 	bl	800121e <LL_ADC_SetCommonPathInternalCh>
 8001f7e:	e008      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f043 0220 	orr.w	r2, r3, #32
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001f9a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	37d8      	adds	r7, #216	; 0xd8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	80080000 	.word	0x80080000
 8001fac:	50040300 	.word	0x50040300
 8001fb0:	c7520000 	.word	0xc7520000
 8001fb4:	50040000 	.word	0x50040000
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	053e2d63 	.word	0x053e2d63
 8001fc0:	cb840000 	.word	0xcb840000
 8001fc4:	80000001 	.word	0x80000001

08001fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffa:	4a04      	ldr	r2, [pc, #16]	; (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	60d3      	str	r3, [r2, #12]
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <__NVIC_GetPriorityGrouping+0x18>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	f003 0307 	and.w	r3, r3, #7
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	2b00      	cmp	r3, #0
 800203c:	db0b      	blt.n	8002056 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	f003 021f 	and.w	r2, r3, #31
 8002044:	4907      	ldr	r1, [pc, #28]	; (8002064 <__NVIC_EnableIRQ+0x38>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	2001      	movs	r0, #1
 800204e:	fa00 f202 	lsl.w	r2, r0, r2
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000e100 	.word	0xe000e100

08002068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	6039      	str	r1, [r7, #0]
 8002072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	2b00      	cmp	r3, #0
 800207a:	db0a      	blt.n	8002092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2da      	uxtb	r2, r3
 8002080:	490c      	ldr	r1, [pc, #48]	; (80020b4 <__NVIC_SetPriority+0x4c>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	0112      	lsls	r2, r2, #4
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	440b      	add	r3, r1
 800208c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002090:	e00a      	b.n	80020a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4908      	ldr	r1, [pc, #32]	; (80020b8 <__NVIC_SetPriority+0x50>)
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	3b04      	subs	r3, #4
 80020a0:	0112      	lsls	r2, r2, #4
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	440b      	add	r3, r1
 80020a6:	761a      	strb	r2, [r3, #24]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000e100 	.word	0xe000e100
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	; 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f1c3 0307 	rsb	r3, r3, #7
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	bf28      	it	cs
 80020da:	2304      	movcs	r3, #4
 80020dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3304      	adds	r3, #4
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d902      	bls.n	80020ec <NVIC_EncodePriority+0x30>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3b03      	subs	r3, #3
 80020ea:	e000      	b.n	80020ee <NVIC_EncodePriority+0x32>
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	401a      	ands	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	43d9      	mvns	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	4313      	orrs	r3, r2
         );
}
 8002116:	4618      	mov	r0, r3
 8002118:	3724      	adds	r7, #36	; 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ff4c 	bl	8001fc8 <__NVIC_SetPriorityGrouping>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
 8002144:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800214a:	f7ff ff61 	bl	8002010 <__NVIC_GetPriorityGrouping>
 800214e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	68b9      	ldr	r1, [r7, #8]
 8002154:	6978      	ldr	r0, [r7, #20]
 8002156:	f7ff ffb1 	bl	80020bc <NVIC_EncodePriority>
 800215a:	4602      	mov	r2, r0
 800215c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002160:	4611      	mov	r1, r2
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ff80 	bl	8002068 <__NVIC_SetPriority>
}
 8002168:	bf00      	nop
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ff54 	bl	800202c <__NVIC_EnableIRQ>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d008      	beq.n	80021b6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2204      	movs	r2, #4
 80021a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e022      	b.n	80021fc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 020e 	bic.w	r2, r2, #14
 80021c4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0201 	bic.w	r2, r2, #1
 80021d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f003 021c 	and.w	r2, r3, #28
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	2101      	movs	r1, #1
 80021e4:	fa01 f202 	lsl.w	r2, r1, r2
 80021e8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d005      	beq.n	800222c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2204      	movs	r2, #4
 8002224:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	e029      	b.n	8002280 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 020e 	bic.w	r2, r2, #14
 800223a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002250:	f003 021c 	and.w	r2, r3, #28
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	2101      	movs	r1, #1
 800225a:	fa01 f202 	lsl.w	r2, r1, r2
 800225e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
    }
  }
  return status;
 8002280:	7bfb      	ldrb	r3, [r7, #15]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800229a:	e154      	b.n	8002546 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	2101      	movs	r1, #1
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 8146 	beq.w	8002540 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d00b      	beq.n	80022d4 <HAL_GPIO_Init+0x48>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d007      	beq.n	80022d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022c8:	2b11      	cmp	r3, #17
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b12      	cmp	r3, #18
 80022d2:	d130      	bne.n	8002336 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800230a:	2201      	movs	r2, #1
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	f003 0201 	and.w	r2, r3, #1
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0xea>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b12      	cmp	r3, #18
 8002374:	d123      	bne.n	80023be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3208      	adds	r2, #8
 800237e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	08da      	lsrs	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3208      	adds	r2, #8
 80023b8:	6939      	ldr	r1, [r7, #16]
 80023ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0203 	and.w	r2, r3, #3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 80a0 	beq.w	8002540 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002400:	4b58      	ldr	r3, [pc, #352]	; (8002564 <HAL_GPIO_Init+0x2d8>)
 8002402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002404:	4a57      	ldr	r2, [pc, #348]	; (8002564 <HAL_GPIO_Init+0x2d8>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6613      	str	r3, [r2, #96]	; 0x60
 800240c:	4b55      	ldr	r3, [pc, #340]	; (8002564 <HAL_GPIO_Init+0x2d8>)
 800240e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002418:	4a53      	ldr	r2, [pc, #332]	; (8002568 <HAL_GPIO_Init+0x2dc>)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	220f      	movs	r2, #15
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002442:	d019      	beq.n	8002478 <HAL_GPIO_Init+0x1ec>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a49      	ldr	r2, [pc, #292]	; (800256c <HAL_GPIO_Init+0x2e0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d013      	beq.n	8002474 <HAL_GPIO_Init+0x1e8>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a48      	ldr	r2, [pc, #288]	; (8002570 <HAL_GPIO_Init+0x2e4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d00d      	beq.n	8002470 <HAL_GPIO_Init+0x1e4>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a47      	ldr	r2, [pc, #284]	; (8002574 <HAL_GPIO_Init+0x2e8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d007      	beq.n	800246c <HAL_GPIO_Init+0x1e0>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a46      	ldr	r2, [pc, #280]	; (8002578 <HAL_GPIO_Init+0x2ec>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d101      	bne.n	8002468 <HAL_GPIO_Init+0x1dc>
 8002464:	2304      	movs	r3, #4
 8002466:	e008      	b.n	800247a <HAL_GPIO_Init+0x1ee>
 8002468:	2307      	movs	r3, #7
 800246a:	e006      	b.n	800247a <HAL_GPIO_Init+0x1ee>
 800246c:	2303      	movs	r3, #3
 800246e:	e004      	b.n	800247a <HAL_GPIO_Init+0x1ee>
 8002470:	2302      	movs	r3, #2
 8002472:	e002      	b.n	800247a <HAL_GPIO_Init+0x1ee>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <HAL_GPIO_Init+0x1ee>
 8002478:	2300      	movs	r3, #0
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	f002 0203 	and.w	r2, r2, #3
 8002480:	0092      	lsls	r2, r2, #2
 8002482:	4093      	lsls	r3, r2
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800248a:	4937      	ldr	r1, [pc, #220]	; (8002568 <HAL_GPIO_Init+0x2dc>)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002498:	4b38      	ldr	r3, [pc, #224]	; (800257c <HAL_GPIO_Init+0x2f0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024bc:	4a2f      	ldr	r2, [pc, #188]	; (800257c <HAL_GPIO_Init+0x2f0>)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80024c2:	4b2e      	ldr	r3, [pc, #184]	; (800257c <HAL_GPIO_Init+0x2f0>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024e6:	4a25      	ldr	r2, [pc, #148]	; (800257c <HAL_GPIO_Init+0x2f0>)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024ec:	4b23      	ldr	r3, [pc, #140]	; (800257c <HAL_GPIO_Init+0x2f0>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002510:	4a1a      	ldr	r2, [pc, #104]	; (800257c <HAL_GPIO_Init+0x2f0>)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002516:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_GPIO_Init+0x2f0>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	43db      	mvns	r3, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800253a:	4a10      	ldr	r2, [pc, #64]	; (800257c <HAL_GPIO_Init+0x2f0>)
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	3301      	adds	r3, #1
 8002544:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	fa22 f303 	lsr.w	r3, r2, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	f47f aea3 	bne.w	800229c <HAL_GPIO_Init+0x10>
  }
}
 8002556:	bf00      	nop
 8002558:	bf00      	nop
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	40021000 	.word	0x40021000
 8002568:	40010000 	.word	0x40010000
 800256c:	48000400 	.word	0x48000400
 8002570:	48000800 	.word	0x48000800
 8002574:	48000c00 	.word	0x48000c00
 8002578:	48001000 	.word	0x48001000
 800257c:	40010400 	.word	0x40010400

08002580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	807b      	strh	r3, [r7, #2]
 800258c:	4613      	mov	r3, r2
 800258e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002590:	787b      	ldrb	r3, [r7, #1]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800259c:	e002      	b.n	80025a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800259e:	887a      	ldrh	r2, [r7, #2]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4013      	ands	r3, r2
 80025c8:	041a      	lsls	r2, r3, #16
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	43d9      	mvns	r1, r3
 80025ce:	887b      	ldrh	r3, [r7, #2]
 80025d0:	400b      	ands	r3, r1
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	619a      	str	r2, [r3, #24]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e038      	b.n	8002668 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80025fe:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f245 5255 	movw	r2, #21845	; 0x5555
 8002608:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6852      	ldr	r2, [r2, #4]
 8002612:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6892      	ldr	r2, [r2, #8]
 800261c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800261e:	f7fe fddf 	bl	80011e0 <HAL_GetTick>
 8002622:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8002624:	e008      	b.n	8002638 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002626:	f7fe fddb 	bl	80011e0 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b30      	cmp	r3, #48	; 0x30
 8002632:	d901      	bls.n	8002638 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e017      	b.n	8002668 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f1      	bne.n	8002626 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	429a      	cmp	r2, r3
 800264e:	d005      	beq.n	800265c <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	68d2      	ldr	r2, [r2, #12]
 8002658:	611a      	str	r2, [r3, #16]
 800265a:	e004      	b.n	8002666 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002664:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002680:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a04      	ldr	r2, [pc, #16]	; (80026ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800269a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269e:	6013      	str	r3, [r2, #0]
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40007000 	.word	0x40007000

080026b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40007000 	.word	0x40007000

080026cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026da:	d130      	bne.n	800273e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026dc:	4b23      	ldr	r3, [pc, #140]	; (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026e8:	d038      	beq.n	800275c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026f2:	4a1e      	ldr	r2, [pc, #120]	; (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026fa:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2232      	movs	r2, #50	; 0x32
 8002700:	fb02 f303 	mul.w	r3, r2, r3
 8002704:	4a1b      	ldr	r2, [pc, #108]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0c9b      	lsrs	r3, r3, #18
 800270c:	3301      	adds	r3, #1
 800270e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002710:	e002      	b.n	8002718 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3b01      	subs	r3, #1
 8002716:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002718:	4b14      	ldr	r3, [pc, #80]	; (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002724:	d102      	bne.n	800272c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f2      	bne.n	8002712 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800272c:	4b0f      	ldr	r3, [pc, #60]	; (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002738:	d110      	bne.n	800275c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e00f      	b.n	800275e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274a:	d007      	beq.n	800275c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800274c:	4b07      	ldr	r3, [pc, #28]	; (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002754:	4a05      	ldr	r2, [pc, #20]	; (800276c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800275a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40007000 	.word	0x40007000
 8002770:	20000000 	.word	0x20000000
 8002774:	431bde83 	.word	0x431bde83

08002778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d102      	bne.n	800278c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	f000 bc11 	b.w	8002fae <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800278c:	4ba0      	ldr	r3, [pc, #640]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 030c 	and.w	r3, r3, #12
 8002794:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002796:	4b9e      	ldr	r3, [pc, #632]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80e4 	beq.w	8002976 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <HAL_RCC_OscConfig+0x4c>
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2b0c      	cmp	r3, #12
 80027b8:	f040 808b 	bne.w	80028d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	f040 8087 	bne.w	80028d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027c4:	4b92      	ldr	r3, [pc, #584]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_OscConfig+0x64>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e3e8      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1a      	ldr	r2, [r3, #32]
 80027e0:	4b8b      	ldr	r3, [pc, #556]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d004      	beq.n	80027f6 <HAL_RCC_OscConfig+0x7e>
 80027ec:	4b88      	ldr	r3, [pc, #544]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027f4:	e005      	b.n	8002802 <HAL_RCC_OscConfig+0x8a>
 80027f6:	4b86      	ldr	r3, [pc, #536]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 80027f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002802:	4293      	cmp	r3, r2
 8002804:	d223      	bcs.n	800284e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fdac 	bl	8003368 <RCC_SetFlashLatencyFromMSIRange>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e3c9      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800281a:	4b7d      	ldr	r3, [pc, #500]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a7c      	ldr	r2, [pc, #496]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 8002820:	f043 0308 	orr.w	r3, r3, #8
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4b7a      	ldr	r3, [pc, #488]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	4977      	ldr	r1, [pc, #476]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 8002834:	4313      	orrs	r3, r2
 8002836:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002838:	4b75      	ldr	r3, [pc, #468]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	4972      	ldr	r1, [pc, #456]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]
 800284c:	e025      	b.n	800289a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800284e:	4b70      	ldr	r3, [pc, #448]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a6f      	ldr	r2, [pc, #444]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 8002854:	f043 0308 	orr.w	r3, r3, #8
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	4b6d      	ldr	r3, [pc, #436]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	496a      	ldr	r1, [pc, #424]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 8002868:	4313      	orrs	r3, r2
 800286a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800286c:	4b68      	ldr	r3, [pc, #416]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	4965      	ldr	r1, [pc, #404]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fd6c 	bl	8003368 <RCC_SetFlashLatencyFromMSIRange>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e389      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800289a:	f000 fc6f 	bl	800317c <HAL_RCC_GetSysClockFreq>
 800289e:	4602      	mov	r2, r0
 80028a0:	4b5b      	ldr	r3, [pc, #364]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	495a      	ldr	r1, [pc, #360]	; (8002a14 <HAL_RCC_OscConfig+0x29c>)
 80028ac:	5ccb      	ldrb	r3, [r1, r3]
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	fa22 f303 	lsr.w	r3, r2, r3
 80028b6:	4a58      	ldr	r2, [pc, #352]	; (8002a18 <HAL_RCC_OscConfig+0x2a0>)
 80028b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028ba:	4b58      	ldr	r3, [pc, #352]	; (8002a1c <HAL_RCC_OscConfig+0x2a4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe f9ca 	bl	8000c58 <HAL_InitTick>
 80028c4:	4603      	mov	r3, r0
 80028c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d052      	beq.n	8002974 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	e36d      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d032      	beq.n	8002940 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028da:	4b4d      	ldr	r3, [pc, #308]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a4c      	ldr	r2, [pc, #304]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028e6:	f7fe fc7b 	bl	80011e0 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028ee:	f7fe fc77 	bl	80011e0 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e356      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002900:	4b43      	ldr	r3, [pc, #268]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800290c:	4b40      	ldr	r3, [pc, #256]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a3f      	ldr	r2, [pc, #252]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 8002912:	f043 0308 	orr.w	r3, r3, #8
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b3d      	ldr	r3, [pc, #244]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	493a      	ldr	r1, [pc, #232]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 8002926:	4313      	orrs	r3, r2
 8002928:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800292a:	4b39      	ldr	r3, [pc, #228]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	4935      	ldr	r1, [pc, #212]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 800293a:	4313      	orrs	r3, r2
 800293c:	604b      	str	r3, [r1, #4]
 800293e:	e01a      	b.n	8002976 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002940:	4b33      	ldr	r3, [pc, #204]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a32      	ldr	r2, [pc, #200]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 8002946:	f023 0301 	bic.w	r3, r3, #1
 800294a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800294c:	f7fe fc48 	bl	80011e0 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002954:	f7fe fc44 	bl	80011e0 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e323      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002966:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x1dc>
 8002972:	e000      	b.n	8002976 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002974:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d073      	beq.n	8002a6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	2b08      	cmp	r3, #8
 8002986:	d005      	beq.n	8002994 <HAL_RCC_OscConfig+0x21c>
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2b0c      	cmp	r3, #12
 800298c:	d10e      	bne.n	80029ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b03      	cmp	r3, #3
 8002992:	d10b      	bne.n	80029ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d063      	beq.n	8002a68 <HAL_RCC_OscConfig+0x2f0>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d15f      	bne.n	8002a68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e300      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b4:	d106      	bne.n	80029c4 <HAL_RCC_OscConfig+0x24c>
 80029b6:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a15      	ldr	r2, [pc, #84]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 80029bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e01d      	b.n	8002a00 <HAL_RCC_OscConfig+0x288>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x270>
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a0f      	ldr	r2, [pc, #60]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 80029d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a0c      	ldr	r2, [pc, #48]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_OscConfig+0x288>
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a08      	ldr	r2, [pc, #32]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 80029ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <HAL_RCC_OscConfig+0x298>)
 80029fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01b      	beq.n	8002a40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe fbea 	bl	80011e0 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a0e:	e010      	b.n	8002a32 <HAL_RCC_OscConfig+0x2ba>
 8002a10:	40021000 	.word	0x40021000
 8002a14:	08006698 	.word	0x08006698
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a20:	f7fe fbde 	bl	80011e0 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	; 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e2bd      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a32:	4baf      	ldr	r3, [pc, #700]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x2a8>
 8002a3e:	e014      	b.n	8002a6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7fe fbce 	bl	80011e0 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a48:	f7fe fbca 	bl	80011e0 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	; 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e2a9      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a5a:	4ba5      	ldr	r3, [pc, #660]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x2d0>
 8002a66:	e000      	b.n	8002a6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d060      	beq.n	8002b38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_OscConfig+0x310>
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	d119      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d116      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a88:	4b99      	ldr	r3, [pc, #612]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x328>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e286      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa0:	4b93      	ldr	r3, [pc, #588]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	4990      	ldr	r1, [pc, #576]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab4:	e040      	b.n	8002b38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d023      	beq.n	8002b06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002abe:	4b8c      	ldr	r3, [pc, #560]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a8b      	ldr	r2, [pc, #556]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aca:	f7fe fb89 	bl	80011e0 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad2:	f7fe fb85 	bl	80011e0 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e264      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ae4:	4b82      	ldr	r3, [pc, #520]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af0:	4b7f      	ldr	r3, [pc, #508]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	061b      	lsls	r3, r3, #24
 8002afe:	497c      	ldr	r1, [pc, #496]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
 8002b04:	e018      	b.n	8002b38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b06:	4b7a      	ldr	r3, [pc, #488]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a79      	ldr	r2, [pc, #484]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b12:	f7fe fb65 	bl	80011e0 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b1a:	f7fe fb61 	bl	80011e0 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e240      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b2c:	4b70      	ldr	r3, [pc, #448]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d03c      	beq.n	8002bbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d01c      	beq.n	8002b86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b4c:	4b68      	ldr	r3, [pc, #416]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b52:	4a67      	ldr	r2, [pc, #412]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5c:	f7fe fb40 	bl	80011e0 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b64:	f7fe fb3c 	bl	80011e0 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e21b      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b76:	4b5e      	ldr	r3, [pc, #376]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0ef      	beq.n	8002b64 <HAL_RCC_OscConfig+0x3ec>
 8002b84:	e01b      	b.n	8002bbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b86:	4b5a      	ldr	r3, [pc, #360]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8c:	4a58      	ldr	r2, [pc, #352]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b96:	f7fe fb23 	bl	80011e0 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b9e:	f7fe fb1f 	bl	80011e0 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e1fe      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bb0:	4b4f      	ldr	r3, [pc, #316]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1ef      	bne.n	8002b9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 80a6 	beq.w	8002d18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bd0:	4b47      	ldr	r3, [pc, #284]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10d      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bdc:	4b44      	ldr	r3, [pc, #272]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	4a43      	ldr	r2, [pc, #268]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be6:	6593      	str	r3, [r2, #88]	; 0x58
 8002be8:	4b41      	ldr	r3, [pc, #260]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf8:	4b3e      	ldr	r3, [pc, #248]	; (8002cf4 <HAL_RCC_OscConfig+0x57c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d118      	bne.n	8002c36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c04:	4b3b      	ldr	r3, [pc, #236]	; (8002cf4 <HAL_RCC_OscConfig+0x57c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a3a      	ldr	r2, [pc, #232]	; (8002cf4 <HAL_RCC_OscConfig+0x57c>)
 8002c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c10:	f7fe fae6 	bl	80011e0 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c18:	f7fe fae2 	bl	80011e0 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e1c1      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c2a:	4b32      	ldr	r3, [pc, #200]	; (8002cf4 <HAL_RCC_OscConfig+0x57c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d108      	bne.n	8002c50 <HAL_RCC_OscConfig+0x4d8>
 8002c3e:	4b2c      	ldr	r3, [pc, #176]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	4a2a      	ldr	r2, [pc, #168]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c4e:	e024      	b.n	8002c9a <HAL_RCC_OscConfig+0x522>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b05      	cmp	r3, #5
 8002c56:	d110      	bne.n	8002c7a <HAL_RCC_OscConfig+0x502>
 8002c58:	4b25      	ldr	r3, [pc, #148]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5e:	4a24      	ldr	r2, [pc, #144]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002c60:	f043 0304 	orr.w	r3, r3, #4
 8002c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c68:	4b21      	ldr	r3, [pc, #132]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6e:	4a20      	ldr	r2, [pc, #128]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c78:	e00f      	b.n	8002c9a <HAL_RCC_OscConfig+0x522>
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c8a:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c90:	4a17      	ldr	r2, [pc, #92]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002c92:	f023 0304 	bic.w	r3, r3, #4
 8002c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d016      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca2:	f7fe fa9d 	bl	80011e0 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7fe fa99 	bl	80011e0 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e176      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_RCC_OscConfig+0x578>)
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0ed      	beq.n	8002caa <HAL_RCC_OscConfig+0x532>
 8002cce:	e01a      	b.n	8002d06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7fe fa86 	bl	80011e0 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cd6:	e00f      	b.n	8002cf8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f7fe fa82 	bl	80011e0 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d906      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e15f      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cf8:	4baa      	ldr	r3, [pc, #680]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1e8      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d06:	7ffb      	ldrb	r3, [r7, #31]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d105      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0c:	4ba5      	ldr	r3, [pc, #660]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d10:	4aa4      	ldr	r2, [pc, #656]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d03c      	beq.n	8002d9e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d01c      	beq.n	8002d66 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d2c:	4b9d      	ldr	r3, [pc, #628]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d32:	4a9c      	ldr	r2, [pc, #624]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3c:	f7fe fa50 	bl	80011e0 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d44:	f7fe fa4c 	bl	80011e0 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e12b      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d56:	4b93      	ldr	r3, [pc, #588]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0ef      	beq.n	8002d44 <HAL_RCC_OscConfig+0x5cc>
 8002d64:	e01b      	b.n	8002d9e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d66:	4b8f      	ldr	r3, [pc, #572]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002d68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d6c:	4a8d      	ldr	r2, [pc, #564]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002d6e:	f023 0301 	bic.w	r3, r3, #1
 8002d72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d76:	f7fe fa33 	bl	80011e0 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d7e:	f7fe fa2f 	bl	80011e0 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e10e      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d90:	4b84      	ldr	r3, [pc, #528]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1ef      	bne.n	8002d7e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8102 	beq.w	8002fac <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	f040 80c5 	bne.w	8002f3c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002db2:	4b7c      	ldr	r3, [pc, #496]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f003 0203 	and.w	r2, r3, #3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d12c      	bne.n	8002e20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d123      	bne.n	8002e20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d11b      	bne.n	8002e20 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d113      	bne.n	8002e20 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	085b      	lsrs	r3, r3, #1
 8002e04:	3b01      	subs	r3, #1
 8002e06:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d109      	bne.n	8002e20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	085b      	lsrs	r3, r3, #1
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d067      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	2b0c      	cmp	r3, #12
 8002e24:	d062      	beq.n	8002eec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e26:	4b5f      	ldr	r3, [pc, #380]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e0bb      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e36:	4b5b      	ldr	r3, [pc, #364]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a5a      	ldr	r2, [pc, #360]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002e3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e40:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e42:	f7fe f9cd 	bl	80011e0 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4a:	f7fe f9c9 	bl	80011e0 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0a8      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e5c:	4b51      	ldr	r3, [pc, #324]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1f0      	bne.n	8002e4a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e68:	4b4e      	ldr	r3, [pc, #312]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	4b4e      	ldr	r3, [pc, #312]	; (8002fa8 <HAL_RCC_OscConfig+0x830>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e78:	3a01      	subs	r2, #1
 8002e7a:	0112      	lsls	r2, r2, #4
 8002e7c:	4311      	orrs	r1, r2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e82:	0212      	lsls	r2, r2, #8
 8002e84:	4311      	orrs	r1, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e8a:	0852      	lsrs	r2, r2, #1
 8002e8c:	3a01      	subs	r2, #1
 8002e8e:	0552      	lsls	r2, r2, #21
 8002e90:	4311      	orrs	r1, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e96:	0852      	lsrs	r2, r2, #1
 8002e98:	3a01      	subs	r2, #1
 8002e9a:	0652      	lsls	r2, r2, #25
 8002e9c:	4311      	orrs	r1, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ea2:	06d2      	lsls	r2, r2, #27
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	493f      	ldr	r1, [pc, #252]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002eac:	4b3d      	ldr	r3, [pc, #244]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a3c      	ldr	r2, [pc, #240]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002eb8:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4a39      	ldr	r2, [pc, #228]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ec2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ec4:	f7fe f98c 	bl	80011e0 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7fe f988 	bl	80011e0 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e067      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ede:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eea:	e05f      	b.n	8002fac <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e05e      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef0:	4b2c      	ldr	r3, [pc, #176]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d157      	bne.n	8002fac <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002efc:	4b29      	ldr	r3, [pc, #164]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a28      	ldr	r2, [pc, #160]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f08:	4b26      	ldr	r3, [pc, #152]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4a25      	ldr	r2, [pc, #148]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f14:	f7fe f964 	bl	80011e0 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe f960 	bl	80011e0 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e03f      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2e:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x7a4>
 8002f3a:	e037      	b.n	8002fac <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	2b0c      	cmp	r3, #12
 8002f40:	d02d      	beq.n	8002f9e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f42:	4b18      	ldr	r3, [pc, #96]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002f48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f4c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d105      	bne.n	8002f66 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	4a11      	ldr	r2, [pc, #68]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002f60:	f023 0303 	bic.w	r3, r3, #3
 8002f64:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002f66:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002f6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f74:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f76:	f7fe f933 	bl	80011e0 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7e:	f7fe f92f 	bl	80011e0 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e00e      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f90:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <HAL_RCC_OscConfig+0x82c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f0      	bne.n	8002f7e <HAL_RCC_OscConfig+0x806>
 8002f9c:	e006      	b.n	8002fac <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e005      	b.n	8002fae <HAL_RCC_OscConfig+0x836>
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3720      	adds	r7, #32
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop

08002fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0c8      	b.n	800315e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fcc:	4b66      	ldr	r3, [pc, #408]	; (8003168 <HAL_RCC_ClockConfig+0x1b0>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d910      	bls.n	8002ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fda:	4b63      	ldr	r3, [pc, #396]	; (8003168 <HAL_RCC_ClockConfig+0x1b0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 0207 	bic.w	r2, r3, #7
 8002fe2:	4961      	ldr	r1, [pc, #388]	; (8003168 <HAL_RCC_ClockConfig+0x1b0>)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	4b5f      	ldr	r3, [pc, #380]	; (8003168 <HAL_RCC_ClockConfig+0x1b0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0b0      	b.n	800315e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d04c      	beq.n	80030a2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d107      	bne.n	8003020 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003010:	4b56      	ldr	r3, [pc, #344]	; (800316c <HAL_RCC_ClockConfig+0x1b4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d121      	bne.n	8003060 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e09e      	b.n	800315e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d107      	bne.n	8003038 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003028:	4b50      	ldr	r3, [pc, #320]	; (800316c <HAL_RCC_ClockConfig+0x1b4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d115      	bne.n	8003060 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e092      	b.n	800315e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d107      	bne.n	8003050 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003040:	4b4a      	ldr	r3, [pc, #296]	; (800316c <HAL_RCC_ClockConfig+0x1b4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e086      	b.n	800315e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003050:	4b46      	ldr	r3, [pc, #280]	; (800316c <HAL_RCC_ClockConfig+0x1b4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e07e      	b.n	800315e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003060:	4b42      	ldr	r3, [pc, #264]	; (800316c <HAL_RCC_ClockConfig+0x1b4>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f023 0203 	bic.w	r2, r3, #3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	493f      	ldr	r1, [pc, #252]	; (800316c <HAL_RCC_ClockConfig+0x1b4>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003072:	f7fe f8b5 	bl	80011e0 <HAL_GetTick>
 8003076:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003078:	e00a      	b.n	8003090 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800307a:	f7fe f8b1 	bl	80011e0 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f241 3288 	movw	r2, #5000	; 0x1388
 8003088:	4293      	cmp	r3, r2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e066      	b.n	800315e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003090:	4b36      	ldr	r3, [pc, #216]	; (800316c <HAL_RCC_ClockConfig+0x1b4>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 020c 	and.w	r2, r3, #12
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	429a      	cmp	r2, r3
 80030a0:	d1eb      	bne.n	800307a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ae:	4b2f      	ldr	r3, [pc, #188]	; (800316c <HAL_RCC_ClockConfig+0x1b4>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	492c      	ldr	r1, [pc, #176]	; (800316c <HAL_RCC_ClockConfig+0x1b4>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030c0:	4b29      	ldr	r3, [pc, #164]	; (8003168 <HAL_RCC_ClockConfig+0x1b0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d210      	bcs.n	80030f0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b26      	ldr	r3, [pc, #152]	; (8003168 <HAL_RCC_ClockConfig+0x1b0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 0207 	bic.w	r2, r3, #7
 80030d6:	4924      	ldr	r1, [pc, #144]	; (8003168 <HAL_RCC_ClockConfig+0x1b0>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b22      	ldr	r3, [pc, #136]	; (8003168 <HAL_RCC_ClockConfig+0x1b0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e036      	b.n	800315e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030fc:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_RCC_ClockConfig+0x1b4>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	4918      	ldr	r1, [pc, #96]	; (800316c <HAL_RCC_ClockConfig+0x1b4>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800311a:	4b14      	ldr	r3, [pc, #80]	; (800316c <HAL_RCC_ClockConfig+0x1b4>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4910      	ldr	r1, [pc, #64]	; (800316c <HAL_RCC_ClockConfig+0x1b4>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800312e:	f000 f825 	bl	800317c <HAL_RCC_GetSysClockFreq>
 8003132:	4602      	mov	r2, r0
 8003134:	4b0d      	ldr	r3, [pc, #52]	; (800316c <HAL_RCC_ClockConfig+0x1b4>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	490c      	ldr	r1, [pc, #48]	; (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	5ccb      	ldrb	r3, [r1, r3]
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	fa22 f303 	lsr.w	r3, r2, r3
 800314a:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_RCC_ClockConfig+0x1c0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd fd80 	bl	8000c58 <HAL_InitTick>
 8003158:	4603      	mov	r3, r0
 800315a:	72fb      	strb	r3, [r7, #11]

  return status;
 800315c:	7afb      	ldrb	r3, [r7, #11]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40022000 	.word	0x40022000
 800316c:	40021000 	.word	0x40021000
 8003170:	08006698 	.word	0x08006698
 8003174:	20000000 	.word	0x20000000
 8003178:	20000004 	.word	0x20000004

0800317c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800317c:	b480      	push	{r7}
 800317e:	b089      	sub	sp, #36	; 0x24
 8003180:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	2300      	movs	r3, #0
 8003188:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800318a:	4b3e      	ldr	r3, [pc, #248]	; (8003284 <HAL_RCC_GetSysClockFreq+0x108>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
 8003192:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003194:	4b3b      	ldr	r3, [pc, #236]	; (8003284 <HAL_RCC_GetSysClockFreq+0x108>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x34>
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	d121      	bne.n	80031ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d11e      	bne.n	80031ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031b0:	4b34      	ldr	r3, [pc, #208]	; (8003284 <HAL_RCC_GetSysClockFreq+0x108>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d107      	bne.n	80031cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031bc:	4b31      	ldr	r3, [pc, #196]	; (8003284 <HAL_RCC_GetSysClockFreq+0x108>)
 80031be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c2:	0a1b      	lsrs	r3, r3, #8
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	e005      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031cc:	4b2d      	ldr	r3, [pc, #180]	; (8003284 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031d8:	4a2b      	ldr	r2, [pc, #172]	; (8003288 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10d      	bne.n	8003204 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d102      	bne.n	80031fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <HAL_RCC_GetSysClockFreq+0x110>)
 80031f6:	61bb      	str	r3, [r7, #24]
 80031f8:	e004      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d101      	bne.n	8003204 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003200:	4b23      	ldr	r3, [pc, #140]	; (8003290 <HAL_RCC_GetSysClockFreq+0x114>)
 8003202:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	2b0c      	cmp	r3, #12
 8003208:	d134      	bne.n	8003274 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800320a:	4b1e      	ldr	r3, [pc, #120]	; (8003284 <HAL_RCC_GetSysClockFreq+0x108>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d003      	beq.n	8003222 <HAL_RCC_GetSysClockFreq+0xa6>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b03      	cmp	r3, #3
 800321e:	d003      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0xac>
 8003220:	e005      	b.n	800322e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003222:	4b1a      	ldr	r3, [pc, #104]	; (800328c <HAL_RCC_GetSysClockFreq+0x110>)
 8003224:	617b      	str	r3, [r7, #20]
      break;
 8003226:	e005      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003228:	4b19      	ldr	r3, [pc, #100]	; (8003290 <HAL_RCC_GetSysClockFreq+0x114>)
 800322a:	617b      	str	r3, [r7, #20]
      break;
 800322c:	e002      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	617b      	str	r3, [r7, #20]
      break;
 8003232:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003234:	4b13      	ldr	r3, [pc, #76]	; (8003284 <HAL_RCC_GetSysClockFreq+0x108>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	091b      	lsrs	r3, r3, #4
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	3301      	adds	r3, #1
 8003240:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003242:	4b10      	ldr	r3, [pc, #64]	; (8003284 <HAL_RCC_GetSysClockFreq+0x108>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	fb02 f203 	mul.w	r2, r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	fbb2 f3f3 	udiv	r3, r2, r3
 8003258:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800325a:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <HAL_RCC_GetSysClockFreq+0x108>)
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	0e5b      	lsrs	r3, r3, #25
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	3301      	adds	r3, #1
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003272:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003274:	69bb      	ldr	r3, [r7, #24]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3724      	adds	r7, #36	; 0x24
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40021000 	.word	0x40021000
 8003288:	080066b0 	.word	0x080066b0
 800328c:	00f42400 	.word	0x00f42400
 8003290:	007a1200 	.word	0x007a1200

08003294 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000000 	.word	0x20000000

080032ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032b0:	f7ff fff0 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4904      	ldr	r1, [pc, #16]	; (80032d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000
 80032d4:	080066a8 	.word	0x080066a8

080032d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032dc:	f7ff ffda 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	0adb      	lsrs	r3, r3, #11
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4904      	ldr	r1, [pc, #16]	; (8003300 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40021000 	.word	0x40021000
 8003300:	080066a8 	.word	0x080066a8

08003304 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	220f      	movs	r2, #15
 8003312:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003314:	4b12      	ldr	r3, [pc, #72]	; (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0203 	and.w	r2, r3, #3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003338:	4b09      	ldr	r3, [pc, #36]	; (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	08db      	lsrs	r3, r3, #3
 800333e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <HAL_RCC_GetClockConfig+0x60>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0207 	and.w	r2, r3, #7
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	601a      	str	r2, [r3, #0]
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	40022000 	.word	0x40022000

08003368 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003374:	4b2a      	ldr	r3, [pc, #168]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003380:	f7ff f996 	bl	80026b0 <HAL_PWREx_GetVoltageRange>
 8003384:	6178      	str	r0, [r7, #20]
 8003386:	e014      	b.n	80033b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003388:	4b25      	ldr	r3, [pc, #148]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	4a24      	ldr	r2, [pc, #144]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800338e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003392:	6593      	str	r3, [r2, #88]	; 0x58
 8003394:	4b22      	ldr	r3, [pc, #136]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033a0:	f7ff f986 	bl	80026b0 <HAL_PWREx_GetVoltageRange>
 80033a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033a6:	4b1e      	ldr	r3, [pc, #120]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b8:	d10b      	bne.n	80033d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b80      	cmp	r3, #128	; 0x80
 80033be:	d919      	bls.n	80033f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2ba0      	cmp	r3, #160	; 0xa0
 80033c4:	d902      	bls.n	80033cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033c6:	2302      	movs	r3, #2
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	e013      	b.n	80033f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033cc:	2301      	movs	r3, #1
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	e010      	b.n	80033f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b80      	cmp	r3, #128	; 0x80
 80033d6:	d902      	bls.n	80033de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033d8:	2303      	movs	r3, #3
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	e00a      	b.n	80033f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b80      	cmp	r3, #128	; 0x80
 80033e2:	d102      	bne.n	80033ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033e4:	2302      	movs	r3, #2
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	e004      	b.n	80033f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b70      	cmp	r3, #112	; 0x70
 80033ee:	d101      	bne.n	80033f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033f0:	2301      	movs	r3, #1
 80033f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 0207 	bic.w	r2, r3, #7
 80033fc:	4909      	ldr	r1, [pc, #36]	; (8003424 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003404:	4b07      	ldr	r3, [pc, #28]	; (8003424 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	429a      	cmp	r2, r3
 8003410:	d001      	beq.n	8003416 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021000 	.word	0x40021000
 8003424:	40022000 	.word	0x40022000

08003428 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003430:	2300      	movs	r3, #0
 8003432:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003434:	2300      	movs	r3, #0
 8003436:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003440:	2b00      	cmp	r3, #0
 8003442:	d031      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003448:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800344c:	d01a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800344e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003452:	d814      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d009      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003458:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800345c:	d10f      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800345e:	4b5d      	ldr	r3, [pc, #372]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	4a5c      	ldr	r2, [pc, #368]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003468:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800346a:	e00c      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3304      	adds	r3, #4
 8003470:	2100      	movs	r1, #0
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fa44 	bl	8003900 <RCCEx_PLLSAI1_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800347c:	e003      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	74fb      	strb	r3, [r7, #19]
      break;
 8003482:	e000      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003486:	7cfb      	ldrb	r3, [r7, #19]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10b      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800348c:	4b51      	ldr	r3, [pc, #324]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003492:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349a:	494e      	ldr	r1, [pc, #312]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034a2:	e001      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 809e 	beq.w	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b6:	2300      	movs	r3, #0
 80034b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034ba:	4b46      	ldr	r3, [pc, #280]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80034ca:	2300      	movs	r3, #0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00d      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d0:	4b40      	ldr	r3, [pc, #256]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d4:	4a3f      	ldr	r2, [pc, #252]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034da:	6593      	str	r3, [r2, #88]	; 0x58
 80034dc:	4b3d      	ldr	r3, [pc, #244]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e8:	2301      	movs	r3, #1
 80034ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034ec:	4b3a      	ldr	r3, [pc, #232]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a39      	ldr	r2, [pc, #228]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80034f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034f8:	f7fd fe72 	bl	80011e0 <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034fe:	e009      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003500:	f7fd fe6e 	bl	80011e0 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d902      	bls.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	74fb      	strb	r3, [r7, #19]
        break;
 8003512:	e005      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003514:	4b30      	ldr	r3, [pc, #192]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0ef      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d15a      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003526:	4b2b      	ldr	r3, [pc, #172]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003530:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d01e      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	429a      	cmp	r2, r3
 8003540:	d019      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003542:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800354e:	4b21      	ldr	r3, [pc, #132]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003554:	4a1f      	ldr	r2, [pc, #124]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800355e:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003564:	4a1b      	ldr	r2, [pc, #108]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800356a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800356e:	4a19      	ldr	r2, [pc, #100]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d016      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fd fe2e 	bl	80011e0 <HAL_GetTick>
 8003584:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003586:	e00b      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003588:	f7fd fe2a 	bl	80011e0 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f241 3288 	movw	r2, #5000	; 0x1388
 8003596:	4293      	cmp	r3, r2
 8003598:	d902      	bls.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	74fb      	strb	r3, [r7, #19]
            break;
 800359e:	e006      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0ec      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80035ae:	7cfb      	ldrb	r3, [r7, #19]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10b      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035b4:	4b07      	ldr	r3, [pc, #28]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c2:	4904      	ldr	r1, [pc, #16]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035ca:	e009      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035cc:	7cfb      	ldrb	r3, [r7, #19]
 80035ce:	74bb      	strb	r3, [r7, #18]
 80035d0:	e006      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000
 80035d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035dc:	7cfb      	ldrb	r3, [r7, #19]
 80035de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035e0:	7c7b      	ldrb	r3, [r7, #17]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d105      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e6:	4b9e      	ldr	r3, [pc, #632]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ea:	4a9d      	ldr	r2, [pc, #628]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035fe:	4b98      	ldr	r3, [pc, #608]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003604:	f023 0203 	bic.w	r2, r3, #3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	4994      	ldr	r1, [pc, #592]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003620:	4b8f      	ldr	r3, [pc, #572]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003626:	f023 020c 	bic.w	r2, r3, #12
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	498c      	ldr	r1, [pc, #560]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003642:	4b87      	ldr	r3, [pc, #540]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003648:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	4983      	ldr	r1, [pc, #524]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003664:	4b7e      	ldr	r3, [pc, #504]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	497b      	ldr	r1, [pc, #492]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003686:	4b76      	ldr	r3, [pc, #472]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	4972      	ldr	r1, [pc, #456]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036a8:	4b6d      	ldr	r3, [pc, #436]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	496a      	ldr	r1, [pc, #424]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036ca:	4b65      	ldr	r3, [pc, #404]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d8:	4961      	ldr	r1, [pc, #388]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ec:	4b5c      	ldr	r3, [pc, #368]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fa:	4959      	ldr	r1, [pc, #356]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800370e:	4b54      	ldr	r3, [pc, #336]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003714:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	4950      	ldr	r1, [pc, #320]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003730:	4b4b      	ldr	r3, [pc, #300]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373e:	4948      	ldr	r1, [pc, #288]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003752:	4b43      	ldr	r3, [pc, #268]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003758:	f023 0203 	bic.w	r2, r3, #3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	493f      	ldr	r1, [pc, #252]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d028      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003774:	4b3a      	ldr	r3, [pc, #232]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003782:	4937      	ldr	r1, [pc, #220]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800378e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003792:	d106      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003794:	4b32      	ldr	r3, [pc, #200]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4a31      	ldr	r2, [pc, #196]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800379a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800379e:	60d3      	str	r3, [r2, #12]
 80037a0:	e011      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037aa:	d10c      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3304      	adds	r3, #4
 80037b0:	2101      	movs	r1, #1
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f8a4 	bl	8003900 <RCCEx_PLLSAI1_Config>
 80037b8:	4603      	mov	r3, r0
 80037ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80037c2:	7cfb      	ldrb	r3, [r7, #19]
 80037c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d028      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037d2:	4b23      	ldr	r3, [pc, #140]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e0:	491f      	ldr	r1, [pc, #124]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037f0:	d106      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037f2:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	4a1a      	ldr	r2, [pc, #104]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037fc:	60d3      	str	r3, [r2, #12]
 80037fe:	e011      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003804:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003808:	d10c      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3304      	adds	r3, #4
 800380e:	2101      	movs	r1, #1
 8003810:	4618      	mov	r0, r3
 8003812:	f000 f875 	bl	8003900 <RCCEx_PLLSAI1_Config>
 8003816:	4603      	mov	r3, r0
 8003818:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800381a:	7cfb      	ldrb	r3, [r7, #19]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003820:	7cfb      	ldrb	r3, [r7, #19]
 8003822:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d02b      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003836:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	4908      	ldr	r1, [pc, #32]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800384e:	d109      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003850:	4b03      	ldr	r3, [pc, #12]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4a02      	ldr	r2, [pc, #8]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800385a:	60d3      	str	r3, [r2, #12]
 800385c:	e014      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003868:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800386c:	d10c      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3304      	adds	r3, #4
 8003872:	2101      	movs	r1, #1
 8003874:	4618      	mov	r0, r3
 8003876:	f000 f843 	bl	8003900 <RCCEx_PLLSAI1_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800387e:	7cfb      	ldrb	r3, [r7, #19]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003884:	7cfb      	ldrb	r3, [r7, #19]
 8003886:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01c      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a2:	4916      	ldr	r1, [pc, #88]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038b2:	d10c      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3304      	adds	r3, #4
 80038b8:	2102      	movs	r1, #2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f820 	bl	8003900 <RCCEx_PLLSAI1_Config>
 80038c0:	4603      	mov	r3, r0
 80038c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038c4:	7cfb      	ldrb	r3, [r7, #19]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80038ca:	7cfb      	ldrb	r3, [r7, #19]
 80038cc:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e8:	4904      	ldr	r1, [pc, #16]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000

08003900 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800390e:	4b74      	ldr	r3, [pc, #464]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d018      	beq.n	800394c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800391a:	4b71      	ldr	r3, [pc, #452]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0203 	and.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d10d      	bne.n	8003946 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
       ||
 800392e:	2b00      	cmp	r3, #0
 8003930:	d009      	beq.n	8003946 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003932:	4b6b      	ldr	r3, [pc, #428]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	091b      	lsrs	r3, r3, #4
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
       ||
 8003942:	429a      	cmp	r2, r3
 8003944:	d047      	beq.n	80039d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	73fb      	strb	r3, [r7, #15]
 800394a:	e044      	b.n	80039d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d018      	beq.n	8003986 <RCCEx_PLLSAI1_Config+0x86>
 8003954:	2b03      	cmp	r3, #3
 8003956:	d825      	bhi.n	80039a4 <RCCEx_PLLSAI1_Config+0xa4>
 8003958:	2b01      	cmp	r3, #1
 800395a:	d002      	beq.n	8003962 <RCCEx_PLLSAI1_Config+0x62>
 800395c:	2b02      	cmp	r3, #2
 800395e:	d009      	beq.n	8003974 <RCCEx_PLLSAI1_Config+0x74>
 8003960:	e020      	b.n	80039a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003962:	4b5f      	ldr	r3, [pc, #380]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d11d      	bne.n	80039aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003972:	e01a      	b.n	80039aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003974:	4b5a      	ldr	r3, [pc, #360]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397c:	2b00      	cmp	r3, #0
 800397e:	d116      	bne.n	80039ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003984:	e013      	b.n	80039ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003986:	4b56      	ldr	r3, [pc, #344]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10f      	bne.n	80039b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003992:	4b53      	ldr	r3, [pc, #332]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039a2:	e006      	b.n	80039b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
      break;
 80039a8:	e004      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039aa:	bf00      	nop
 80039ac:	e002      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ae:	bf00      	nop
 80039b0:	e000      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10d      	bne.n	80039d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039ba:	4b49      	ldr	r3, [pc, #292]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6819      	ldr	r1, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	430b      	orrs	r3, r1
 80039d0:	4943      	ldr	r1, [pc, #268]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d17c      	bne.n	8003ad6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039dc:	4b40      	ldr	r3, [pc, #256]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a3f      	ldr	r2, [pc, #252]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e8:	f7fd fbfa 	bl	80011e0 <HAL_GetTick>
 80039ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039ee:	e009      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039f0:	f7fd fbf6 	bl	80011e0 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d902      	bls.n	8003a04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	73fb      	strb	r3, [r7, #15]
        break;
 8003a02:	e005      	b.n	8003a10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a04:	4b36      	ldr	r3, [pc, #216]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1ef      	bne.n	80039f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d15f      	bne.n	8003ad6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d110      	bne.n	8003a3e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a1c:	4b30      	ldr	r3, [pc, #192]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003a24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6892      	ldr	r2, [r2, #8]
 8003a2c:	0211      	lsls	r1, r2, #8
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	68d2      	ldr	r2, [r2, #12]
 8003a32:	06d2      	lsls	r2, r2, #27
 8003a34:	430a      	orrs	r2, r1
 8003a36:	492a      	ldr	r1, [pc, #168]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	610b      	str	r3, [r1, #16]
 8003a3c:	e027      	b.n	8003a8e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d112      	bne.n	8003a6a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a44:	4b26      	ldr	r3, [pc, #152]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6892      	ldr	r2, [r2, #8]
 8003a54:	0211      	lsls	r1, r2, #8
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6912      	ldr	r2, [r2, #16]
 8003a5a:	0852      	lsrs	r2, r2, #1
 8003a5c:	3a01      	subs	r2, #1
 8003a5e:	0552      	lsls	r2, r2, #21
 8003a60:	430a      	orrs	r2, r1
 8003a62:	491f      	ldr	r1, [pc, #124]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	610b      	str	r3, [r1, #16]
 8003a68:	e011      	b.n	8003a8e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6892      	ldr	r2, [r2, #8]
 8003a7a:	0211      	lsls	r1, r2, #8
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6952      	ldr	r2, [r2, #20]
 8003a80:	0852      	lsrs	r2, r2, #1
 8003a82:	3a01      	subs	r2, #1
 8003a84:	0652      	lsls	r2, r2, #25
 8003a86:	430a      	orrs	r2, r1
 8003a88:	4915      	ldr	r1, [pc, #84]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a8e:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a13      	ldr	r2, [pc, #76]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9a:	f7fd fba1 	bl	80011e0 <HAL_GetTick>
 8003a9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aa0:	e009      	b.n	8003ab6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aa2:	f7fd fb9d 	bl	80011e0 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d902      	bls.n	8003ab6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	73fb      	strb	r3, [r7, #15]
          break;
 8003ab4:	e005      	b.n	8003ac2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0ef      	beq.n	8003aa2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d106      	bne.n	8003ad6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	4903      	ldr	r1, [pc, #12]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40021000 	.word	0x40021000

08003ae4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d06c      	beq.n	8003bd0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fc ffd0 	bl	8000ab0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	22ca      	movs	r2, #202	; 0xca
 8003b1e:	625a      	str	r2, [r3, #36]	; 0x24
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2253      	movs	r2, #83	; 0x53
 8003b26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f87c 	bl	8003c26 <RTC_EnterInitMode>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d14b      	bne.n	8003bd0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6812      	ldr	r2, [r2, #0]
 8003b42:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b4a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6899      	ldr	r1, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68d2      	ldr	r2, [r2, #12]
 8003b72:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6919      	ldr	r1, [r3, #16]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	041a      	lsls	r2, r3, #16
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f87f 	bl	8003c8c <RTC_ExitInitMode>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d11b      	bne.n	8003bd0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0203 	bic.w	r2, r2, #3
 8003ba6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69da      	ldr	r2, [r3, #28]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	22ff      	movs	r2, #255	; 0xff
 8003bc6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bf0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003bf2:	f7fd faf5 	bl	80011e0 <HAL_GetTick>
 8003bf6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003bf8:	e009      	b.n	8003c0e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003bfa:	f7fd faf1 	bl	80011e0 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c08:	d901      	bls.n	8003c0e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e007      	b.n	8003c1e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0ee      	beq.n	8003bfa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d120      	bne.n	8003c82 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f04f 32ff 	mov.w	r2, #4294967295
 8003c48:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003c4a:	f7fd fac9 	bl	80011e0 <HAL_GetTick>
 8003c4e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003c50:	e00d      	b.n	8003c6e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003c52:	f7fd fac5 	bl	80011e0 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c60:	d905      	bls.n	8003c6e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2203      	movs	r2, #3
 8003c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d102      	bne.n	8003c82 <RTC_EnterInitMode+0x5c>
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d1e7      	bne.n	8003c52 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003c98:	4b1a      	ldr	r3, [pc, #104]	; (8003d04 <RTC_ExitInitMode+0x78>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4a19      	ldr	r2, [pc, #100]	; (8003d04 <RTC_ExitInitMode+0x78>)
 8003c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ca2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003ca4:	4b17      	ldr	r3, [pc, #92]	; (8003d04 <RTC_ExitInitMode+0x78>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 0320 	and.w	r3, r3, #32
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10c      	bne.n	8003cca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff ff92 	bl	8003bda <HAL_RTC_WaitForSynchro>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d01e      	beq.n	8003cfa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	73fb      	strb	r3, [r7, #15]
 8003cc8:	e017      	b.n	8003cfa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003cca:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <RTC_ExitInitMode+0x78>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	4a0d      	ldr	r2, [pc, #52]	; (8003d04 <RTC_ExitInitMode+0x78>)
 8003cd0:	f023 0320 	bic.w	r3, r3, #32
 8003cd4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff ff7f 	bl	8003bda <HAL_RTC_WaitForSynchro>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003cee:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <RTC_ExitInitMode+0x78>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	4a04      	ldr	r2, [pc, #16]	; (8003d04 <RTC_ExitInitMode+0x78>)
 8003cf4:	f043 0320 	orr.w	r3, r3, #32
 8003cf8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40002800 	.word	0x40002800

08003d08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e095      	b.n	8003e46 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d108      	bne.n	8003d34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d2a:	d009      	beq.n	8003d40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	61da      	str	r2, [r3, #28]
 8003d32:	e005      	b.n	8003d40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fc ff16 	bl	8000b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d80:	d902      	bls.n	8003d88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	e002      	b.n	8003d8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d96:	d007      	beq.n	8003da8 <HAL_SPI_Init+0xa0>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003da0:	d002      	beq.n	8003da8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dea:	ea42 0103 	orr.w	r1, r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	0c1b      	lsrs	r3, r3, #16
 8003e04:	f003 0204 	and.w	r2, r3, #4
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e24:	ea42 0103 	orr.w	r1, r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e049      	b.n	8003ef4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d106      	bne.n	8003e7a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f841 	bl	8003efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	f000 f9e3 	bl	8004258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d001      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e040      	b.n	8003faa <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a1c      	ldr	r2, [pc, #112]	; (8003fb8 <HAL_TIM_Base_Start_IT+0xa8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00e      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0x58>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f52:	d009      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0x58>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a18      	ldr	r2, [pc, #96]	; (8003fbc <HAL_TIM_Base_Start_IT+0xac>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d004      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0x58>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a17      	ldr	r2, [pc, #92]	; (8003fc0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d115      	bne.n	8003f94 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b06      	cmp	r3, #6
 8003f78:	d015      	beq.n	8003fa6 <HAL_TIM_Base_Start_IT+0x96>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f80:	d011      	beq.n	8003fa6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 0201 	orr.w	r2, r2, #1
 8003f90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f92:	e008      	b.n	8003fa6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	e000      	b.n	8003fa8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40012c00 	.word	0x40012c00
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	40014000 	.word	0x40014000
 8003fc4:	00010007 	.word	0x00010007

08003fc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d122      	bne.n	8004024 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d11b      	bne.n	8004024 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0202 	mvn.w	r2, #2
 8003ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f905 	bl	800421a <HAL_TIM_IC_CaptureCallback>
 8004010:	e005      	b.n	800401e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f8f7 	bl	8004206 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f908 	bl	800422e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b04      	cmp	r3, #4
 8004030:	d122      	bne.n	8004078 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b04      	cmp	r3, #4
 800403e:	d11b      	bne.n	8004078 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0204 	mvn.w	r2, #4
 8004048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2202      	movs	r2, #2
 800404e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f8db 	bl	800421a <HAL_TIM_IC_CaptureCallback>
 8004064:	e005      	b.n	8004072 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f8cd 	bl	8004206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f8de 	bl	800422e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b08      	cmp	r3, #8
 8004084:	d122      	bne.n	80040cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b08      	cmp	r3, #8
 8004092:	d11b      	bne.n	80040cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0208 	mvn.w	r2, #8
 800409c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2204      	movs	r2, #4
 80040a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f8b1 	bl	800421a <HAL_TIM_IC_CaptureCallback>
 80040b8:	e005      	b.n	80040c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f8a3 	bl	8004206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f8b4 	bl	800422e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	2b10      	cmp	r3, #16
 80040d8:	d122      	bne.n	8004120 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d11b      	bne.n	8004120 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f06f 0210 	mvn.w	r2, #16
 80040f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2208      	movs	r2, #8
 80040f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f887 	bl	800421a <HAL_TIM_IC_CaptureCallback>
 800410c:	e005      	b.n	800411a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f879 	bl	8004206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f88a 	bl	800422e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b01      	cmp	r3, #1
 800412c:	d10e      	bne.n	800414c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b01      	cmp	r3, #1
 800413a:	d107      	bne.n	800414c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0201 	mvn.w	r2, #1
 8004144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fc fc72 	bl	8000a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004156:	2b80      	cmp	r3, #128	; 0x80
 8004158:	d10e      	bne.n	8004178 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004164:	2b80      	cmp	r3, #128	; 0x80
 8004166:	d107      	bne.n	8004178 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f8e8 	bl	8004348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004186:	d10e      	bne.n	80041a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004192:	2b80      	cmp	r3, #128	; 0x80
 8004194:	d107      	bne.n	80041a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800419e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f8db 	bl	800435c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b0:	2b40      	cmp	r3, #64	; 0x40
 80041b2:	d10e      	bne.n	80041d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041be:	2b40      	cmp	r3, #64	; 0x40
 80041c0:	d107      	bne.n	80041d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f838 	bl	8004242 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d10e      	bne.n	80041fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b20      	cmp	r3, #32
 80041ec:	d107      	bne.n	80041fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f06f 0220 	mvn.w	r2, #32
 80041f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f89b 	bl	8004334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
	...

08004258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a2e      	ldr	r2, [pc, #184]	; (8004324 <TIM_Base_SetConfig+0xcc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d007      	beq.n	8004280 <TIM_Base_SetConfig+0x28>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004276:	d003      	beq.n	8004280 <TIM_Base_SetConfig+0x28>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a2b      	ldr	r2, [pc, #172]	; (8004328 <TIM_Base_SetConfig+0xd0>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d108      	bne.n	8004292 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a23      	ldr	r2, [pc, #140]	; (8004324 <TIM_Base_SetConfig+0xcc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00f      	beq.n	80042ba <TIM_Base_SetConfig+0x62>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a0:	d00b      	beq.n	80042ba <TIM_Base_SetConfig+0x62>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a20      	ldr	r2, [pc, #128]	; (8004328 <TIM_Base_SetConfig+0xd0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d007      	beq.n	80042ba <TIM_Base_SetConfig+0x62>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a1f      	ldr	r2, [pc, #124]	; (800432c <TIM_Base_SetConfig+0xd4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d003      	beq.n	80042ba <TIM_Base_SetConfig+0x62>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a1e      	ldr	r2, [pc, #120]	; (8004330 <TIM_Base_SetConfig+0xd8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d108      	bne.n	80042cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a0c      	ldr	r2, [pc, #48]	; (8004324 <TIM_Base_SetConfig+0xcc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d007      	beq.n	8004308 <TIM_Base_SetConfig+0xb0>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a0c      	ldr	r2, [pc, #48]	; (800432c <TIM_Base_SetConfig+0xd4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d003      	beq.n	8004308 <TIM_Base_SetConfig+0xb0>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a0b      	ldr	r2, [pc, #44]	; (8004330 <TIM_Base_SetConfig+0xd8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d103      	bne.n	8004310 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	615a      	str	r2, [r3, #20]
}
 8004316:	bf00      	nop
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40012c00 	.word	0x40012c00
 8004328:	40000400 	.word	0x40000400
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400

08004334 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e040      	b.n	8004404 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fc fdcc 	bl	8000f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2224      	movs	r2, #36	; 0x24
 800439c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0201 	bic.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fb26 	bl	8004a00 <UART_SetConfig>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e022      	b.n	8004404 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fd76 	bl	8004eb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fdfd 	bl	8004ffc <UART_CheckIdleState>
 8004402:	4603      	mov	r3, r0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	; 0x28
 8004410:	af02      	add	r7, sp, #8
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004420:	2b20      	cmp	r3, #32
 8004422:	f040 8082 	bne.w	800452a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_UART_Transmit+0x26>
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e07a      	b.n	800452c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_UART_Transmit+0x38>
 8004440:	2302      	movs	r3, #2
 8004442:	e073      	b.n	800452c <HAL_UART_Transmit+0x120>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2221      	movs	r2, #33	; 0x21
 8004458:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800445a:	f7fc fec1 	bl	80011e0 <HAL_GetTick>
 800445e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	88fa      	ldrh	r2, [r7, #6]
 8004464:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	88fa      	ldrh	r2, [r7, #6]
 800446c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004478:	d108      	bne.n	800448c <HAL_UART_Transmit+0x80>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d104      	bne.n	800448c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004482:	2300      	movs	r3, #0
 8004484:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	61bb      	str	r3, [r7, #24]
 800448a:	e003      	b.n	8004494 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004490:	2300      	movs	r3, #0
 8004492:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800449c:	e02d      	b.n	80044fa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2200      	movs	r2, #0
 80044a6:	2180      	movs	r1, #128	; 0x80
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fdf0 	bl	800508e <UART_WaitOnFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e039      	b.n	800452c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10b      	bne.n	80044d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	881a      	ldrh	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ca:	b292      	uxth	r2, r2
 80044cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	3302      	adds	r3, #2
 80044d2:	61bb      	str	r3, [r7, #24]
 80044d4:	e008      	b.n	80044e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	781a      	ldrb	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	b292      	uxth	r2, r2
 80044e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	3301      	adds	r3, #1
 80044e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1cb      	bne.n	800449e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2200      	movs	r2, #0
 800450e:	2140      	movs	r1, #64	; 0x40
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 fdbc 	bl	800508e <UART_WaitOnFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e005      	b.n	800452c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	e000      	b.n	800452c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800452a:	2302      	movs	r3, #2
  }
}
 800452c:	4618      	mov	r0, r3
 800452e:	3720      	adds	r7, #32
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	4613      	mov	r3, r2
 8004540:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004546:	2b20      	cmp	r3, #32
 8004548:	d131      	bne.n	80045ae <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <HAL_UART_Receive_IT+0x22>
 8004550:	88fb      	ldrh	r3, [r7, #6]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e02a      	b.n	80045b0 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_UART_Receive_IT+0x34>
 8004564:	2302      	movs	r3, #2
 8004566:	e023      	b.n	80045b0 <HAL_UART_Receive_IT+0x7c>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a0f      	ldr	r2, [pc, #60]	; (80045b8 <HAL_UART_Receive_IT+0x84>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00e      	beq.n	800459e <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800459c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800459e:	88fb      	ldrh	r3, [r7, #6]
 80045a0:	461a      	mov	r2, r3
 80045a2:	68b9      	ldr	r1, [r7, #8]
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 fdef 	bl	8005188 <UART_Start_Receive_IT>
 80045aa:	4603      	mov	r3, r0
 80045ac:	e000      	b.n	80045b0 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80045ae:	2302      	movs	r3, #2
  }
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40008000 	.word	0x40008000

080045bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045dc:	69fa      	ldr	r2, [r7, #28]
 80045de:	f640 030f 	movw	r3, #2063	; 0x80f
 80045e2:	4013      	ands	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d113      	bne.n	8004614 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00e      	beq.n	8004614 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	f003 0320 	and.w	r3, r3, #32
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d009      	beq.n	8004614 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 81ce 	beq.w	80049a6 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	4798      	blx	r3
      }
      return;
 8004612:	e1c8      	b.n	80049a6 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 80e3 	beq.w	80047e2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d105      	bne.n	8004632 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4ba6      	ldr	r3, [pc, #664]	; (80048c4 <HAL_UART_IRQHandler+0x308>)
 800462a:	4013      	ands	r3, r2
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80d8 	beq.w	80047e2 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d010      	beq.n	800465e <HAL_UART_IRQHandler+0xa2>
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00b      	beq.n	800465e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2201      	movs	r2, #1
 800464c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004654:	f043 0201 	orr.w	r2, r3, #1
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d010      	beq.n	800468a <HAL_UART_IRQHandler+0xce>
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00b      	beq.n	800468a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2202      	movs	r2, #2
 8004678:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004680:	f043 0204 	orr.w	r2, r3, #4
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d010      	beq.n	80046b6 <HAL_UART_IRQHandler+0xfa>
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00b      	beq.n	80046b6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2204      	movs	r2, #4
 80046a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ac:	f043 0202 	orr.w	r2, r3, #2
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d015      	beq.n	80046ec <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d104      	bne.n	80046d4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00b      	beq.n	80046ec <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2208      	movs	r2, #8
 80046da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e2:	f043 0208 	orr.w	r2, r3, #8
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d011      	beq.n	800471a <HAL_UART_IRQHandler+0x15e>
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00c      	beq.n	800471a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004708:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004710:	f043 0220 	orr.w	r2, r3, #32
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 8142 	beq.w	80049aa <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00c      	beq.n	800474a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004750:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475c:	2b40      	cmp	r3, #64	; 0x40
 800475e:	d004      	beq.n	800476a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004766:	2b00      	cmp	r3, #0
 8004768:	d031      	beq.n	80047ce <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fd94 	bl	8005298 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477a:	2b40      	cmp	r3, #64	; 0x40
 800477c:	d123      	bne.n	80047c6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800478c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004792:	2b00      	cmp	r3, #0
 8004794:	d013      	beq.n	80047be <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	4a4b      	ldr	r2, [pc, #300]	; (80048c8 <HAL_UART_IRQHandler+0x30c>)
 800479c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fd fd30 	bl	8002208 <HAL_DMA_Abort_IT>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d017      	beq.n	80047de <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80047b8:	4610      	mov	r0, r2
 80047ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047bc:	e00f      	b.n	80047de <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f908 	bl	80049d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c4:	e00b      	b.n	80047de <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f904 	bl	80049d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047cc:	e007      	b.n	80047de <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f900 	bl	80049d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80047dc:	e0e5      	b.n	80049aa <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047de:	bf00      	nop
    return;
 80047e0:	e0e3      	b.n	80049aa <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	f040 80a9 	bne.w	800493e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 80a3 	beq.w	800493e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	f003 0310 	and.w	r3, r3, #16
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 809d 	beq.w	800493e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2210      	movs	r2, #16
 800480a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004816:	2b40      	cmp	r3, #64	; 0x40
 8004818:	d158      	bne.n	80048cc <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004824:	893b      	ldrh	r3, [r7, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 80c1 	beq.w	80049ae <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004832:	893a      	ldrh	r2, [r7, #8]
 8004834:	429a      	cmp	r2, r3
 8004836:	f080 80ba 	bcs.w	80049ae <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	893a      	ldrh	r2, [r7, #8]
 800483e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d12a      	bne.n	80048a8 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004860:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0201 	bic.w	r2, r2, #1
 8004870:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004880:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0210 	bic.w	r2, r2, #16
 800489c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fd fc72 	bl	800218c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	4619      	mov	r1, r3
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f893 	bl	80049e8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80048c2:	e074      	b.n	80049ae <HAL_UART_IRQHandler+0x3f2>
 80048c4:	04000120 	.word	0x04000120
 80048c8:	080052f7 	.word	0x080052f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d063      	beq.n	80049b2 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80048ea:	897b      	ldrh	r3, [r7, #10]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d060      	beq.n	80049b2 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048fe:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0210 	bic.w	r2, r2, #16
 8004930:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004932:	897b      	ldrh	r3, [r7, #10]
 8004934:	4619      	mov	r1, r3
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f856 	bl	80049e8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800493c:	e039      	b.n	80049b2 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00d      	beq.n	8004964 <HAL_UART_IRQHandler+0x3a8>
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800495a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fdd1 	bl	8005504 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004962:	e029      	b.n	80049b8 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00d      	beq.n	800498a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01a      	beq.n	80049b6 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	4798      	blx	r3
    }
    return;
 8004988:	e015      	b.n	80049b6 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	d011      	beq.n	80049b8 <HAL_UART_IRQHandler+0x3fc>
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00c      	beq.n	80049b8 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fcbf 	bl	8005322 <UART_EndTransmit_IT>
    return;
 80049a4:	e008      	b.n	80049b8 <HAL_UART_IRQHandler+0x3fc>
      return;
 80049a6:	bf00      	nop
 80049a8:	e006      	b.n	80049b8 <HAL_UART_IRQHandler+0x3fc>
    return;
 80049aa:	bf00      	nop
 80049ac:	e004      	b.n	80049b8 <HAL_UART_IRQHandler+0x3fc>
      return;
 80049ae:	bf00      	nop
 80049b0:	e002      	b.n	80049b8 <HAL_UART_IRQHandler+0x3fc>
      return;
 80049b2:	bf00      	nop
 80049b4:	e000      	b.n	80049b8 <HAL_UART_IRQHandler+0x3fc>
    return;
 80049b6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80049b8:	3720      	adds	r7, #32
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop

080049c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a00:	b5b0      	push	{r4, r5, r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4ba4      	ldr	r3, [pc, #656]	; (8004cbc <UART_SetConfig+0x2bc>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	69f9      	ldr	r1, [r7, #28]
 8004a34:	430b      	orrs	r3, r1
 8004a36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a99      	ldr	r2, [pc, #612]	; (8004cc0 <UART_SetConfig+0x2c0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d004      	beq.n	8004a68 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a90      	ldr	r2, [pc, #576]	; (8004cc4 <UART_SetConfig+0x2c4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d121      	bne.n	8004aca <UART_SetConfig+0xca>
 8004a86:	4b90      	ldr	r3, [pc, #576]	; (8004cc8 <UART_SetConfig+0x2c8>)
 8004a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8c:	f003 0303 	and.w	r3, r3, #3
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d817      	bhi.n	8004ac4 <UART_SetConfig+0xc4>
 8004a94:	a201      	add	r2, pc, #4	; (adr r2, 8004a9c <UART_SetConfig+0x9c>)
 8004a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9a:	bf00      	nop
 8004a9c:	08004aad 	.word	0x08004aad
 8004aa0:	08004ab9 	.word	0x08004ab9
 8004aa4:	08004ab3 	.word	0x08004ab3
 8004aa8:	08004abf 	.word	0x08004abf
 8004aac:	2301      	movs	r3, #1
 8004aae:	76fb      	strb	r3, [r7, #27]
 8004ab0:	e0bc      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	76fb      	strb	r3, [r7, #27]
 8004ab6:	e0b9      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004ab8:	2304      	movs	r3, #4
 8004aba:	76fb      	strb	r3, [r7, #27]
 8004abc:	e0b6      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004abe:	2308      	movs	r3, #8
 8004ac0:	76fb      	strb	r3, [r7, #27]
 8004ac2:	e0b3      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004ac4:	2310      	movs	r3, #16
 8004ac6:	76fb      	strb	r3, [r7, #27]
 8004ac8:	e0b0      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a7f      	ldr	r2, [pc, #508]	; (8004ccc <UART_SetConfig+0x2cc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d132      	bne.n	8004b3a <UART_SetConfig+0x13a>
 8004ad4:	4b7c      	ldr	r3, [pc, #496]	; (8004cc8 <UART_SetConfig+0x2c8>)
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ada:	f003 030c 	and.w	r3, r3, #12
 8004ade:	2b0c      	cmp	r3, #12
 8004ae0:	d828      	bhi.n	8004b34 <UART_SetConfig+0x134>
 8004ae2:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <UART_SetConfig+0xe8>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b1d 	.word	0x08004b1d
 8004aec:	08004b35 	.word	0x08004b35
 8004af0:	08004b35 	.word	0x08004b35
 8004af4:	08004b35 	.word	0x08004b35
 8004af8:	08004b29 	.word	0x08004b29
 8004afc:	08004b35 	.word	0x08004b35
 8004b00:	08004b35 	.word	0x08004b35
 8004b04:	08004b35 	.word	0x08004b35
 8004b08:	08004b23 	.word	0x08004b23
 8004b0c:	08004b35 	.word	0x08004b35
 8004b10:	08004b35 	.word	0x08004b35
 8004b14:	08004b35 	.word	0x08004b35
 8004b18:	08004b2f 	.word	0x08004b2f
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	76fb      	strb	r3, [r7, #27]
 8004b20:	e084      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004b22:	2302      	movs	r3, #2
 8004b24:	76fb      	strb	r3, [r7, #27]
 8004b26:	e081      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	76fb      	strb	r3, [r7, #27]
 8004b2c:	e07e      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004b2e:	2308      	movs	r3, #8
 8004b30:	76fb      	strb	r3, [r7, #27]
 8004b32:	e07b      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004b34:	2310      	movs	r3, #16
 8004b36:	76fb      	strb	r3, [r7, #27]
 8004b38:	e078      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a64      	ldr	r2, [pc, #400]	; (8004cd0 <UART_SetConfig+0x2d0>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d120      	bne.n	8004b86 <UART_SetConfig+0x186>
 8004b44:	4b60      	ldr	r3, [pc, #384]	; (8004cc8 <UART_SetConfig+0x2c8>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b4e:	2b30      	cmp	r3, #48	; 0x30
 8004b50:	d013      	beq.n	8004b7a <UART_SetConfig+0x17a>
 8004b52:	2b30      	cmp	r3, #48	; 0x30
 8004b54:	d814      	bhi.n	8004b80 <UART_SetConfig+0x180>
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	d009      	beq.n	8004b6e <UART_SetConfig+0x16e>
 8004b5a:	2b20      	cmp	r3, #32
 8004b5c:	d810      	bhi.n	8004b80 <UART_SetConfig+0x180>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <UART_SetConfig+0x168>
 8004b62:	2b10      	cmp	r3, #16
 8004b64:	d006      	beq.n	8004b74 <UART_SetConfig+0x174>
 8004b66:	e00b      	b.n	8004b80 <UART_SetConfig+0x180>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	76fb      	strb	r3, [r7, #27]
 8004b6c:	e05e      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	76fb      	strb	r3, [r7, #27]
 8004b72:	e05b      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004b74:	2304      	movs	r3, #4
 8004b76:	76fb      	strb	r3, [r7, #27]
 8004b78:	e058      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	76fb      	strb	r3, [r7, #27]
 8004b7e:	e055      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004b80:	2310      	movs	r3, #16
 8004b82:	76fb      	strb	r3, [r7, #27]
 8004b84:	e052      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a52      	ldr	r2, [pc, #328]	; (8004cd4 <UART_SetConfig+0x2d4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d120      	bne.n	8004bd2 <UART_SetConfig+0x1d2>
 8004b90:	4b4d      	ldr	r3, [pc, #308]	; (8004cc8 <UART_SetConfig+0x2c8>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b9a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b9c:	d013      	beq.n	8004bc6 <UART_SetConfig+0x1c6>
 8004b9e:	2bc0      	cmp	r3, #192	; 0xc0
 8004ba0:	d814      	bhi.n	8004bcc <UART_SetConfig+0x1cc>
 8004ba2:	2b80      	cmp	r3, #128	; 0x80
 8004ba4:	d009      	beq.n	8004bba <UART_SetConfig+0x1ba>
 8004ba6:	2b80      	cmp	r3, #128	; 0x80
 8004ba8:	d810      	bhi.n	8004bcc <UART_SetConfig+0x1cc>
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <UART_SetConfig+0x1b4>
 8004bae:	2b40      	cmp	r3, #64	; 0x40
 8004bb0:	d006      	beq.n	8004bc0 <UART_SetConfig+0x1c0>
 8004bb2:	e00b      	b.n	8004bcc <UART_SetConfig+0x1cc>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	76fb      	strb	r3, [r7, #27]
 8004bb8:	e038      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	76fb      	strb	r3, [r7, #27]
 8004bbe:	e035      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	76fb      	strb	r3, [r7, #27]
 8004bc4:	e032      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004bc6:	2308      	movs	r3, #8
 8004bc8:	76fb      	strb	r3, [r7, #27]
 8004bca:	e02f      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004bcc:	2310      	movs	r3, #16
 8004bce:	76fb      	strb	r3, [r7, #27]
 8004bd0:	e02c      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a3a      	ldr	r2, [pc, #232]	; (8004cc0 <UART_SetConfig+0x2c0>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d125      	bne.n	8004c28 <UART_SetConfig+0x228>
 8004bdc:	4b3a      	ldr	r3, [pc, #232]	; (8004cc8 <UART_SetConfig+0x2c8>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004be6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bea:	d017      	beq.n	8004c1c <UART_SetConfig+0x21c>
 8004bec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bf0:	d817      	bhi.n	8004c22 <UART_SetConfig+0x222>
 8004bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bf6:	d00b      	beq.n	8004c10 <UART_SetConfig+0x210>
 8004bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bfc:	d811      	bhi.n	8004c22 <UART_SetConfig+0x222>
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <UART_SetConfig+0x20a>
 8004c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c06:	d006      	beq.n	8004c16 <UART_SetConfig+0x216>
 8004c08:	e00b      	b.n	8004c22 <UART_SetConfig+0x222>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	76fb      	strb	r3, [r7, #27]
 8004c0e:	e00d      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004c10:	2302      	movs	r3, #2
 8004c12:	76fb      	strb	r3, [r7, #27]
 8004c14:	e00a      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004c16:	2304      	movs	r3, #4
 8004c18:	76fb      	strb	r3, [r7, #27]
 8004c1a:	e007      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004c1c:	2308      	movs	r3, #8
 8004c1e:	76fb      	strb	r3, [r7, #27]
 8004c20:	e004      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004c22:	2310      	movs	r3, #16
 8004c24:	76fb      	strb	r3, [r7, #27]
 8004c26:	e001      	b.n	8004c2c <UART_SetConfig+0x22c>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a23      	ldr	r2, [pc, #140]	; (8004cc0 <UART_SetConfig+0x2c0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	f040 8084 	bne.w	8004d40 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c38:	7efb      	ldrb	r3, [r7, #27]
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d823      	bhi.n	8004c86 <UART_SetConfig+0x286>
 8004c3e:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <UART_SetConfig+0x244>)
 8004c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004c87 	.word	0x08004c87
 8004c4c:	08004c71 	.word	0x08004c71
 8004c50:	08004c87 	.word	0x08004c87
 8004c54:	08004c77 	.word	0x08004c77
 8004c58:	08004c87 	.word	0x08004c87
 8004c5c:	08004c87 	.word	0x08004c87
 8004c60:	08004c87 	.word	0x08004c87
 8004c64:	08004c7f 	.word	0x08004c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c68:	f7fe fb20 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8004c6c:	6178      	str	r0, [r7, #20]
        break;
 8004c6e:	e00f      	b.n	8004c90 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c70:	4b19      	ldr	r3, [pc, #100]	; (8004cd8 <UART_SetConfig+0x2d8>)
 8004c72:	617b      	str	r3, [r7, #20]
        break;
 8004c74:	e00c      	b.n	8004c90 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c76:	f7fe fa81 	bl	800317c <HAL_RCC_GetSysClockFreq>
 8004c7a:	6178      	str	r0, [r7, #20]
        break;
 8004c7c:	e008      	b.n	8004c90 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c82:	617b      	str	r3, [r7, #20]
        break;
 8004c84:	e004      	b.n	8004c90 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	76bb      	strb	r3, [r7, #26]
        break;
 8004c8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 8102 	beq.w	8004e9c <UART_SetConfig+0x49c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	4413      	add	r3, r2
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d305      	bcc.n	8004cb4 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d913      	bls.n	8004cdc <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	76bb      	strb	r3, [r7, #26]
 8004cb8:	e0f0      	b.n	8004e9c <UART_SetConfig+0x49c>
 8004cba:	bf00      	nop
 8004cbc:	efff69f3 	.word	0xefff69f3
 8004cc0:	40008000 	.word	0x40008000
 8004cc4:	40013800 	.word	0x40013800
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	40004400 	.word	0x40004400
 8004cd0:	40004800 	.word	0x40004800
 8004cd4:	40004c00 	.word	0x40004c00
 8004cd8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f04f 0100 	mov.w	r1, #0
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	020b      	lsls	r3, r1, #8
 8004cee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cf2:	0202      	lsls	r2, r0, #8
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	6849      	ldr	r1, [r1, #4]
 8004cf8:	0849      	lsrs	r1, r1, #1
 8004cfa:	4608      	mov	r0, r1
 8004cfc:	f04f 0100 	mov.w	r1, #0
 8004d00:	1814      	adds	r4, r2, r0
 8004d02:	eb43 0501 	adc.w	r5, r3, r1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	4620      	mov	r0, r4
 8004d12:	4629      	mov	r1, r5
 8004d14:	f7fb fa66 	bl	80001e4 <__aeabi_uldivmod>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d26:	d308      	bcc.n	8004d3a <UART_SetConfig+0x33a>
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d2e:	d204      	bcs.n	8004d3a <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	60da      	str	r2, [r3, #12]
 8004d38:	e0b0      	b.n	8004e9c <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	76bb      	strb	r3, [r7, #26]
 8004d3e:	e0ad      	b.n	8004e9c <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d48:	d15c      	bne.n	8004e04 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004d4a:	7efb      	ldrb	r3, [r7, #27]
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d828      	bhi.n	8004da2 <UART_SetConfig+0x3a2>
 8004d50:	a201      	add	r2, pc, #4	; (adr r2, 8004d58 <UART_SetConfig+0x358>)
 8004d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d56:	bf00      	nop
 8004d58:	08004d7d 	.word	0x08004d7d
 8004d5c:	08004d85 	.word	0x08004d85
 8004d60:	08004d8d 	.word	0x08004d8d
 8004d64:	08004da3 	.word	0x08004da3
 8004d68:	08004d93 	.word	0x08004d93
 8004d6c:	08004da3 	.word	0x08004da3
 8004d70:	08004da3 	.word	0x08004da3
 8004d74:	08004da3 	.word	0x08004da3
 8004d78:	08004d9b 	.word	0x08004d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d7c:	f7fe fa96 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8004d80:	6178      	str	r0, [r7, #20]
        break;
 8004d82:	e013      	b.n	8004dac <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d84:	f7fe faa8 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8004d88:	6178      	str	r0, [r7, #20]
        break;
 8004d8a:	e00f      	b.n	8004dac <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d8c:	4b49      	ldr	r3, [pc, #292]	; (8004eb4 <UART_SetConfig+0x4b4>)
 8004d8e:	617b      	str	r3, [r7, #20]
        break;
 8004d90:	e00c      	b.n	8004dac <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d92:	f7fe f9f3 	bl	800317c <HAL_RCC_GetSysClockFreq>
 8004d96:	6178      	str	r0, [r7, #20]
        break;
 8004d98:	e008      	b.n	8004dac <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d9e:	617b      	str	r3, [r7, #20]
        break;
 8004da0:	e004      	b.n	8004dac <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	76bb      	strb	r3, [r7, #26]
        break;
 8004daa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d074      	beq.n	8004e9c <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	005a      	lsls	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	085b      	lsrs	r3, r3, #1
 8004dbc:	441a      	add	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	2b0f      	cmp	r3, #15
 8004dce:	d916      	bls.n	8004dfe <UART_SetConfig+0x3fe>
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd6:	d212      	bcs.n	8004dfe <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f023 030f 	bic.w	r3, r3, #15
 8004de0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	085b      	lsrs	r3, r3, #1
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	89fb      	ldrh	r3, [r7, #14]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	89fa      	ldrh	r2, [r7, #14]
 8004dfa:	60da      	str	r2, [r3, #12]
 8004dfc:	e04e      	b.n	8004e9c <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	76bb      	strb	r3, [r7, #26]
 8004e02:	e04b      	b.n	8004e9c <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e04:	7efb      	ldrb	r3, [r7, #27]
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d827      	bhi.n	8004e5a <UART_SetConfig+0x45a>
 8004e0a:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <UART_SetConfig+0x410>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e35 	.word	0x08004e35
 8004e14:	08004e3d 	.word	0x08004e3d
 8004e18:	08004e45 	.word	0x08004e45
 8004e1c:	08004e5b 	.word	0x08004e5b
 8004e20:	08004e4b 	.word	0x08004e4b
 8004e24:	08004e5b 	.word	0x08004e5b
 8004e28:	08004e5b 	.word	0x08004e5b
 8004e2c:	08004e5b 	.word	0x08004e5b
 8004e30:	08004e53 	.word	0x08004e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e34:	f7fe fa3a 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8004e38:	6178      	str	r0, [r7, #20]
        break;
 8004e3a:	e013      	b.n	8004e64 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e3c:	f7fe fa4c 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8004e40:	6178      	str	r0, [r7, #20]
        break;
 8004e42:	e00f      	b.n	8004e64 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e44:	4b1b      	ldr	r3, [pc, #108]	; (8004eb4 <UART_SetConfig+0x4b4>)
 8004e46:	617b      	str	r3, [r7, #20]
        break;
 8004e48:	e00c      	b.n	8004e64 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e4a:	f7fe f997 	bl	800317c <HAL_RCC_GetSysClockFreq>
 8004e4e:	6178      	str	r0, [r7, #20]
        break;
 8004e50:	e008      	b.n	8004e64 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e56:	617b      	str	r3, [r7, #20]
        break;
 8004e58:	e004      	b.n	8004e64 <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	76bb      	strb	r3, [r7, #26]
        break;
 8004e62:	bf00      	nop
    }

    if (pclk != 0U)
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d018      	beq.n	8004e9c <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	085a      	lsrs	r2, r3, #1
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	441a      	add	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	2b0f      	cmp	r3, #15
 8004e84:	d908      	bls.n	8004e98 <UART_SetConfig+0x498>
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8c:	d204      	bcs.n	8004e98 <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = usartdiv;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	60da      	str	r2, [r3, #12]
 8004e96:	e001      	b.n	8004e9c <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ea8:	7ebb      	ldrb	r3, [r7, #26]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3720      	adds	r7, #32
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	00f42400 	.word	0x00f42400

08004eb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	f003 0310 	and.w	r3, r3, #16
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d01a      	beq.n	8004fce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fb6:	d10a      	bne.n	8004fce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	605a      	str	r2, [r3, #4]
  }
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af02      	add	r7, sp, #8
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800500c:	f7fc f8e8 	bl	80011e0 <HAL_GetTick>
 8005010:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b08      	cmp	r3, #8
 800501e:	d10e      	bne.n	800503e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005020:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f82d 	bl	800508e <UART_WaitOnFlagUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e023      	b.n	8005086 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b04      	cmp	r3, #4
 800504a:	d10e      	bne.n	800506a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800504c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f817 	bl	800508e <UART_WaitOnFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e00d      	b.n	8005086 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	603b      	str	r3, [r7, #0]
 800509a:	4613      	mov	r3, r2
 800509c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800509e:	e05e      	b.n	800515e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a6:	d05a      	beq.n	800515e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a8:	f7fc f89a 	bl	80011e0 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d302      	bcc.n	80050be <UART_WaitOnFlagUntilTimeout+0x30>
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d11b      	bne.n	80050f6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050cc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0201 	bic.w	r2, r2, #1
 80050dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e043      	b.n	800517e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d02c      	beq.n	800515e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800510e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005112:	d124      	bne.n	800515e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800511c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800512c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0201 	bic.w	r2, r2, #1
 800513c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2220      	movs	r2, #32
 8005142:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2220      	movs	r2, #32
 8005148:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2220      	movs	r2, #32
 800514e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e00f      	b.n	800517e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69da      	ldr	r2, [r3, #28]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	4013      	ands	r3, r2
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	429a      	cmp	r2, r3
 800516c:	bf0c      	ite	eq
 800516e:	2301      	moveq	r3, #1
 8005170:	2300      	movne	r3, #0
 8005172:	b2db      	uxtb	r3, r3
 8005174:	461a      	mov	r2, r3
 8005176:	79fb      	ldrb	r3, [r7, #7]
 8005178:	429a      	cmp	r2, r3
 800517a:	d091      	beq.n	80050a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
	...

08005188 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	4613      	mov	r3, r2
 8005194:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	88fa      	ldrh	r2, [r7, #6]
 80051a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	88fa      	ldrh	r2, [r7, #6]
 80051a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ba:	d10e      	bne.n	80051da <UART_Start_Receive_IT+0x52>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d105      	bne.n	80051d0 <UART_Start_Receive_IT+0x48>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80051ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051ce:	e02d      	b.n	800522c <UART_Start_Receive_IT+0xa4>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	22ff      	movs	r2, #255	; 0xff
 80051d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051d8:	e028      	b.n	800522c <UART_Start_Receive_IT+0xa4>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10d      	bne.n	80051fe <UART_Start_Receive_IT+0x76>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d104      	bne.n	80051f4 <UART_Start_Receive_IT+0x6c>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	22ff      	movs	r2, #255	; 0xff
 80051ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051f2:	e01b      	b.n	800522c <UART_Start_Receive_IT+0xa4>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	227f      	movs	r2, #127	; 0x7f
 80051f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051fc:	e016      	b.n	800522c <UART_Start_Receive_IT+0xa4>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005206:	d10d      	bne.n	8005224 <UART_Start_Receive_IT+0x9c>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d104      	bne.n	800521a <UART_Start_Receive_IT+0x92>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	227f      	movs	r2, #127	; 0x7f
 8005214:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005218:	e008      	b.n	800522c <UART_Start_Receive_IT+0xa4>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	223f      	movs	r2, #63	; 0x3f
 800521e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005222:	e003      	b.n	800522c <UART_Start_Receive_IT+0xa4>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2222      	movs	r2, #34	; 0x22
 8005238:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0201 	orr.w	r2, r2, #1
 8005248:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005252:	d107      	bne.n	8005264 <UART_Start_Receive_IT+0xdc>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d103      	bne.n	8005264 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4a0c      	ldr	r2, [pc, #48]	; (8005290 <UART_Start_Receive_IT+0x108>)
 8005260:	665a      	str	r2, [r3, #100]	; 0x64
 8005262:	e002      	b.n	800526a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4a0b      	ldr	r2, [pc, #44]	; (8005294 <UART_Start_Receive_IT+0x10c>)
 8005268:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005280:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	0800542d 	.word	0x0800542d
 8005294:	08005355 	.word	0x08005355

08005298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052ae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0201 	bic.w	r2, r2, #1
 80052be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d107      	bne.n	80052d8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0210 	bic.w	r2, r2, #16
 80052d6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b084      	sub	sp, #16
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f7ff fb5d 	bl	80049d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005338:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff fb3a 	bl	80049c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800534c:	bf00      	nop
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005362:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005368:	2b22      	cmp	r3, #34	; 0x22
 800536a:	d151      	bne.n	8005410 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005372:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005374:	89bb      	ldrh	r3, [r7, #12]
 8005376:	b2d9      	uxtb	r1, r3
 8005378:	89fb      	ldrh	r3, [r7, #14]
 800537a:	b2da      	uxtb	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005380:	400a      	ands	r2, r1
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005396:	b29b      	uxth	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d13a      	bne.n	8005424 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80053bc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0201 	bic.w	r2, r2, #1
 80053cc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d10f      	bne.n	8005402 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0210 	bic.w	r2, r2, #16
 80053f0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80053f8:	4619      	mov	r1, r3
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7ff faf4 	bl	80049e8 <HAL_UARTEx_RxEventCallback>
 8005400:	e002      	b.n	8005408 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f990 	bl	8005728 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800540e:	e009      	b.n	8005424 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	8b1b      	ldrh	r3, [r3, #24]
 8005416:	b29a      	uxth	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f042 0208 	orr.w	r2, r2, #8
 8005420:	b292      	uxth	r2, r2
 8005422:	831a      	strh	r2, [r3, #24]
}
 8005424:	bf00      	nop
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800543a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005440:	2b22      	cmp	r3, #34	; 0x22
 8005442:	d151      	bne.n	80054e8 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800544a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005450:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005452:	89ba      	ldrh	r2, [r7, #12]
 8005454:	89fb      	ldrh	r3, [r7, #14]
 8005456:	4013      	ands	r3, r2
 8005458:	b29a      	uxth	r2, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005462:	1c9a      	adds	r2, r3, #2
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d13a      	bne.n	80054fc <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005494:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0201 	bic.w	r2, r2, #1
 80054a4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2220      	movs	r2, #32
 80054aa:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d10f      	bne.n	80054da <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0210 	bic.w	r2, r2, #16
 80054c8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054d0:	4619      	mov	r1, r3
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff fa88 	bl	80049e8 <HAL_UARTEx_RxEventCallback>
 80054d8:	e002      	b.n	80054e0 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f924 	bl	8005728 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054e6:	e009      	b.n	80054fc <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	8b1b      	ldrh	r3, [r3, #24]
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 0208 	orr.w	r2, r2, #8
 80054f8:	b292      	uxth	r2, r2
 80054fa:	831a      	strh	r2, [r3, #24]
}
 80054fc:	bf00      	nop
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <Event_Init>:
	{ EVENT_SUB_PRINT_DEBUG, 		0, 0, 10, 		f_event_print_debug_handler},
	{ EVENT_SUB_COLLECT_DATA, 		1, 0, 30000, 	f_event_collect_handler},
};

void Event_Init(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
	sUartDebug.data = &uartDebugBuff[0];
 800551c:	4b05      	ldr	r3, [pc, #20]	; (8005534 <Event_Init+0x1c>)
 800551e:	4a06      	ldr	r2, [pc, #24]	; (8005538 <Event_Init+0x20>)
 8005520:	601a      	str	r2, [r3, #0]
	sUartDebug.length = 0;
 8005522:	4b04      	ldr	r3, [pc, #16]	; (8005534 <Event_Init+0x1c>)
 8005524:	2200      	movs	r2, #0
 8005526:	809a      	strh	r2, [r3, #4]
}
 8005528:	bf00      	nop
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	20000164 	.word	0x20000164
 8005538:	2000016c 	.word	0x2000016c

0800553c <EventTask>:

void EventTask(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
	CheckEventQueue();
 8005540:	f000 f802 	bl	8005548 <CheckEventQueue>
}
 8005544:	bf00      	nop
 8005546:	bd80      	pop	{r7, pc}

08005548 <CheckEventQueue>:

static void CheckEventQueue(void)
{
 8005548:	b590      	push	{r4, r7, lr}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800554e:	2300      	movs	r3, #0
 8005550:	71fb      	strb	r3, [r7, #7]

	for (i = 0; i < EVENT_SUB_END; i++)
 8005552:	2300      	movs	r3, #0
 8005554:	71fb      	strb	r3, [r7, #7]
 8005556:	e036      	b.n	80055c6 <CheckEventQueue+0x7e>
	{
		if (s_event_sub_handler[i].e_status == 1)
 8005558:	79fb      	ldrb	r3, [r7, #7]
 800555a:	4a1f      	ldr	r2, [pc, #124]	; (80055d8 <CheckEventQueue+0x90>)
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	4413      	add	r3, r2
 8005560:	3301      	adds	r3, #1
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d12b      	bne.n	80055c0 <CheckEventQueue+0x78>
		{
			if((s_event_sub_handler[i].e_systick == 0)||(HAL_GetTick() - s_event_sub_handler[i].e_systick  >=  s_event_sub_handler[i].e_period))
 8005568:	79fb      	ldrb	r3, [r7, #7]
 800556a:	4a1b      	ldr	r2, [pc, #108]	; (80055d8 <CheckEventQueue+0x90>)
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	4413      	add	r3, r2
 8005570:	3304      	adds	r3, #4
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d011      	beq.n	800559c <CheckEventQueue+0x54>
 8005578:	f7fb fe32 	bl	80011e0 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	4915      	ldr	r1, [pc, #84]	; (80055d8 <CheckEventQueue+0x90>)
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	440b      	add	r3, r1
 8005586:	3304      	adds	r3, #4
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	1ad2      	subs	r2, r2, r3
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	4912      	ldr	r1, [pc, #72]	; (80055d8 <CheckEventQueue+0x90>)
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	440b      	add	r3, r1
 8005594:	3308      	adds	r3, #8
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	429a      	cmp	r2, r3
 800559a:	d311      	bcc.n	80055c0 <CheckEventQueue+0x78>
			{
				s_event_sub_handler[i].e_systick = HAL_GetTick();
 800559c:	79fc      	ldrb	r4, [r7, #7]
 800559e:	f7fb fe1f 	bl	80011e0 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	490c      	ldr	r1, [pc, #48]	; (80055d8 <CheckEventQueue+0x90>)
 80055a6:	0123      	lsls	r3, r4, #4
 80055a8:	440b      	add	r3, r1
 80055aa:	3304      	adds	r3, #4
 80055ac:	601a      	str	r2, [r3, #0]
				s_event_sub_handler[i].e_function_handler(i);
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	4a09      	ldr	r2, [pc, #36]	; (80055d8 <CheckEventQueue+0x90>)
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	4413      	add	r3, r2
 80055b6:	330c      	adds	r3, #12
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	79fa      	ldrb	r2, [r7, #7]
 80055bc:	4610      	mov	r0, r2
 80055be:	4798      	blx	r3
	for (i = 0; i < EVENT_SUB_END; i++)
 80055c0:	79fb      	ldrb	r3, [r7, #7]
 80055c2:	3301      	adds	r3, #1
 80055c4:	71fb      	strb	r3, [r7, #7]
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d9c5      	bls.n	8005558 <CheckEventQueue+0x10>
			}
		}
	}
}
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd90      	pop	{r4, r7, pc}
 80055d6:	bf00      	nop
 80055d8:	2000000c 	.word	0x2000000c

080055dc <fevent_active>:

uint8_t fevent_active(sEvent_struct *event_struct, uint8_t event_name)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	460b      	mov	r3, r1
 80055e6:	70fb      	strb	r3, [r7, #3]
	// check input data
	event_struct[event_name].e_status = 1;
 80055e8:	78fb      	ldrb	r3, [r7, #3]
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	4413      	add	r3, r2
 80055f0:	2201      	movs	r2, #1
 80055f2:	705a      	strb	r2, [r3, #1]
	event_struct[event_name].e_systick = 0;
 80055f4:	78fb      	ldrb	r3, [r7, #3]
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	4413      	add	r3, r2
 80055fc:	2200      	movs	r2, #0
 80055fe:	605a      	str	r2, [r3, #4]

	// push to queue
	return 1;
 8005600:	2301      	movs	r3, #1
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <fevent_enable>:

uint8_t fevent_enable(sEvent_struct *event_struct, uint8_t event_name)
{
 800560e:	b590      	push	{r4, r7, lr}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	460b      	mov	r3, r1
 8005618:	70fb      	strb	r3, [r7, #3]
	// check input data
	event_struct[event_name].e_status = 1;
 800561a:	78fb      	ldrb	r3, [r7, #3]
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	4413      	add	r3, r2
 8005622:	2201      	movs	r2, #1
 8005624:	705a      	strb	r2, [r3, #1]
	event_struct[event_name].e_systick = HAL_GetTick();
 8005626:	78fb      	ldrb	r3, [r7, #3]
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	18d4      	adds	r4, r2, r3
 800562e:	f7fb fdd7 	bl	80011e0 <HAL_GetTick>
 8005632:	4603      	mov	r3, r0
 8005634:	6063      	str	r3, [r4, #4]

	// push to queue
	return 1;
 8005636:	2301      	movs	r3, #1
}
 8005638:	4618      	mov	r0, r3
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	bd90      	pop	{r4, r7, pc}

08005640 <fevent_disable>:

uint8_t fevent_disable(sEvent_struct *event_struct, uint8_t event_name)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	460b      	mov	r3, r1
 800564a:	70fb      	strb	r3, [r7, #3]
	// check input data
	event_struct[event_name].e_status = 0;
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	4413      	add	r3, r2
 8005654:	2200      	movs	r2, #0
 8005656:	705a      	strb	r2, [r3, #1]

	// reject cauz status = 0 (don't need status variable)
	return 1;
 8005658:	2301      	movs	r3, #1
}
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <f_event_blink_led1_handler>:


/* handler function */
static uint8_t f_event_blink_led1_handler(uint8_t event)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	4603      	mov	r3, r0
 8005670:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(PB12_GPIO_Port, PB12_Pin);
 8005672:	2102      	movs	r1, #2
 8005674:	4803      	ldr	r0, [pc, #12]	; (8005684 <f_event_blink_led1_handler+0x1c>)
 8005676:	f7fc ff9b 	bl	80025b0 <HAL_GPIO_TogglePin>

	return 1;
 800567a:	2301      	movs	r3, #1
}
 800567c:	4618      	mov	r0, r3
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	48000800 	.word	0x48000800

08005688 <f_event_blink_led2_handler>:

static uint8_t f_event_blink_led2_handler(uint8_t event)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(PB13_GPIO_Port, PB13_Pin);
 8005692:	2108      	movs	r1, #8
 8005694:	4805      	ldr	r0, [pc, #20]	; (80056ac <f_event_blink_led2_handler+0x24>)
 8005696:	f7fc ff8b 	bl	80025b0 <HAL_GPIO_TogglePin>
	HAL_IWDG_Refresh(&hiwdg);
 800569a:	4805      	ldr	r0, [pc, #20]	; (80056b0 <f_event_blink_led2_handler+0x28>)
 800569c:	f7fc ffe8 	bl	8002670 <HAL_IWDG_Refresh>
	return 1;
 80056a0:	2301      	movs	r3, #1
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	48000800 	.word	0x48000800
 80056b0:	20000450 	.word	0x20000450

080056b4 <f_event_blink_led3_handler>:

static uint8_t f_event_blink_led3_handler(uint8_t event)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(PB14_GPIO_Port, PB14_Pin);
 80056be:	2104      	movs	r1, #4
 80056c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056c4:	f7fc ff74 	bl	80025b0 <HAL_GPIO_TogglePin>

	return 1;
 80056c8:	2301      	movs	r3, #1
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <f_event_print_debug_handler>:
static uint8_t f_event_print_debug_handler(uint8_t event)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	71fb      	strb	r3, [r7, #7]
	fSend_String_to_UartSim(&uart_debug, (char *)sUartDebug.data);
 80056de:	4b08      	ldr	r3, [pc, #32]	; (8005700 <f_event_print_debug_handler+0x2c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4619      	mov	r1, r3
 80056e4:	4807      	ldr	r0, [pc, #28]	; (8005704 <f_event_print_debug_handler+0x30>)
 80056e6:	f000 fdc3 	bl	8006270 <fSend_String_to_UartSim>
	fevent_disable(s_event_sub_handler, event);
 80056ea:	79fb      	ldrb	r3, [r7, #7]
 80056ec:	4619      	mov	r1, r3
 80056ee:	4806      	ldr	r0, [pc, #24]	; (8005708 <f_event_print_debug_handler+0x34>)
 80056f0:	f7ff ffa6 	bl	8005640 <fevent_disable>
	return 1;
 80056f4:	2301      	movs	r3, #1
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	20000164 	.word	0x20000164
 8005704:	200005b8 	.word	0x200005b8
 8005708:	2000000c 	.word	0x2000000c

0800570c <f_event_collect_handler>:

static uint8_t f_event_collect_handler(uint8_t event)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	4603      	mov	r3, r0
 8005714:	71fb      	strb	r3, [r7, #7]
	M_PushMeterMessageToQueue(M_MESSAGE_OPEATION);
 8005716:	2000      	movs	r0, #0
 8005718:	f000 fa66 	bl	8005be8 <M_PushMeterMessageToQueue>

	return 1;
 800571c:	2301      	movs	r3, #1
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <HAL_UART_RxCpltCallback>:

#include "myDefine.h"

/* callback uart */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == uart_sim.Instance)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	4b25      	ldr	r3, [pc, #148]	; (80057cc <HAL_UART_RxCpltCallback+0xa4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	429a      	cmp	r2, r3
 800573a:	d11d      	bne.n	8005778 <HAL_UART_RxCpltCallback+0x50>
	{
		*(sUartSim.data+sUartSim.length) = sim_rx_buff[0];
 800573c:	4b24      	ldr	r3, [pc, #144]	; (80057d0 <HAL_UART_RxCpltCallback+0xa8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a23      	ldr	r2, [pc, #140]	; (80057d0 <HAL_UART_RxCpltCallback+0xa8>)
 8005742:	8892      	ldrh	r2, [r2, #4]
 8005744:	4413      	add	r3, r2
 8005746:	4a23      	ldr	r2, [pc, #140]	; (80057d4 <HAL_UART_RxCpltCallback+0xac>)
 8005748:	7812      	ldrb	r2, [r2, #0]
 800574a:	701a      	strb	r2, [r3, #0]
		sUartSim.length++;
 800574c:	4b20      	ldr	r3, [pc, #128]	; (80057d0 <HAL_UART_RxCpltCallback+0xa8>)
 800574e:	889b      	ldrh	r3, [r3, #4]
 8005750:	3301      	adds	r3, #1
 8005752:	b29a      	uxth	r2, r3
 8005754:	4b1e      	ldr	r3, [pc, #120]	; (80057d0 <HAL_UART_RxCpltCallback+0xa8>)
 8005756:	809a      	strh	r2, [r3, #4]
		if (sUartSim.length >= sizeof(uartSimBuffReceive))
 8005758:	4b1d      	ldr	r3, [pc, #116]	; (80057d0 <HAL_UART_RxCpltCallback+0xa8>)
 800575a:	889b      	ldrh	r3, [r3, #4]
 800575c:	2b63      	cmp	r3, #99	; 0x63
 800575e:	d902      	bls.n	8005766 <HAL_UART_RxCpltCallback+0x3e>
		{
			sUartSim.length = 0;
 8005760:	4b1b      	ldr	r3, [pc, #108]	; (80057d0 <HAL_UART_RxCpltCallback+0xa8>)
 8005762:	2200      	movs	r2, #0
 8005764:	809a      	strh	r2, [r3, #4]
		}
		HAL_UART_Receive_IT(&uart_sim, sim_rx_buff, 1);
 8005766:	2201      	movs	r2, #1
 8005768:	491a      	ldr	r1, [pc, #104]	; (80057d4 <HAL_UART_RxCpltCallback+0xac>)
 800576a:	4818      	ldr	r0, [pc, #96]	; (80057cc <HAL_UART_RxCpltCallback+0xa4>)
 800576c:	f7fe fee2 	bl	8004534 <HAL_UART_Receive_IT>
		fevent_enable(s_event_sim_handler, EVENT_SIM_UART_RECEIVE);
 8005770:	2103      	movs	r1, #3
 8005772:	4819      	ldr	r0, [pc, #100]	; (80057d8 <HAL_UART_RxCpltCallback+0xb0>)
 8005774:	f7ff ff4b 	bl	800560e <fevent_enable>
	}

	if (huart->Instance == uart_meter.Instance)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	4b17      	ldr	r3, [pc, #92]	; (80057dc <HAL_UART_RxCpltCallback+0xb4>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d11e      	bne.n	80057c2 <HAL_UART_RxCpltCallback+0x9a>
	{
		*(sUartMeter.data+sUartMeter.length) = meter_rx_buff[0];
 8005784:	4b16      	ldr	r3, [pc, #88]	; (80057e0 <HAL_UART_RxCpltCallback+0xb8>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a15      	ldr	r2, [pc, #84]	; (80057e0 <HAL_UART_RxCpltCallback+0xb8>)
 800578a:	8892      	ldrh	r2, [r2, #4]
 800578c:	4413      	add	r3, r2
 800578e:	4a15      	ldr	r2, [pc, #84]	; (80057e4 <HAL_UART_RxCpltCallback+0xbc>)
 8005790:	7812      	ldrb	r2, [r2, #0]
 8005792:	701a      	strb	r2, [r3, #0]
		sUartMeter.length++;
 8005794:	4b12      	ldr	r3, [pc, #72]	; (80057e0 <HAL_UART_RxCpltCallback+0xb8>)
 8005796:	889b      	ldrh	r3, [r3, #4]
 8005798:	3301      	adds	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	4b10      	ldr	r3, [pc, #64]	; (80057e0 <HAL_UART_RxCpltCallback+0xb8>)
 800579e:	809a      	strh	r2, [r3, #4]
		if (sUartMeter.length >= sizeof(uartMeterBuffReceive))
 80057a0:	4b0f      	ldr	r3, [pc, #60]	; (80057e0 <HAL_UART_RxCpltCallback+0xb8>)
 80057a2:	889b      	ldrh	r3, [r3, #4]
 80057a4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80057a8:	d302      	bcc.n	80057b0 <HAL_UART_RxCpltCallback+0x88>
		{
			sUartMeter.length = 0;
 80057aa:	4b0d      	ldr	r3, [pc, #52]	; (80057e0 <HAL_UART_RxCpltCallback+0xb8>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	809a      	strh	r2, [r3, #4]
		}
		HAL_UART_Receive_IT(&uart_meter, meter_rx_buff, 1);
 80057b0:	2201      	movs	r2, #1
 80057b2:	490c      	ldr	r1, [pc, #48]	; (80057e4 <HAL_UART_RxCpltCallback+0xbc>)
 80057b4:	4809      	ldr	r0, [pc, #36]	; (80057dc <HAL_UART_RxCpltCallback+0xb4>)
 80057b6:	f7fe febd 	bl	8004534 <HAL_UART_Receive_IT>
		fevent_enable(s_event_meter_handler, EVENT_METER_UART_RECEIVE);
 80057ba:	2103      	movs	r1, #3
 80057bc:	480a      	ldr	r0, [pc, #40]	; (80057e8 <HAL_UART_RxCpltCallback+0xc0>)
 80057be:	f7ff ff26 	bl	800560e <fevent_enable>
	}
}
 80057c2:	bf00      	nop
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	20000534 	.word	0x20000534
 80057d0:	200006cc 	.word	0x200006cc
 80057d4:	200003e4 	.word	0x200003e4
 80057d8:	200000f8 	.word	0x200000f8
 80057dc:	2000063c 	.word	0x2000063c
 80057e0:	200006c4 	.word	0x200006c4
 80057e4:	200002fc 	.word	0x200002fc
 80057e8:	20000078 	.word	0x20000078

080057ec <MeterInit>:
	//...
	{ M_ELSTER_CMD_END, 		NULL, 			0, meter_pack_message, NULL, 				meter_cmd_callback_success, meter_cmd_callback_failure},
};

void MeterInit(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
	sUartMeter.data = &uartMeterBuffReceive[0];
 80057f0:	4b09      	ldr	r3, [pc, #36]	; (8005818 <MeterInit+0x2c>)
 80057f2:	4a0a      	ldr	r2, [pc, #40]	; (800581c <MeterInit+0x30>)
 80057f4:	601a      	str	r2, [r3, #0]
	sUartMeter.length = 0;
 80057f6:	4b08      	ldr	r3, [pc, #32]	; (8005818 <MeterInit+0x2c>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	809a      	strh	r2, [r3, #4]

	RS485_DISABLE;
 80057fc:	2201      	movs	r2, #1
 80057fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005806:	f7fc febb 	bl	8002580 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&uart_meter, meter_rx_buff, 1);
 800580a:	2201      	movs	r2, #1
 800580c:	4904      	ldr	r1, [pc, #16]	; (8005820 <MeterInit+0x34>)
 800580e:	4805      	ldr	r0, [pc, #20]	; (8005824 <MeterInit+0x38>)
 8005810:	f7fe fe90 	bl	8004534 <HAL_UART_Receive_IT>
}
 8005814:	bf00      	nop
 8005816:	bd80      	pop	{r7, pc}
 8005818:	200006c4 	.word	0x200006c4
 800581c:	200001d0 	.word	0x200001d0
 8005820:	200002fc 	.word	0x200002fc
 8005824:	2000063c 	.word	0x2000063c

08005828 <MeterTask>:

void MeterTask(void)
{
 8005828:	b590      	push	{r4, r7, lr}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800582e:	2300      	movs	r3, #0
 8005830:	71fb      	strb	r3, [r7, #7]

	for (i = 0; i < EVENT_METER_END; i++)
 8005832:	2300      	movs	r3, #0
 8005834:	71fb      	strb	r3, [r7, #7]
 8005836:	e036      	b.n	80058a6 <MeterTask+0x7e>
	{
		if (s_event_meter_handler[i].e_status == 1)
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	4a1f      	ldr	r2, [pc, #124]	; (80058b8 <MeterTask+0x90>)
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	4413      	add	r3, r2
 8005840:	3301      	adds	r3, #1
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d12b      	bne.n	80058a0 <MeterTask+0x78>
		{
			if((s_event_meter_handler[i].e_systick == 0)||(HAL_GetTick() - s_event_meter_handler[i].e_systick  >=  s_event_meter_handler[i].e_period))
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	4a1b      	ldr	r2, [pc, #108]	; (80058b8 <MeterTask+0x90>)
 800584c:	011b      	lsls	r3, r3, #4
 800584e:	4413      	add	r3, r2
 8005850:	3304      	adds	r3, #4
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d011      	beq.n	800587c <MeterTask+0x54>
 8005858:	f7fb fcc2 	bl	80011e0 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	79fb      	ldrb	r3, [r7, #7]
 8005860:	4915      	ldr	r1, [pc, #84]	; (80058b8 <MeterTask+0x90>)
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	440b      	add	r3, r1
 8005866:	3304      	adds	r3, #4
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	1ad2      	subs	r2, r2, r3
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	4912      	ldr	r1, [pc, #72]	; (80058b8 <MeterTask+0x90>)
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	440b      	add	r3, r1
 8005874:	3308      	adds	r3, #8
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d311      	bcc.n	80058a0 <MeterTask+0x78>
			{
				s_event_meter_handler[i].e_systick = HAL_GetTick();
 800587c:	79fc      	ldrb	r4, [r7, #7]
 800587e:	f7fb fcaf 	bl	80011e0 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	490c      	ldr	r1, [pc, #48]	; (80058b8 <MeterTask+0x90>)
 8005886:	0123      	lsls	r3, r4, #4
 8005888:	440b      	add	r3, r1
 800588a:	3304      	adds	r3, #4
 800588c:	601a      	str	r2, [r3, #0]
				s_event_meter_handler[i].e_function_handler(i);
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	4a09      	ldr	r2, [pc, #36]	; (80058b8 <MeterTask+0x90>)
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	4413      	add	r3, r2
 8005896:	330c      	adds	r3, #12
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	79fa      	ldrb	r2, [r7, #7]
 800589c:	4610      	mov	r0, r2
 800589e:	4798      	blx	r3
	for (i = 0; i < EVENT_METER_END; i++)
 80058a0:	79fb      	ldrb	r3, [r7, #7]
 80058a2:	3301      	adds	r3, #1
 80058a4:	71fb      	strb	r3, [r7, #7]
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d9c5      	bls.n	8005838 <MeterTask+0x10>
			}
		}
	}
}
 80058ac:	bf00      	nop
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd90      	pop	{r4, r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20000078 	.word	0x20000078

080058bc <fevent_meter_cmd_send_handler>:

static uint8_t fevent_meter_cmd_send_handler(uint8_t event)
{
 80058bc:	b590      	push	{r4, r7, lr}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	4603      	mov	r3, r0
 80058c4:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0;
 80058c6:	2300      	movs	r3, #0
 80058c8:	73fb      	strb	r3, [r7, #15]

	if (numRetry < METER_CMD_RETRY)
 80058ca:	4b2f      	ldr	r3, [pc, #188]	; (8005988 <fevent_meter_cmd_send_handler+0xcc>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d84d      	bhi.n	800596e <fevent_meter_cmd_send_handler+0xb2>
	{
		cmd = M_GetMeterCmdFromQueue(0);
 80058d2:	2000      	movs	r0, #0
 80058d4:	f000 f920 	bl	8005b18 <M_GetMeterCmdFromQueue>
 80058d8:	4603      	mov	r3, r0
 80058da:	73fb      	strb	r3, [r7, #15]
		if (cmd >= M_ELSTER_CMD_END)
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
 80058de:	2b15      	cmp	r3, #21
 80058e0:	d908      	bls.n	80058f4 <fevent_meter_cmd_send_handler+0x38>
		{
			fevent_disable(s_event_meter_handler, event);
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	4619      	mov	r1, r3
 80058e6:	4829      	ldr	r0, [pc, #164]	; (800598c <fevent_meter_cmd_send_handler+0xd0>)
 80058e8:	f7ff feaa 	bl	8005640 <fevent_disable>
			fPushSimStepToQueue(SIM_CMD_TCP_SEND_MESSAGE);
 80058ec:	2014      	movs	r0, #20
 80058ee:	f000 fc47 	bl	8006180 <fPushSimStepToQueue>
 80058f2:	e043      	b.n	800597c <fevent_meter_cmd_send_handler+0xc0>
		}
		else
		{
			numRetry++;
 80058f4:	4b24      	ldr	r3, [pc, #144]	; (8005988 <fevent_meter_cmd_send_handler+0xcc>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	3301      	adds	r3, #1
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	4b22      	ldr	r3, [pc, #136]	; (8005988 <fevent_meter_cmd_send_handler+0xcc>)
 80058fe:	701a      	strb	r2, [r3, #0]
			// pack data
			aElsterStep[cmd].pack_data(aElsterStep[cmd].m_cmd_buff, a_elster_cmd_buff, aElsterStep[cmd].m_cmd_length);
 8005900:	7bfa      	ldrb	r2, [r7, #15]
 8005902:	4923      	ldr	r1, [pc, #140]	; (8005990 <fevent_meter_cmd_send_handler+0xd4>)
 8005904:	4613      	mov	r3, r2
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	1a9b      	subs	r3, r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	440b      	add	r3, r1
 800590e:	330c      	adds	r3, #12
 8005910:	681c      	ldr	r4, [r3, #0]
 8005912:	7bfa      	ldrb	r2, [r7, #15]
 8005914:	491e      	ldr	r1, [pc, #120]	; (8005990 <fevent_meter_cmd_send_handler+0xd4>)
 8005916:	4613      	mov	r3, r2
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	1a9b      	subs	r3, r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	440b      	add	r3, r1
 8005920:	3304      	adds	r3, #4
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	7bfa      	ldrb	r2, [r7, #15]
 8005926:	491a      	ldr	r1, [pc, #104]	; (8005990 <fevent_meter_cmd_send_handler+0xd4>)
 8005928:	4613      	mov	r3, r2
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	1a9b      	subs	r3, r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	440b      	add	r3, r1
 8005932:	3308      	adds	r3, #8
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	4916      	ldr	r1, [pc, #88]	; (8005994 <fevent_meter_cmd_send_handler+0xd8>)
 800593a:	47a0      	blx	r4
			HAL_UART_Transmit(&uart_meter, a_elster_cmd_buff, aElsterStep[cmd].m_cmd_length, 1000);
 800593c:	7bfa      	ldrb	r2, [r7, #15]
 800593e:	4914      	ldr	r1, [pc, #80]	; (8005990 <fevent_meter_cmd_send_handler+0xd4>)
 8005940:	4613      	mov	r3, r2
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	1a9b      	subs	r3, r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	440b      	add	r3, r1
 800594a:	3308      	adds	r3, #8
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	b29a      	uxth	r2, r3
 8005950:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005954:	490f      	ldr	r1, [pc, #60]	; (8005994 <fevent_meter_cmd_send_handler+0xd8>)
 8005956:	4810      	ldr	r0, [pc, #64]	; (8005998 <fevent_meter_cmd_send_handler+0xdc>)
 8005958:	f7fe fd58 	bl	800440c <HAL_UART_Transmit>
			s_event_meter_handler[event].e_period = METER_CMD_TIMEOUT;
 800595c:	79fb      	ldrb	r3, [r7, #7]
 800595e:	4a0b      	ldr	r2, [pc, #44]	; (800598c <fevent_meter_cmd_send_handler+0xd0>)
 8005960:	011b      	lsls	r3, r3, #4
 8005962:	4413      	add	r3, r2
 8005964:	3308      	adds	r3, #8
 8005966:	f242 7210 	movw	r2, #10000	; 0x2710
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	e006      	b.n	800597c <fevent_meter_cmd_send_handler+0xc0>
		}
	}
	else
	{
		numRetry = 0;
 800596e:	4b06      	ldr	r3, [pc, #24]	; (8005988 <fevent_meter_cmd_send_handler+0xcc>)
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]
		fevent_active(s_event_meter_handler, EVENT_METER_CMD_SEND_TIMEOUT);
 8005974:	2102      	movs	r1, #2
 8005976:	4805      	ldr	r0, [pc, #20]	; (800598c <fevent_meter_cmd_send_handler+0xd0>)
 8005978:	f7ff fe30 	bl	80055dc <fevent_active>
	}

	return 1;
 800597c:	2301      	movs	r3, #1
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	bd90      	pop	{r4, r7, pc}
 8005986:	bf00      	nop
 8005988:	200002fd 	.word	0x200002fd
 800598c:	20000078 	.word	0x20000078
 8005990:	08006878 	.word	0x08006878
 8005994:	20000300 	.word	0x20000300
 8005998:	2000063c 	.word	0x2000063c

0800599c <fevent_meter_cmd_send_OK_handler>:
static uint8_t fevent_meter_cmd_send_OK_handler(uint8_t event)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	4603      	mov	r3, r0
 80059a4:	71fb      	strb	r3, [r7, #7]
	numRetry = 0;
 80059a6:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <fevent_meter_cmd_send_OK_handler+0x3c>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	701a      	strb	r2, [r3, #0]
	fevent_disable(s_event_meter_handler, event);
 80059ac:	79fb      	ldrb	r3, [r7, #7]
 80059ae:	4619      	mov	r1, r3
 80059b0:	480a      	ldr	r0, [pc, #40]	; (80059dc <fevent_meter_cmd_send_OK_handler+0x40>)
 80059b2:	f7ff fe45 	bl	8005640 <fevent_disable>

	s_event_meter_handler[EVENT_METER_CMD_SEND].e_period = METER_CMD_FREQ;
 80059b6:	4b09      	ldr	r3, [pc, #36]	; (80059dc <fevent_meter_cmd_send_OK_handler+0x40>)
 80059b8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80059bc:	609a      	str	r2, [r3, #8]
	s_event_meter_handler[EVENT_METER_CMD_SEND].e_systick = HAL_GetTick();
 80059be:	f7fb fc0f 	bl	80011e0 <HAL_GetTick>
 80059c2:	4603      	mov	r3, r0
 80059c4:	4a05      	ldr	r2, [pc, #20]	; (80059dc <fevent_meter_cmd_send_OK_handler+0x40>)
 80059c6:	6053      	str	r3, [r2, #4]

	M_GetMeterCmdFromQueue(1);
 80059c8:	2001      	movs	r0, #1
 80059ca:	f000 f8a5 	bl	8005b18 <M_GetMeterCmdFromQueue>

	return 1;
 80059ce:	2301      	movs	r3, #1
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	200002fd 	.word	0x200002fd
 80059dc:	20000078 	.word	0x20000078

080059e0 <fevent_meter_cmd_send_Timeout_handler>:

static uint8_t fevent_meter_cmd_send_Timeout_handler(uint8_t event)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	4603      	mov	r3, r0
 80059e8:	71fb      	strb	r3, [r7, #7]
	uint8_t meter_step = 0;
 80059ea:	2300      	movs	r3, #0
 80059ec:	73fb      	strb	r3, [r7, #15]

	fevent_disable(s_event_meter_handler, event);
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	4619      	mov	r1, r3
 80059f2:	480a      	ldr	r0, [pc, #40]	; (8005a1c <fevent_meter_cmd_send_Timeout_handler+0x3c>)
 80059f4:	f7ff fe24 	bl	8005640 <fevent_disable>
	meter_step = M_GetMeterCmdFromQueue(0);
 80059f8:	2000      	movs	r0, #0
 80059fa:	f000 f88d 	bl	8005b18 <M_GetMeterCmdFromQueue>
 80059fe:	4603      	mov	r3, r0
 8005a00:	73fb      	strb	r3, [r7, #15]

//	if (meter_step < M_ELSTER_CMD_END)
//	{
		M_ClearMeterStepQueue();
 8005a02:	f000 f879 	bl	8005af8 <M_ClearMeterStepQueue>
		meter_step = M_ELSTER_CMD_HAND_1;
 8005a06:	2300      	movs	r3, #0
 8005a08:	73fb      	strb	r3, [r7, #15]
		M_PushMeterCmdToQueue(meter_step);
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 f8a1 	bl	8005b54 <M_PushMeterCmdToQueue>
//	}

	return 1;
 8005a12:	2301      	movs	r3, #1
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	20000078 	.word	0x20000078

08005a20 <Meter_Check_Response>:

static uint8_t Meter_Check_Response(uint8_t meter_step)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	4603      	mov	r3, r0
 8005a28:	71fb      	strb	r3, [r7, #7]
	char *p = NULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]

	if (meter_step < M_ELSTER_CMD_END)
 8005a2e:	79fb      	ldrb	r3, [r7, #7]
 8005a30:	2b15      	cmp	r3, #21
 8005a32:	d822      	bhi.n	8005a7a <Meter_Check_Response+0x5a>
	{
		p = strstr((char*)sUartMeter.data, (char*)aElsterStep[meter_step].m_cmd_response);
 8005a34:	4b1f      	ldr	r3, [pc, #124]	; (8005ab4 <Meter_Check_Response+0x94>)
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	79fa      	ldrb	r2, [r7, #7]
 8005a3a:	491f      	ldr	r1, [pc, #124]	; (8005ab8 <Meter_Check_Response+0x98>)
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	1a9b      	subs	r3, r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	440b      	add	r3, r1
 8005a46:	3310      	adds	r3, #16
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	f000 fce8 	bl	8006420 <strstr>
 8005a50:	60f8      	str	r0, [r7, #12]
		if (p != NULL)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d010      	beq.n	8005a7a <Meter_Check_Response+0x5a>
		{
			fevent_active(s_event_meter_handler, EVENT_METER_CMD_SEND_OK);
 8005a58:	2101      	movs	r1, #1
 8005a5a:	4818      	ldr	r0, [pc, #96]	; (8005abc <Meter_Check_Response+0x9c>)
 8005a5c:	f7ff fdbe 	bl	80055dc <fevent_active>
			aElsterStep[meter_step].callback_success(sUartMeter.data);
 8005a60:	79fa      	ldrb	r2, [r7, #7]
 8005a62:	4915      	ldr	r1, [pc, #84]	; (8005ab8 <Meter_Check_Response+0x98>)
 8005a64:	4613      	mov	r3, r2
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	3314      	adds	r3, #20
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a10      	ldr	r2, [pc, #64]	; (8005ab4 <Meter_Check_Response+0x94>)
 8005a74:	6812      	ldr	r2, [r2, #0]
 8005a76:	4610      	mov	r0, r2
 8005a78:	4798      	blx	r3
		}
	}
	memcpy(uartDebugBuff, uartMeterBuffReceive, sizeof(uartMeterBuffReceive));
 8005a7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005a7e:	4910      	ldr	r1, [pc, #64]	; (8005ac0 <Meter_Check_Response+0xa0>)
 8005a80:	4810      	ldr	r0, [pc, #64]	; (8005ac4 <Meter_Check_Response+0xa4>)
 8005a82:	f000 fcb7 	bl	80063f4 <memcpy>
	memset(&uartMeterBuffReceive[0], 0, sizeof(uartMeterBuffReceive));
 8005a86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	480c      	ldr	r0, [pc, #48]	; (8005ac0 <Meter_Check_Response+0xa0>)
 8005a8e:	f000 fcbf 	bl	8006410 <memset>
	sUartMeter.length = 0;
 8005a92:	4b08      	ldr	r3, [pc, #32]	; (8005ab4 <Meter_Check_Response+0x94>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	809a      	strh	r2, [r3, #4]
	fevent_active(s_event_sub_handler, EVENT_SUB_PRINT_DEBUG);
 8005a98:	2103      	movs	r1, #3
 8005a9a:	480b      	ldr	r0, [pc, #44]	; (8005ac8 <Meter_Check_Response+0xa8>)
 8005a9c:	f7ff fd9e 	bl	80055dc <fevent_active>
	fevent_disable(s_event_meter_handler, EVENT_METER_UART_RECEIVE);
 8005aa0:	2103      	movs	r1, #3
 8005aa2:	4806      	ldr	r0, [pc, #24]	; (8005abc <Meter_Check_Response+0x9c>)
 8005aa4:	f7ff fdcc 	bl	8005640 <fevent_disable>


	return 1;
 8005aa8:	2301      	movs	r3, #1
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	200006c4 	.word	0x200006c4
 8005ab8:	08006878 	.word	0x08006878
 8005abc:	20000078 	.word	0x20000078
 8005ac0:	200001d0 	.word	0x200001d0
 8005ac4:	2000016c 	.word	0x2000016c
 8005ac8:	2000000c 	.word	0x2000000c

08005acc <fevent_meter_uart_receive_handler>:

static uint8_t fevent_meter_uart_receive_handler(uint8_t event)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t meter_step = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	73fb      	strb	r3, [r7, #15]

	meter_step = M_GetMeterCmdFromQueue(0);
 8005ada:	2000      	movs	r0, #0
 8005adc:	f000 f81c 	bl	8005b18 <M_GetMeterCmdFromQueue>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	73fb      	strb	r3, [r7, #15]
	Meter_Check_Response(meter_step);
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7ff ff9a 	bl	8005a20 <Meter_Check_Response>

	return 1;
 8005aec:	2301      	movs	r3, #1
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <M_ClearMeterStepQueue>:

static uint8_t M_ClearMeterStepQueue(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
	if (Q_clear_queue(&QueueMeterCmd) == 0)
 8005afc:	4805      	ldr	r0, [pc, #20]	; (8005b14 <M_ClearMeterStepQueue+0x1c>)
 8005afe:	f000 f995 	bl	8005e2c <Q_clear_queue>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <M_ClearMeterStepQueue+0x14>
		return 0;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	e000      	b.n	8005b0e <M_ClearMeterStepQueue+0x16>

	return 1;
 8005b0c:	2301      	movs	r3, #1
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	200000d0 	.word	0x200000d0

08005b18 <M_GetMeterCmdFromQueue>:
/* QueueMeterCmd */
static uint8_t M_GetMeterCmdFromQueue(uint8_t Type)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	73fb      	strb	r3, [r7, #15]

	if (Q_get_number_items(&QueueMeterCmd) == 0)
 8005b26:	480a      	ldr	r0, [pc, #40]	; (8005b50 <M_GetMeterCmdFromQueue+0x38>)
 8005b28:	f000 f992 	bl	8005e50 <Q_get_number_items>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <M_GetMeterCmdFromQueue+0x1e>
		return M_ELSTER_CMD_END;
 8005b32:	2316      	movs	r3, #22
 8005b34:	e007      	b.n	8005b46 <M_GetMeterCmdFromQueue+0x2e>

	cmd = Q_get_data_from_queue(&QueueMeterCmd, Type);
 8005b36:	79fb      	ldrb	r3, [r7, #7]
 8005b38:	4619      	mov	r1, r3
 8005b3a:	4805      	ldr	r0, [pc, #20]	; (8005b50 <M_GetMeterCmdFromQueue+0x38>)
 8005b3c:	f000 f944 	bl	8005dc8 <Q_get_data_from_queue>
 8005b40:	4603      	mov	r3, r0
 8005b42:	73fb      	strb	r3, [r7, #15]

	return cmd;
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	200000d0 	.word	0x200000d0

08005b54 <M_PushMeterCmdToQueue>:

static uint8_t M_PushMeterCmdToQueue(uint8_t cmd)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	71fb      	strb	r3, [r7, #7]
	if (cmd >= M_ELSTER_CMD_END)
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	2b15      	cmp	r3, #21
 8005b62:	d901      	bls.n	8005b68 <M_PushMeterCmdToQueue+0x14>
		return 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	e012      	b.n	8005b8e <M_PushMeterCmdToQueue+0x3a>

	if (Q_push_data_to_queue(&QueueMeterCmd, cmd) == 0)
 8005b68:	79fb      	ldrb	r3, [r7, #7]
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	480a      	ldr	r0, [pc, #40]	; (8005b98 <M_PushMeterCmdToQueue+0x44>)
 8005b6e:	f000 f8fe 	bl	8005d6e <Q_push_data_to_queue>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <M_PushMeterCmdToQueue+0x28>
		return 0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e008      	b.n	8005b8e <M_PushMeterCmdToQueue+0x3a>

	if (s_event_meter_handler[EVENT_METER_CMD_SEND].e_status == 0)
 8005b7c:	4b07      	ldr	r3, [pc, #28]	; (8005b9c <M_PushMeterCmdToQueue+0x48>)
 8005b7e:	785b      	ldrb	r3, [r3, #1]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d103      	bne.n	8005b8c <M_PushMeterCmdToQueue+0x38>
		fevent_active(s_event_meter_handler, EVENT_METER_CMD_SEND);
 8005b84:	2100      	movs	r1, #0
 8005b86:	4805      	ldr	r0, [pc, #20]	; (8005b9c <M_PushMeterCmdToQueue+0x48>)
 8005b88:	f7ff fd28 	bl	80055dc <fevent_active>

	return 1;
 8005b8c:	2301      	movs	r3, #1
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	200000d0 	.word	0x200000d0
 8005b9c:	20000078 	.word	0x20000078

08005ba0 <M_PushMeterCmdBlockToQueue>:

uint8_t M_PushMeterCmdBlockToQueue(uint8_t *block_cmd_step, uint8_t size)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8005bac:	2300      	movs	r3, #0
 8005bae:	73fb      	strb	r3, [r7, #15]

	for (i = 0; i < size; i++)
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	73fb      	strb	r3, [r7, #15]
 8005bb4:	e00e      	b.n	8005bd4 <M_PushMeterCmdBlockToQueue+0x34>
	{
		if (M_PushMeterCmdToQueue(block_cmd_step[i]) == 0)
 8005bb6:	7bfb      	ldrb	r3, [r7, #15]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	4413      	add	r3, r2
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7ff ffc8 	bl	8005b54 <M_PushMeterCmdToQueue>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <M_PushMeterCmdBlockToQueue+0x2e>
			return 0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	e007      	b.n	8005bde <M_PushMeterCmdBlockToQueue+0x3e>
	for (i = 0; i < size; i++)
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	73fb      	strb	r3, [r7, #15]
 8005bd4:	7bfa      	ldrb	r2, [r7, #15]
 8005bd6:	78fb      	ldrb	r3, [r7, #3]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d3ec      	bcc.n	8005bb6 <M_PushMeterCmdBlockToQueue+0x16>
	}

	return 1;
 8005bdc:	2301      	movs	r3, #1
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <M_PushMeterMessageToQueue>:

/* QueueMeterMessage */
uint8_t M_PushMeterMessageToQueue(uint8_t meter_message)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	71fb      	strb	r3, [r7, #7]
	if (Q_push_data_to_queue(&QueueMeterMessage, meter_message) == 0)
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4808      	ldr	r0, [pc, #32]	; (8005c18 <M_PushMeterMessageToQueue+0x30>)
 8005bf8:	f000 f8b9 	bl	8005d6e <Q_push_data_to_queue>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <M_PushMeterMessageToQueue+0x1e>
		return 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	e004      	b.n	8005c10 <M_PushMeterMessageToQueue+0x28>

	fevent_active(s_event_meter_handler, EVENT_METER_READ_MESSAGE);
 8005c06:	2104      	movs	r1, #4
 8005c08:	4804      	ldr	r0, [pc, #16]	; (8005c1c <M_PushMeterMessageToQueue+0x34>)
 8005c0a:	f7ff fce7 	bl	80055dc <fevent_active>

	return 1;
 8005c0e:	2301      	movs	r3, #1
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	200000d8 	.word	0x200000d8
 8005c1c:	20000078 	.word	0x20000078

08005c20 <M_GetMeterMessageFromQueue>:

static uint8_t M_GetMeterMessageFromQueue(uint8_t Type)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	4603      	mov	r3, r0
 8005c28:	71fb      	strb	r3, [r7, #7]
	uint8_t message = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	73fb      	strb	r3, [r7, #15]

	if (Q_get_number_items(&QueueMeterMessage) == 0)
 8005c2e:	480a      	ldr	r0, [pc, #40]	; (8005c58 <M_GetMeterMessageFromQueue+0x38>)
 8005c30:	f000 f90e 	bl	8005e50 <Q_get_number_items>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <M_GetMeterMessageFromQueue+0x1e>
		return M_MESSAGE_END;
 8005c3a:	2304      	movs	r3, #4
 8005c3c:	e007      	b.n	8005c4e <M_GetMeterMessageFromQueue+0x2e>

	message = Q_get_data_from_queue(&QueueMeterMessage, Type);
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	4619      	mov	r1, r3
 8005c42:	4805      	ldr	r0, [pc, #20]	; (8005c58 <M_GetMeterMessageFromQueue+0x38>)
 8005c44:	f000 f8c0 	bl	8005dc8 <Q_get_data_from_queue>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	73fb      	strb	r3, [r7, #15]

	return message;
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	200000d8 	.word	0x200000d8

08005c5c <fevent_meter_read_message_handler>:

static uint8_t fevent_meter_read_message_handler(uint8_t event)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	4603      	mov	r3, r0
 8005c64:	71fb      	strb	r3, [r7, #7]
	uint8_t message = 0;
 8005c66:	2300      	movs	r3, #0
 8005c68:	73fb      	strb	r3, [r7, #15]


	message = M_GetMeterMessageFromQueue(1);
 8005c6a:	2001      	movs	r0, #1
 8005c6c:	f7ff ffd8 	bl	8005c20 <M_GetMeterMessageFromQueue>
 8005c70:	4603      	mov	r3, r0
 8005c72:	73fb      	strb	r3, [r7, #15]
	switch (message)
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d817      	bhi.n	8005caa <fevent_meter_read_message_handler+0x4e>
 8005c7a:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <fevent_meter_read_message_handler+0x24>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005c95 	.word	0x08005c95
 8005c84:	08005cab 	.word	0x08005cab
 8005c88:	08005cab 	.word	0x08005cab
 8005c8c:	08005cab 	.word	0x08005cab
 8005c90:	08005c9f 	.word	0x08005c9f
	{
	case M_MESSAGE_OPEATION:
		M_PushMeterCmdBlockToQueue(a_MeterStepBlockGetID, sizeof(a_MeterStepBlockGetID));
 8005c94:	2115      	movs	r1, #21
 8005c96:	4808      	ldr	r0, [pc, #32]	; (8005cb8 <fevent_meter_read_message_handler+0x5c>)
 8005c98:	f7ff ff82 	bl	8005ba0 <M_PushMeterCmdBlockToQueue>
		break;
 8005c9c:	e006      	b.n	8005cac <fevent_meter_read_message_handler+0x50>
	case M_MESSAGE_LOAD_PROFILE:
		break;
	case M_MESSAGE_HISTORICAL:
		break;
	case M_MESSAGE_END:
		fevent_disable(s_event_meter_handler, event);
 8005c9e:	79fb      	ldrb	r3, [r7, #7]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4806      	ldr	r0, [pc, #24]	; (8005cbc <fevent_meter_read_message_handler+0x60>)
 8005ca4:	f7ff fccc 	bl	8005640 <fevent_disable>
		break;
 8005ca8:	e000      	b.n	8005cac <fevent_meter_read_message_handler+0x50>
	default:
		break;
 8005caa:	bf00      	nop
	}

	return 1;
 8005cac:	2301      	movs	r3, #1
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000060 	.word	0x20000060
 8005cbc:	20000078 	.word	0x20000078

08005cc0 <Copy_buff>:


/* */

uint8_t Copy_buff(const uint8_t *in_buff, uint8_t *out_buff, uint8_t length)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	75fb      	strb	r3, [r7, #23]

	for (i = 0; i < length; i++)
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	75fb      	strb	r3, [r7, #23]
 8005cd6:	e00d      	b.n	8005cf4 <Copy_buff+0x34>
	{
		out_buff[i] = in_buff[i]&0x7F; // 7 bit data and even parity
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4413      	add	r3, r2
 8005cde:	781a      	ldrb	r2, [r3, #0]
 8005ce0:	7dfb      	ldrb	r3, [r7, #23]
 8005ce2:	68b9      	ldr	r1, [r7, #8]
 8005ce4:	440b      	add	r3, r1
 8005ce6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cea:	b2d2      	uxtb	r2, r2
 8005cec:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < length; i++)
 8005cee:	7dfb      	ldrb	r3, [r7, #23]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	75fb      	strb	r3, [r7, #23]
 8005cf4:	7dfa      	ldrb	r2, [r7, #23]
 8005cf6:	79fb      	ldrb	r3, [r7, #7]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d3ed      	bcc.n	8005cd8 <Copy_buff+0x18>
	}

	return i;
 8005cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	371c      	adds	r7, #28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <meter_pack_message>:

static uint8_t meter_pack_message(const uint8_t *in_buff, uint8_t *out_buff, uint8_t length)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	4613      	mov	r3, r2
 8005d16:	71fb      	strb	r3, [r7, #7]
	Copy_buff(in_buff, out_buff, length);
 8005d18:	79fb      	ldrb	r3, [r7, #7]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7ff ffce 	bl	8005cc0 <Copy_buff>

	return 1;
 8005d24:	2301      	movs	r3, #1
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <meter_cmd_callback_success>:

static uint8_t meter_cmd_callback_success(uint8_t *buff)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
	if (buff == NULL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <meter_cmd_callback_success+0x12>
		return 0;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e000      	b.n	8005d42 <meter_cmd_callback_success+0x14>

	return 1;
 8005d40:	2301      	movs	r3, #1
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <meter_cmd_callback_failure>:

static uint8_t meter_cmd_callback_failure(uint8_t *buff)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
	if (buff == NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <meter_cmd_callback_failure+0x12>
		return 0;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	e000      	b.n	8005d62 <meter_cmd_callback_failure+0x14>

	return 1;
 8005d60:	2301      	movs	r3, #1
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <Q_push_data_to_queue>:
};



uint8_t Q_push_data_to_queue(sQueue_Struct_TypeDef *sQueue, uint8_t value)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	460b      	mov	r3, r1
 8005d78:	70fb      	strb	r3, [r7, #3]
	if (sQueue->number >= QUEUE_SIZE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	78db      	ldrb	r3, [r3, #3]
 8005d7e:	2b1d      	cmp	r3, #29
 8005d80:	d901      	bls.n	8005d86 <Q_push_data_to_queue+0x18>
		return 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	e01a      	b.n	8005dbc <Q_push_data_to_queue+0x4e>
	*(sQueue->address + sQueue->head) = value;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	7852      	ldrb	r2, [r2, #1]
 8005d8e:	4413      	add	r3, r2
 8005d90:	78fa      	ldrb	r2, [r7, #3]
 8005d92:	701a      	strb	r2, [r3, #0]

	sQueue->number += 1;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	78db      	ldrb	r3, [r3, #3]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	70da      	strb	r2, [r3, #3]
	sQueue->head += 1;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	785b      	ldrb	r3, [r3, #1]
 8005da4:	3301      	adds	r3, #1
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	705a      	strb	r2, [r3, #1]
	if (sQueue->head >= QUEUE_SIZE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	2b1d      	cmp	r3, #29
 8005db2:	d902      	bls.n	8005dba <Q_push_data_to_queue+0x4c>
		sQueue->head = 0;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	705a      	strb	r2, [r3, #1]

	return 1;
 8005dba:	2301      	movs	r3, #1
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <Q_get_data_from_queue>:

uint8_t Q_get_data_from_queue(sQueue_Struct_TypeDef *sQueue, uint8_t Type)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	73fb      	strb	r3, [r7, #15]

	if (sQueue->number == 0)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	78db      	ldrb	r3, [r3, #3]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <Q_get_data_from_queue+0x1c>
			return 0;
 8005de0:	2300      	movs	r3, #0
 8005de2:	e01d      	b.n	8005e20 <Q_get_data_from_queue+0x58>
	value = *(sQueue->address + sQueue->tail);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	7892      	ldrb	r2, [r2, #2]
 8005dec:	4413      	add	r3, r2
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	73fb      	strb	r3, [r7, #15]
	if (Type > 0) // clear
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d012      	beq.n	8005e1e <Q_get_data_from_queue+0x56>
	{
		sQueue->number -= 1;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	78db      	ldrb	r3, [r3, #3]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	70da      	strb	r2, [r3, #3]
		sQueue->tail += 1;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	789b      	ldrb	r3, [r3, #2]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	709a      	strb	r2, [r3, #2]
		if (sQueue->tail >= QUEUE_SIZE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	789b      	ldrb	r3, [r3, #2]
 8005e14:	2b1d      	cmp	r3, #29
 8005e16:	d902      	bls.n	8005e1e <Q_get_data_from_queue+0x56>
			sQueue->tail = 0;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	709a      	strb	r2, [r3, #2]
	}
	return value;
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <Q_clear_queue>:

uint8_t Q_clear_queue(sQueue_Struct_TypeDef *sQueue)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
	sQueue->number = 0;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	70da      	strb	r2, [r3, #3]
	sQueue->tail = sQueue->head;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	785a      	ldrb	r2, [r3, #1]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	709a      	strb	r2, [r3, #2]
//	sQueue->status = 0;

	return 1;
 8005e42:	2301      	movs	r3, #1
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <Q_get_number_items>:

uint8_t Q_get_number_items(sQueue_Struct_TypeDef *sQueue)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
	return sQueue->number;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	78db      	ldrb	r3, [r3, #3]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <SimInit>:
	{SIM_URC_CALL_READY, 		NULL,	"Call Ready",				at_callback_success,   at_callback_failure	},
	{SIM_URC_ERROR, 			NULL,	"ERROR",					at_callback_success,   at_callback_failure	},
};

void SimInit(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
	sUartSim.data = &uartSimBuffReceive[0];
 8005e6c:	4b08      	ldr	r3, [pc, #32]	; (8005e90 <SimInit+0x28>)
 8005e6e:	4a09      	ldr	r2, [pc, #36]	; (8005e94 <SimInit+0x2c>)
 8005e70:	601a      	str	r2, [r3, #0]
	sUartSim.length = 0;
 8005e72:	4b07      	ldr	r3, [pc, #28]	; (8005e90 <SimInit+0x28>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	809a      	strh	r2, [r3, #4]

	HAL_UART_Receive_IT(&uart_sim, sim_rx_buff, 1);
 8005e78:	2201      	movs	r2, #1
 8005e7a:	4907      	ldr	r1, [pc, #28]	; (8005e98 <SimInit+0x30>)
 8005e7c:	4807      	ldr	r0, [pc, #28]	; (8005e9c <SimInit+0x34>)
 8005e7e:	f7fe fb59 	bl	8004534 <HAL_UART_Receive_IT>
	fevent_active(s_event_sim_handler, EVENT_SIM_TURN_ON);
 8005e82:	2104      	movs	r1, #4
 8005e84:	4806      	ldr	r0, [pc, #24]	; (8005ea0 <SimInit+0x38>)
 8005e86:	f7ff fba9 	bl	80055dc <fevent_active>
}
 8005e8a:	bf00      	nop
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	200006cc 	.word	0x200006cc
 8005e94:	20000380 	.word	0x20000380
 8005e98:	200003e4 	.word	0x200003e4
 8005e9c:	20000534 	.word	0x20000534
 8005ea0:	200000f8 	.word	0x200000f8

08005ea4 <SimTask>:

void SimTask(void)
{
 8005ea4:	b590      	push	{r4, r7, lr}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	71fb      	strb	r3, [r7, #7]

	for (i = 0; i < EVENT_SIM_END; i++)
 8005eae:	2300      	movs	r3, #0
 8005eb0:	71fb      	strb	r3, [r7, #7]
 8005eb2:	e036      	b.n	8005f22 <SimTask+0x7e>
	{
		if (s_event_sim_handler[i].e_status == 1)
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	4a1f      	ldr	r2, [pc, #124]	; (8005f34 <SimTask+0x90>)
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	4413      	add	r3, r2
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d12b      	bne.n	8005f1c <SimTask+0x78>
		{
			if((s_event_sim_handler[i].e_systick == 0)||(HAL_GetTick() - s_event_sim_handler[i].e_systick  >=  s_event_sim_handler[i].e_period))
 8005ec4:	79fb      	ldrb	r3, [r7, #7]
 8005ec6:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <SimTask+0x90>)
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	4413      	add	r3, r2
 8005ecc:	3304      	adds	r3, #4
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d011      	beq.n	8005ef8 <SimTask+0x54>
 8005ed4:	f7fb f984 	bl	80011e0 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	79fb      	ldrb	r3, [r7, #7]
 8005edc:	4915      	ldr	r1, [pc, #84]	; (8005f34 <SimTask+0x90>)
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	440b      	add	r3, r1
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	1ad2      	subs	r2, r2, r3
 8005ee8:	79fb      	ldrb	r3, [r7, #7]
 8005eea:	4912      	ldr	r1, [pc, #72]	; (8005f34 <SimTask+0x90>)
 8005eec:	011b      	lsls	r3, r3, #4
 8005eee:	440b      	add	r3, r1
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d311      	bcc.n	8005f1c <SimTask+0x78>
			{
				s_event_sim_handler[i].e_systick = HAL_GetTick();
 8005ef8:	79fc      	ldrb	r4, [r7, #7]
 8005efa:	f7fb f971 	bl	80011e0 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	490c      	ldr	r1, [pc, #48]	; (8005f34 <SimTask+0x90>)
 8005f02:	0123      	lsls	r3, r4, #4
 8005f04:	440b      	add	r3, r1
 8005f06:	3304      	adds	r3, #4
 8005f08:	601a      	str	r2, [r3, #0]
				s_event_sim_handler[i].e_function_handler(i);
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	4a09      	ldr	r2, [pc, #36]	; (8005f34 <SimTask+0x90>)
 8005f0e:	011b      	lsls	r3, r3, #4
 8005f10:	4413      	add	r3, r2
 8005f12:	330c      	adds	r3, #12
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	79fa      	ldrb	r2, [r7, #7]
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4798      	blx	r3
	for (i = 0; i < EVENT_SIM_END; i++)
 8005f1c:	79fb      	ldrb	r3, [r7, #7]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	71fb      	strb	r3, [r7, #7]
 8005f22:	79fb      	ldrb	r3, [r7, #7]
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d9c5      	bls.n	8005eb4 <SimTask+0x10>
			}
		}
	}
}
 8005f28:	bf00      	nop
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd90      	pop	{r4, r7, pc}
 8005f32:	bf00      	nop
 8005f34:	200000f8 	.word	0x200000f8

08005f38 <SimON>:

uint8_t SimON(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
	static uint8_t OnStep = 0;

	switch(OnStep)
 8005f3c:	4b2c      	ldr	r3, [pc, #176]	; (8005ff0 <SimON+0xb8>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d843      	bhi.n	8005fcc <SimON+0x94>
 8005f44:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <SimON+0x14>)
 8005f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4a:	bf00      	nop
 8005f4c:	08005f61 	.word	0x08005f61
 8005f50:	08005f87 	.word	0x08005f87
 8005f54:	08005f9b 	.word	0x08005f9b
 8005f58:	08005faf 	.word	0x08005faf
 8005f5c:	08005fc3 	.word	0x08005fc3
	{
	case 0:
		fevent_disable(s_event_sim_handler, EVENT_SIM_AT_SEND);
 8005f60:	2100      	movs	r1, #0
 8005f62:	4824      	ldr	r0, [pc, #144]	; (8005ff4 <SimON+0xbc>)
 8005f64:	f7ff fb6c 	bl	8005640 <fevent_disable>
		SIM_PW_OFF1;
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2108      	movs	r1, #8
 8005f6c:	4822      	ldr	r0, [pc, #136]	; (8005ff8 <SimON+0xc0>)
 8005f6e:	f7fc fb07 	bl	8002580 <HAL_GPIO_WritePin>
		SIM_PWKEY_OFF1;
 8005f72:	2200      	movs	r2, #0
 8005f74:	2101      	movs	r1, #1
 8005f76:	4820      	ldr	r0, [pc, #128]	; (8005ff8 <SimON+0xc0>)
 8005f78:	f7fc fb02 	bl	8002580 <HAL_GPIO_WritePin>
		s_event_sim_handler[EVENT_SIM_TURN_ON].e_period = 2000;
 8005f7c:	4b1d      	ldr	r3, [pc, #116]	; (8005ff4 <SimON+0xbc>)
 8005f7e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005f82:	649a      	str	r2, [r3, #72]	; 0x48
		break;
 8005f84:	e02b      	b.n	8005fde <SimON+0xa6>
	case 1:
		SIM_PW_ON1;
 8005f86:	2201      	movs	r2, #1
 8005f88:	2108      	movs	r1, #8
 8005f8a:	481b      	ldr	r0, [pc, #108]	; (8005ff8 <SimON+0xc0>)
 8005f8c:	f7fc faf8 	bl	8002580 <HAL_GPIO_WritePin>
		s_event_sim_handler[EVENT_SIM_TURN_ON].e_period = 2000;
 8005f90:	4b18      	ldr	r3, [pc, #96]	; (8005ff4 <SimON+0xbc>)
 8005f92:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005f96:	649a      	str	r2, [r3, #72]	; 0x48
		break;
 8005f98:	e021      	b.n	8005fde <SimON+0xa6>
	case 2:
		SIM_PWKEY_ON1;
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	4816      	ldr	r0, [pc, #88]	; (8005ff8 <SimON+0xc0>)
 8005fa0:	f7fc faee 	bl	8002580 <HAL_GPIO_WritePin>
		s_event_sim_handler[EVENT_SIM_TURN_ON].e_period = 1000;
 8005fa4:	4b13      	ldr	r3, [pc, #76]	; (8005ff4 <SimON+0xbc>)
 8005fa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005faa:	649a      	str	r2, [r3, #72]	; 0x48
		break;
 8005fac:	e017      	b.n	8005fde <SimON+0xa6>
	case 3:
		SIM_PWKEY_OFF1;
 8005fae:	2200      	movs	r2, #0
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	4811      	ldr	r0, [pc, #68]	; (8005ff8 <SimON+0xc0>)
 8005fb4:	f7fc fae4 	bl	8002580 <HAL_GPIO_WritePin>
		s_event_sim_handler[EVENT_SIM_TURN_ON].e_period = 5000;
 8005fb8:	4b0e      	ldr	r3, [pc, #56]	; (8005ff4 <SimON+0xbc>)
 8005fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fbe:	649a      	str	r2, [r3, #72]	; 0x48
		break;
 8005fc0:	e00d      	b.n	8005fde <SimON+0xa6>
	case 4:
		s_event_sim_handler[EVENT_SIM_TURN_ON].e_period = 10000;
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <SimON+0xbc>)
 8005fc4:	f242 7210 	movw	r2, #10000	; 0x2710
 8005fc8:	649a      	str	r2, [r3, #72]	; 0x48
		break;
 8005fca:	e008      	b.n	8005fde <SimON+0xa6>
	default:
		fevent_disable(s_event_sim_handler, EVENT_SIM_TURN_ON);
 8005fcc:	2104      	movs	r1, #4
 8005fce:	4809      	ldr	r0, [pc, #36]	; (8005ff4 <SimON+0xbc>)
 8005fd0:	f7ff fb36 	bl	8005640 <fevent_disable>
		OnStep = 0;
 8005fd4:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <SimON+0xb8>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	701a      	strb	r2, [r3, #0]
		return 1;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e006      	b.n	8005fec <SimON+0xb4>
		break;
	}
	OnStep++;
 8005fde:	4b04      	ldr	r3, [pc, #16]	; (8005ff0 <SimON+0xb8>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	4b02      	ldr	r3, [pc, #8]	; (8005ff0 <SimON+0xb8>)
 8005fe8:	701a      	strb	r2, [r3, #0]

	return 0;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	200003e6 	.word	0x200003e6
 8005ff4:	200000f8 	.word	0x200000f8
 8005ff8:	48000400 	.word	0x48000400

08005ffc <fevent_sim_at_send_handler>:

/* */
static uint8_t fevent_sim_at_send_handler(uint8_t event)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	4603      	mov	r3, r0
 8006004:	71fb      	strb	r3, [r7, #7]
	uint8_t sim_step = 0;
 8006006:	2300      	movs	r3, #0
 8006008:	73fb      	strb	r3, [r7, #15]

	if (numRetry < SIM_CMD_RETRY)
 800600a:	4b1d      	ldr	r3, [pc, #116]	; (8006080 <fevent_sim_at_send_handler+0x84>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b02      	cmp	r3, #2
 8006010:	d829      	bhi.n	8006066 <fevent_sim_at_send_handler+0x6a>
	{
		sim_step = fGetSimStepFromQueue(0); // clear from queue later
 8006012:	2000      	movs	r0, #0
 8006014:	f000 f90e 	bl	8006234 <fGetSimStepFromQueue>
 8006018:	4603      	mov	r3, r0
 800601a:	73fb      	strb	r3, [r7, #15]
		if (sim_step >= SIM_CMD_END)
 800601c:	7bfb      	ldrb	r3, [r7, #15]
 800601e:	2b14      	cmp	r3, #20
 8006020:	d905      	bls.n	800602e <fevent_sim_at_send_handler+0x32>
		{
			fevent_disable(s_event_sim_handler, event);
 8006022:	79fb      	ldrb	r3, [r7, #7]
 8006024:	4619      	mov	r1, r3
 8006026:	4817      	ldr	r0, [pc, #92]	; (8006084 <fevent_sim_at_send_handler+0x88>)
 8006028:	f7ff fb0a 	bl	8005640 <fevent_disable>
 800602c:	e022      	b.n	8006074 <fevent_sim_at_send_handler+0x78>
		}
		else
		{
			numRetry++;
 800602e:	4b14      	ldr	r3, [pc, #80]	; (8006080 <fevent_sim_at_send_handler+0x84>)
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	3301      	adds	r3, #1
 8006034:	b2da      	uxtb	r2, r3
 8006036:	4b12      	ldr	r3, [pc, #72]	; (8006080 <fevent_sim_at_send_handler+0x84>)
 8006038:	701a      	strb	r2, [r3, #0]
			fSend_String_to_UartSim(&uart_sim, aSimStep[sim_step].at_string);
 800603a:	7bfa      	ldrb	r2, [r7, #15]
 800603c:	4912      	ldr	r1, [pc, #72]	; (8006088 <fevent_sim_at_send_handler+0x8c>)
 800603e:	4613      	mov	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	440b      	add	r3, r1
 8006048:	3304      	adds	r3, #4
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4619      	mov	r1, r3
 800604e:	480f      	ldr	r0, [pc, #60]	; (800608c <fevent_sim_at_send_handler+0x90>)
 8006050:	f000 f90e 	bl	8006270 <fSend_String_to_UartSim>
			s_event_sim_handler[event].e_period = SIM_CMD_TIMEOUT;
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	4a0b      	ldr	r2, [pc, #44]	; (8006084 <fevent_sim_at_send_handler+0x88>)
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	4413      	add	r3, r2
 800605c:	3308      	adds	r3, #8
 800605e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	e006      	b.n	8006074 <fevent_sim_at_send_handler+0x78>
		}
	}
	else
	{
		numRetry = 0;
 8006066:	4b06      	ldr	r3, [pc, #24]	; (8006080 <fevent_sim_at_send_handler+0x84>)
 8006068:	2200      	movs	r2, #0
 800606a:	701a      	strb	r2, [r3, #0]
		fevent_active(s_event_sim_handler, EVENT_SIM_AT_SEND_TIMEOUT);
 800606c:	2102      	movs	r1, #2
 800606e:	4805      	ldr	r0, [pc, #20]	; (8006084 <fevent_sim_at_send_handler+0x88>)
 8006070:	f7ff fab4 	bl	80055dc <fevent_active>
	}

	return 1;
 8006074:	2301      	movs	r3, #1
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	200003e5 	.word	0x200003e5
 8006084:	200000f8 	.word	0x200000f8
 8006088:	08006afc 	.word	0x08006afc
 800608c:	20000534 	.word	0x20000534

08006090 <fevent_sim_at_send_ok_handler>:

static uint8_t fevent_sim_at_send_ok_handler(uint8_t event)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	4603      	mov	r3, r0
 8006098:	71fb      	strb	r3, [r7, #7]
	numRetry = 0;
 800609a:	4b0c      	ldr	r3, [pc, #48]	; (80060cc <fevent_sim_at_send_ok_handler+0x3c>)
 800609c:	2200      	movs	r2, #0
 800609e:	701a      	strb	r2, [r3, #0]
	fevent_disable(s_event_sim_handler, event);
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	4619      	mov	r1, r3
 80060a4:	480a      	ldr	r0, [pc, #40]	; (80060d0 <fevent_sim_at_send_ok_handler+0x40>)
 80060a6:	f7ff facb 	bl	8005640 <fevent_disable>

	s_event_sim_handler[EVENT_SIM_AT_SEND].e_period = SIM_CMD_FREQ;
 80060aa:	4b09      	ldr	r3, [pc, #36]	; (80060d0 <fevent_sim_at_send_ok_handler+0x40>)
 80060ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80060b0:	609a      	str	r2, [r3, #8]
	s_event_sim_handler[EVENT_SIM_AT_SEND].e_systick = HAL_GetTick();
 80060b2:	f7fb f895 	bl	80011e0 <HAL_GetTick>
 80060b6:	4603      	mov	r3, r0
 80060b8:	4a05      	ldr	r2, [pc, #20]	; (80060d0 <fevent_sim_at_send_ok_handler+0x40>)
 80060ba:	6053      	str	r3, [r2, #4]

	fGetSimStepFromQueue(1); // clear AT from queue to complete
 80060bc:	2001      	movs	r0, #1
 80060be:	f000 f8b9 	bl	8006234 <fGetSimStepFromQueue>

	return 1;
 80060c2:	2301      	movs	r3, #1
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	200003e5 	.word	0x200003e5
 80060d0:	200000f8 	.word	0x200000f8

080060d4 <fevent_sim_at_send_timeout_handler>:

static uint8_t fevent_sim_at_send_timeout_handler(uint8_t event)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	4603      	mov	r3, r0
 80060dc:	71fb      	strb	r3, [r7, #7]
	uint8_t sim_step = 0;
 80060de:	2300      	movs	r3, #0
 80060e0:	73fb      	strb	r3, [r7, #15]

	fevent_disable(s_event_sim_handler, event);
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	4619      	mov	r1, r3
 80060e6:	480e      	ldr	r0, [pc, #56]	; (8006120 <fevent_sim_at_send_timeout_handler+0x4c>)
 80060e8:	f7ff faaa 	bl	8005640 <fevent_disable>
	sim_step = fGetSimStepFromQueue(0);
 80060ec:	2000      	movs	r0, #0
 80060ee:	f000 f8a1 	bl	8006234 <fGetSimStepFromQueue>
 80060f2:	4603      	mov	r3, r0
 80060f4:	73fb      	strb	r3, [r7, #15]

	if (sim_step < SIM_CMD_TCP_TRANS) {
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d808      	bhi.n	800610e <fevent_sim_at_send_timeout_handler+0x3a>
		fClearSimStepQueue();
 80060fc:	f000 f88a 	bl	8006214 <fClearSimStepQueue>
		sim_step = SIM_CMD_AT;	// check this point again
 8006100:	2300      	movs	r3, #0
 8006102:	73fb      	strb	r3, [r7, #15]
		fPushSimStepToQueue(sim_step);
 8006104:	7bfb      	ldrb	r3, [r7, #15]
 8006106:	4618      	mov	r0, r3
 8006108:	f000 f83a 	bl	8006180 <fPushSimStepToQueue>
 800610c:	e003      	b.n	8006116 <fevent_sim_at_send_timeout_handler+0x42>
	}
	else
	{
		fevent_active(s_event_sim_handler, EVENT_SIM_TURN_ON);
 800610e:	2104      	movs	r1, #4
 8006110:	4803      	ldr	r0, [pc, #12]	; (8006120 <fevent_sim_at_send_timeout_handler+0x4c>)
 8006112:	f7ff fa63 	bl	80055dc <fevent_active>
	}

	return 1;
 8006116:	2301      	movs	r3, #1
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	200000f8 	.word	0x200000f8

08006124 <fevent_sim_uart_receive_handler>:

static uint8_t fevent_sim_uart_receive_handler(uint8_t event)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	4603      	mov	r3, r0
 800612c:	71fb      	strb	r3, [r7, #7]
	uint8_t sim_step = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	73fb      	strb	r3, [r7, #15]

	sim_step = fGetSimStepFromQueue(0);
 8006132:	2000      	movs	r0, #0
 8006134:	f000 f87e 	bl	8006234 <fGetSimStepFromQueue>
 8006138:	4603      	mov	r3, r0
 800613a:	73fb      	strb	r3, [r7, #15]
	Sim_Check_Response(sim_step);
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	4618      	mov	r0, r3
 8006140:	f000 f8de 	bl	8006300 <Sim_Check_Response>

	return 1;
 8006144:	2301      	movs	r3, #1
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
	...

08006150 <fevent_sim_turn_on_handler>:

static uint8_t fevent_sim_turn_on_handler(uint8_t event)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	4603      	mov	r3, r0
 8006158:	71fb      	strb	r3, [r7, #7]
	if (SimON() == 1)
 800615a:	f7ff feed 	bl	8005f38 <SimON>
 800615e:	4603      	mov	r3, r0
 8006160:	2b01      	cmp	r3, #1
 8006162:	d105      	bne.n	8006170 <fevent_sim_turn_on_handler+0x20>
	{
		fClearSimStepQueue();
 8006164:	f000 f856 	bl	8006214 <fClearSimStepQueue>
		fPushBlockSimStepToQueue(aSimStepBlockConnect, sizeof(aSimStepBlockConnect));
 8006168:	2115      	movs	r1, #21
 800616a:	4804      	ldr	r0, [pc, #16]	; (800617c <fevent_sim_turn_on_handler+0x2c>)
 800616c:	f000 f82e 	bl	80061cc <fPushBlockSimStepToQueue>
	}

	return 1;
 8006170:	2301      	movs	r3, #1
}
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	200000e0 	.word	0x200000e0

08006180 <fPushSimStepToQueue>:

uint8_t fPushSimStepToQueue(uint8_t sim_step)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	4603      	mov	r3, r0
 8006188:	71fb      	strb	r3, [r7, #7]
	if (sim_step >= SIM_CMD_END)
 800618a:	79fb      	ldrb	r3, [r7, #7]
 800618c:	2b14      	cmp	r3, #20
 800618e:	d901      	bls.n	8006194 <fPushSimStepToQueue+0x14>
		return 0;
 8006190:	2300      	movs	r3, #0
 8006192:	e012      	b.n	80061ba <fPushSimStepToQueue+0x3a>

	if (Q_push_data_to_queue(&QueueSimStep, sim_step) == 0)
 8006194:	79fb      	ldrb	r3, [r7, #7]
 8006196:	4619      	mov	r1, r3
 8006198:	480a      	ldr	r0, [pc, #40]	; (80061c4 <fPushSimStepToQueue+0x44>)
 800619a:	f7ff fde8 	bl	8005d6e <Q_push_data_to_queue>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <fPushSimStepToQueue+0x28>
		return 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	e008      	b.n	80061ba <fPushSimStepToQueue+0x3a>

	if (s_event_sim_handler[EVENT_SIM_AT_SEND].e_status == 0)
 80061a8:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <fPushSimStepToQueue+0x48>)
 80061aa:	785b      	ldrb	r3, [r3, #1]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d103      	bne.n	80061b8 <fPushSimStepToQueue+0x38>
		fevent_active(s_event_sim_handler, EVENT_SIM_AT_SEND);
 80061b0:	2100      	movs	r1, #0
 80061b2:	4805      	ldr	r0, [pc, #20]	; (80061c8 <fPushSimStepToQueue+0x48>)
 80061b4:	f7ff fa12 	bl	80055dc <fevent_active>

	return 1;
 80061b8:	2301      	movs	r3, #1
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	200000c8 	.word	0x200000c8
 80061c8:	200000f8 	.word	0x200000f8

080061cc <fPushBlockSimStepToQueue>:

uint8_t fPushBlockSimStepToQueue(uint8_t *block_sim_step, uint8_t size)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	73fb      	strb	r3, [r7, #15]

	for (i = 0; i < size; i++)
 80061dc:	2300      	movs	r3, #0
 80061de:	73fb      	strb	r3, [r7, #15]
 80061e0:	e00e      	b.n	8006200 <fPushBlockSimStepToQueue+0x34>
	{
		if (fPushSimStepToQueue(block_sim_step[i]) == 0)
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	4413      	add	r3, r2
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff ffc8 	bl	8006180 <fPushSimStepToQueue>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <fPushBlockSimStepToQueue+0x2e>
			return 0;
 80061f6:	2300      	movs	r3, #0
 80061f8:	e007      	b.n	800620a <fPushBlockSimStepToQueue+0x3e>
	for (i = 0; i < size; i++)
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	3301      	adds	r3, #1
 80061fe:	73fb      	strb	r3, [r7, #15]
 8006200:	7bfa      	ldrb	r2, [r7, #15]
 8006202:	78fb      	ldrb	r3, [r7, #3]
 8006204:	429a      	cmp	r2, r3
 8006206:	d3ec      	bcc.n	80061e2 <fPushBlockSimStepToQueue+0x16>
	}

	return 1;
 8006208:	2301      	movs	r3, #1
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <fClearSimStepQueue>:

uint8_t fClearSimStepQueue(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0
	if (Q_clear_queue(&QueueSimStep) == 0)
 8006218:	4805      	ldr	r0, [pc, #20]	; (8006230 <fClearSimStepQueue+0x1c>)
 800621a:	f7ff fe07 	bl	8005e2c <Q_clear_queue>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <fClearSimStepQueue+0x14>
		return 0;
 8006224:	2300      	movs	r3, #0
 8006226:	e000      	b.n	800622a <fClearSimStepQueue+0x16>

	return 1;
 8006228:	2301      	movs	r3, #1
}
 800622a:	4618      	mov	r0, r3
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	200000c8 	.word	0x200000c8

08006234 <fGetSimStepFromQueue>:
/*
 * Type = 0 - don't clear queue
 * */
uint8_t fGetSimStepFromQueue(uint8_t Type)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	4603      	mov	r3, r0
 800623c:	71fb      	strb	r3, [r7, #7]
	uint8_t sim_step = 0;
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]

	if (Q_get_number_items(&QueueSimStep) == 0)
 8006242:	480a      	ldr	r0, [pc, #40]	; (800626c <fGetSimStepFromQueue+0x38>)
 8006244:	f7ff fe04 	bl	8005e50 <Q_get_number_items>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <fGetSimStepFromQueue+0x1e>
		return SIM_CMD_END;
 800624e:	2315      	movs	r3, #21
 8006250:	e007      	b.n	8006262 <fGetSimStepFromQueue+0x2e>
	sim_step = Q_get_data_from_queue(&QueueSimStep, Type);
 8006252:	79fb      	ldrb	r3, [r7, #7]
 8006254:	4619      	mov	r1, r3
 8006256:	4805      	ldr	r0, [pc, #20]	; (800626c <fGetSimStepFromQueue+0x38>)
 8006258:	f7ff fdb6 	bl	8005dc8 <Q_get_data_from_queue>
 800625c:	4603      	mov	r3, r0
 800625e:	73fb      	strb	r3, [r7, #15]

	return sim_step;
 8006260:	7bfb      	ldrb	r3, [r7, #15]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	200000c8 	.word	0x200000c8

08006270 <fSend_String_to_UartSim>:

void fSend_String_to_UartSim(UART_HandleTypeDef *huart, char *string) // alternative by DMA or IT tranfer
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t *)string, strlen(string), 1000);
 800627a:	6838      	ldr	r0, [r7, #0]
 800627c:	f7f9 ffaa 	bl	80001d4 <strlen>
 8006280:	4603      	mov	r3, r0
 8006282:	b29a      	uxth	r2, r3
 8006284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7fe f8be 	bl	800440c <HAL_UART_Transmit>
}
 8006290:	bf00      	nop
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <at_callback_success>:


static uint8_t at_callback_success(uint8_t *uart_string)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]

	return 1;
 80062a0:	2301      	movs	r3, #1
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <at_callback_failure>:

static uint8_t at_callback_failure(uint8_t *uart_string)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]

	return 1;
 80062b6:	2301      	movs	r3, #1
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <at_send_message_callback_success>:

static uint8_t at_send_message_callback_success(uint8_t *uart_string)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]

	return 1;
 80062cc:	2301      	movs	r3, #1
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
	...

080062dc <at_connect_TCP_callback_success>:

static uint8_t at_connect_TCP_callback_success(uint8_t *uart_string)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
	s_event_sub_handler[EVENT_SUB_BLINK_LED1].e_period = 200;
 80062e4:	4b05      	ldr	r3, [pc, #20]	; (80062fc <at_connect_TCP_callback_success+0x20>)
 80062e6:	22c8      	movs	r2, #200	; 0xc8
 80062e8:	609a      	str	r2, [r3, #8]
	fevent_active(s_event_sub_handler, EVENT_SUB_BLINK_LED1);
 80062ea:	2100      	movs	r1, #0
 80062ec:	4803      	ldr	r0, [pc, #12]	; (80062fc <at_connect_TCP_callback_success+0x20>)
 80062ee:	f7ff f975 	bl	80055dc <fevent_active>

	return 1;
 80062f2:	2301      	movs	r3, #1
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	2000000c 	.word	0x2000000c

08006300 <Sim_Check_Response>:

uint8_t Sim_Check_Response(uint8_t sim_step) // alternative by ring buffer
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	4603      	mov	r3, r0
 8006308:	71fb      	strb	r3, [r7, #7]
	char *p = NULL;
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]

	if (sim_step < SIM_CMD_END)
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	2b14      	cmp	r3, #20
 8006312:	d822      	bhi.n	800635a <Sim_Check_Response+0x5a>
	{
		p = strstr((char*)sUartSim.data, aSimStep[sim_step].at_response);
 8006314:	4b1f      	ldr	r3, [pc, #124]	; (8006394 <Sim_Check_Response+0x94>)
 8006316:	6818      	ldr	r0, [r3, #0]
 8006318:	79fa      	ldrb	r2, [r7, #7]
 800631a:	491f      	ldr	r1, [pc, #124]	; (8006398 <Sim_Check_Response+0x98>)
 800631c:	4613      	mov	r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	440b      	add	r3, r1
 8006326:	3308      	adds	r3, #8
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4619      	mov	r1, r3
 800632c:	f000 f878 	bl	8006420 <strstr>
 8006330:	60f8      	str	r0, [r7, #12]
		if (p != NULL)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d010      	beq.n	800635a <Sim_Check_Response+0x5a>
		{
			fevent_active(s_event_sim_handler, EVENT_SIM_AT_SEND_OK);
 8006338:	2101      	movs	r1, #1
 800633a:	4818      	ldr	r0, [pc, #96]	; (800639c <Sim_Check_Response+0x9c>)
 800633c:	f7ff f94e 	bl	80055dc <fevent_active>
			aSimStep[sim_step].callback_success(sUartSim.data);
 8006340:	79fa      	ldrb	r2, [r7, #7]
 8006342:	4915      	ldr	r1, [pc, #84]	; (8006398 <Sim_Check_Response+0x98>)
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	440b      	add	r3, r1
 800634e:	330c      	adds	r3, #12
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a10      	ldr	r2, [pc, #64]	; (8006394 <Sim_Check_Response+0x94>)
 8006354:	6812      	ldr	r2, [r2, #0]
 8006356:	4610      	mov	r0, r2
 8006358:	4798      	blx	r3
		}
	}
	memcpy(uartDebugBuff, uartSimBuffReceive, sizeof(uartSimBuffReceive));
 800635a:	4a11      	ldr	r2, [pc, #68]	; (80063a0 <Sim_Check_Response+0xa0>)
 800635c:	4b11      	ldr	r3, [pc, #68]	; (80063a4 <Sim_Check_Response+0xa4>)
 800635e:	4610      	mov	r0, r2
 8006360:	4619      	mov	r1, r3
 8006362:	2364      	movs	r3, #100	; 0x64
 8006364:	461a      	mov	r2, r3
 8006366:	f000 f845 	bl	80063f4 <memcpy>
	memset(&uartSimBuffReceive[0], 0, sizeof(uartSimBuffReceive));
 800636a:	2264      	movs	r2, #100	; 0x64
 800636c:	2100      	movs	r1, #0
 800636e:	480d      	ldr	r0, [pc, #52]	; (80063a4 <Sim_Check_Response+0xa4>)
 8006370:	f000 f84e 	bl	8006410 <memset>
	sUartSim.length = 0;
 8006374:	4b07      	ldr	r3, [pc, #28]	; (8006394 <Sim_Check_Response+0x94>)
 8006376:	2200      	movs	r2, #0
 8006378:	809a      	strh	r2, [r3, #4]
	fevent_active(s_event_sub_handler, EVENT_SUB_PRINT_DEBUG);
 800637a:	2103      	movs	r1, #3
 800637c:	480a      	ldr	r0, [pc, #40]	; (80063a8 <Sim_Check_Response+0xa8>)
 800637e:	f7ff f92d 	bl	80055dc <fevent_active>
	fevent_disable(s_event_sim_handler, EVENT_SIM_UART_RECEIVE);
 8006382:	2103      	movs	r1, #3
 8006384:	4805      	ldr	r0, [pc, #20]	; (800639c <Sim_Check_Response+0x9c>)
 8006386:	f7ff f95b 	bl	8005640 <fevent_disable>

	return 1;
 800638a:	2301      	movs	r3, #1
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	200006cc 	.word	0x200006cc
 8006398:	08006afc 	.word	0x08006afc
 800639c:	200000f8 	.word	0x200000f8
 80063a0:	2000016c 	.word	0x2000016c
 80063a4:	20000380 	.word	0x20000380
 80063a8:	2000000c 	.word	0x2000000c

080063ac <__libc_init_array>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	4d0d      	ldr	r5, [pc, #52]	; (80063e4 <__libc_init_array+0x38>)
 80063b0:	4c0d      	ldr	r4, [pc, #52]	; (80063e8 <__libc_init_array+0x3c>)
 80063b2:	1b64      	subs	r4, r4, r5
 80063b4:	10a4      	asrs	r4, r4, #2
 80063b6:	2600      	movs	r6, #0
 80063b8:	42a6      	cmp	r6, r4
 80063ba:	d109      	bne.n	80063d0 <__libc_init_array+0x24>
 80063bc:	4d0b      	ldr	r5, [pc, #44]	; (80063ec <__libc_init_array+0x40>)
 80063be:	4c0c      	ldr	r4, [pc, #48]	; (80063f0 <__libc_init_array+0x44>)
 80063c0:	f000 f846 	bl	8006450 <_init>
 80063c4:	1b64      	subs	r4, r4, r5
 80063c6:	10a4      	asrs	r4, r4, #2
 80063c8:	2600      	movs	r6, #0
 80063ca:	42a6      	cmp	r6, r4
 80063cc:	d105      	bne.n	80063da <__libc_init_array+0x2e>
 80063ce:	bd70      	pop	{r4, r5, r6, pc}
 80063d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d4:	4798      	blx	r3
 80063d6:	3601      	adds	r6, #1
 80063d8:	e7ee      	b.n	80063b8 <__libc_init_array+0xc>
 80063da:	f855 3b04 	ldr.w	r3, [r5], #4
 80063de:	4798      	blx	r3
 80063e0:	3601      	adds	r6, #1
 80063e2:	e7f2      	b.n	80063ca <__libc_init_array+0x1e>
 80063e4:	08006cbc 	.word	0x08006cbc
 80063e8:	08006cbc 	.word	0x08006cbc
 80063ec:	08006cbc 	.word	0x08006cbc
 80063f0:	08006cc0 	.word	0x08006cc0

080063f4 <memcpy>:
 80063f4:	440a      	add	r2, r1
 80063f6:	4291      	cmp	r1, r2
 80063f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063fc:	d100      	bne.n	8006400 <memcpy+0xc>
 80063fe:	4770      	bx	lr
 8006400:	b510      	push	{r4, lr}
 8006402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006406:	f803 4f01 	strb.w	r4, [r3, #1]!
 800640a:	4291      	cmp	r1, r2
 800640c:	d1f9      	bne.n	8006402 <memcpy+0xe>
 800640e:	bd10      	pop	{r4, pc}

08006410 <memset>:
 8006410:	4402      	add	r2, r0
 8006412:	4603      	mov	r3, r0
 8006414:	4293      	cmp	r3, r2
 8006416:	d100      	bne.n	800641a <memset+0xa>
 8006418:	4770      	bx	lr
 800641a:	f803 1b01 	strb.w	r1, [r3], #1
 800641e:	e7f9      	b.n	8006414 <memset+0x4>

08006420 <strstr>:
 8006420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006422:	780c      	ldrb	r4, [r1, #0]
 8006424:	b164      	cbz	r4, 8006440 <strstr+0x20>
 8006426:	4603      	mov	r3, r0
 8006428:	781a      	ldrb	r2, [r3, #0]
 800642a:	4618      	mov	r0, r3
 800642c:	1c5e      	adds	r6, r3, #1
 800642e:	b90a      	cbnz	r2, 8006434 <strstr+0x14>
 8006430:	4610      	mov	r0, r2
 8006432:	e005      	b.n	8006440 <strstr+0x20>
 8006434:	4294      	cmp	r4, r2
 8006436:	d108      	bne.n	800644a <strstr+0x2a>
 8006438:	460d      	mov	r5, r1
 800643a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800643e:	b902      	cbnz	r2, 8006442 <strstr+0x22>
 8006440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006442:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8006446:	4297      	cmp	r7, r2
 8006448:	d0f7      	beq.n	800643a <strstr+0x1a>
 800644a:	4633      	mov	r3, r6
 800644c:	e7ec      	b.n	8006428 <strstr+0x8>
	...

08006450 <_init>:
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006452:	bf00      	nop
 8006454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006456:	bc08      	pop	{r3}
 8006458:	469e      	mov	lr, r3
 800645a:	4770      	bx	lr

0800645c <_fini>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	bf00      	nop
 8006460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006462:	bc08      	pop	{r3}
 8006464:	469e      	mov	lr, r3
 8006466:	4770      	bx	lr
